<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘归</title>
  
  <subtitle>底色悲凉，自在如风。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jalan.space/"/>
  <updated>2019-03-05T17:56:25.096Z</updated>
  <id>http://jalan.space/</id>
  
  <author>
    <name>Jalan.江佳扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python configparser 模块</title>
    <link href="http://jalan.space/2019/02/14/2019/python-config-file/"/>
    <id>http://jalan.space/2019/02/14/2019/python-config-file/</id>
    <published>2019-02-14T10:22:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>Ps：基于 Python3</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在项目根目录下创建 <code>.ini</code> 格式的配置文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-tag">conf</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure><p>配置文件大概长这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ServerAliveInterval = 45</span><br><span class="line">Compression = <span class="literal">yes</span></span><br><span class="line">CompressionLevel = 9</span><br><span class="line">ForwardX11 = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">[bitbucket.org]</span><br><span class="line">User = hg</span><br><span class="line"></span><br><span class="line">[<span class="builtin-name">debug</span>]</span><br><span class="line"><span class="attribute">log_errors</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">show_warnings</span>=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[topsecret.server.com]</span><br><span class="line">Port = 50022</span><br><span class="line">ForwardX11 = <span class="literal">no</span></span><br></pre></td></tr></table></figure><h2 id="优雅读取"><a href="#优雅读取" class="headerlink" title="优雅读取"></a>优雅读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"><span class="comment"># 配置文件路径</span></span><br><span class="line">config.read(<span class="string">"./conf.ini"</span>)</span><br><span class="line">config.sections()</span><br><span class="line"><span class="comment"># 读取配置</span></span><br><span class="line">config.get(<span class="string">"DEFAULT"</span>, <span class="string">"Compression"</span>)</span><br><span class="line">cfg.getboolean(<span class="string">'debug'</span>,<span class="string">'log_errors'</span>)</span><br><span class="line">config.getint(<span class="string">"topsecret.server.com"</span>, <span class="string">"Port"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.python.org/3/library/configparser.html" target="_blank" rel="noopener">configparser — Configuration file parser</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c13/p10_read_configuration_files.html" target="_blank" rel="noopener">读取配置文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      论如何优雅读取配置文件
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis 持久化</title>
    <link href="http://jalan.space/2019/02/05/2019/redis-rdb-aof/"/>
    <id>http://jalan.space/2019/02/05/2019/redis-rdb-aof/</id>
    <published>2019-02-05T08:36:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ul><li>Redis 是内存数据库，数据库状态都存储在内存里</li><li>一旦服务器进程退出，服务器中的数据库状态会消失不见</li><li>为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上</li></ul><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><ul><li>RDB 文件是一个经过压缩的二进制文件</li><li>RDB 文件保存在硬盘里</li><li>通过保存数据库中的键值对来记录数据库状态</li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>有两个 Redis 命令可以用于生成 RDB 文件：</p><ul><li>SAVE</li><li>BGSAVE</li></ul><p>创建 RDB 的实际工作由 <code>rdb.c/rdbSave</code> 函数完成，SAVE 命令和 BGSAVE 命令调用方式不同。</p><h3 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h3><ul><li>会阻塞 Redis 服务器进程</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SAVE</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 创建 RDB 文件</span></span><br><span class="line">    rdbSave()</span><br></pre></td></tr></table></figure><h3 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h3><ul><li>会派生出一个子进程，负责创建 RDB 文件</li><li>服务器进程（父进程）继续处理命令请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGSAVE</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    pid = fork()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 子进程负责创建 RDB 文件</span></span><br><span class="line">        rdbSave()</span><br><span class="line">        <span class="comment"># 完成之后向父进程发送信号</span></span><br><span class="line">        signal_parent()</span><br><span class="line">    <span class="keyword">elif</span> pid &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 父进程继续处理命令请求，并通过轮训等待子进程的信号</span></span><br><span class="line">        handle_request_and_wait_signal()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handle_fork_error()</span><br></pre></td></tr></table></figure><h2 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h2><ul><li>载入工作在服务器启动时自动执行</li><li>服务器在载入 RDB 文件期间，会一直处于阻塞状态，直到载入工作完成为止</li></ul><h2 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h2><p>Redis 允许用户通过设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令。</p><h3 id="设置保存条件"><a href="#设置保存条件" class="headerlink" title="设置保存条件"></a>设置保存条件</h3><p>若提供如下配置：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>只要满足以下条件中的一个，BGSAVE 命令就会被执行：</p><ul><li>服务器在 900 秒之内，对数据库进行了至少 1 次修改</li><li>服务器在 300 秒之内，对数据库进行了至少 10 次修改</li></ul><h3 id="saveparams"><a href="#saveparams" class="headerlink" title="saveparams"></a>saveparams</h3><p>服务器程序会根据 save 选项所设置的保存条件，设置服务器状态 redisServer 结构的 <code>saveparams</code> 属性。</p><ul><li><code>saveparams</code> 属性是一个数组</li><li>数组中的每一个元素都是一个 <code>saveparam</code> 结构</li><li>每个 <code>saveparam</code> 结构都保存了一个 <code>save</code> 选项设置的保存条件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> &#123;</span></span><br><span class="line">    <span class="comment">// 秒数</span></span><br><span class="line">    <span class="keyword">time_t</span> seconds;</span><br><span class="line">    <span class="comment">// 修改数</span></span><br><span class="line">    <span class="keyword">int</span> changes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dirty"><a href="#dirty" class="headerlink" title="dirty"></a>dirty</h3><p><code>dirty</code> 计数器记录距离上一次成功执行 SAVE 命令或 BGSAVE 命令之后，服务器对数据库状态进行了多少次修改（包括写入、删除、更新等操作）</p><h3 id="lastsave"><a href="#lastsave" class="headerlink" title="lastsave"></a>lastsave</h3><p>是一个 UNINX 时间戳，记录了服务器上一次成功执行 SAVE 命令或者 BGSAVE 命令的时间。</p><h3 id="检查保存条件是否满足"><a href="#检查保存条件是否满足" class="headerlink" title="检查保存条件是否满足"></a>检查保存条件是否满足</h3><p>服务器周期性操作函数 <code>serverCron</code> （该函数对正在运行的服务器进行维护）默认每隔 100 毫秒就会执行一次，其中一项工作就是检查 save 选项所设置的保存条件是否已经满足，满足的话就执行 BGSAVE 命令。</p><p>伪代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serverCron</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">    <span class="comment"># 遍历所有保存条件</span></span><br><span class="line">    <span class="keyword">for</span> saveparam <span class="keyword">in</span> server.<span class="symbol">saveparams:</span></span><br><span class="line">        <span class="comment"># 计算距离上次执行保存操作有多少秒</span></span><br><span class="line">        save_interval = unixtime_now() - server.lastsave</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果数据库状态的修改次数超过条件所设置的次数</span></span><br><span class="line">        <span class="comment"># 如果距离上次保存的时间超过条件所设置的时间</span></span><br><span class="line">        <span class="keyword">if</span> server.dirty &gt;= saveparam.changes <span class="keyword">and</span> save_interval &gt; saveparam.<span class="symbol">seconds:</span></span><br><span class="line">            BGSAVE()</span><br></pre></td></tr></table></figure><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><ul><li>通过保存 Redis 服务器所执行的写命令来记录数据库状态</li><li>写入 AOF 文件的所有命令都是以 Redis 的<strong>命令请求协议格式</strong>保存的</li></ul><h2 id="AOF-持久化实现"><a href="#AOF-持久化实现" class="headerlink" title="AOF 持久化实现"></a>AOF 持久化实现</h2><h3 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h3><p>若 AOF 持久化功能处于打开状态，服务器在执行完一个命令后，会以协议格式将被执行的写命令追加到服务器状态的 <code>aof_buf</code> 缓冲区的末尾。</p><h3 id="文件写入与同步"><a href="#文件写入与同步" class="headerlink" title="文件写入与同步"></a>文件写入与同步</h3><ul><li>服务器每次结束一个事件循环之前，都会调用 <code>flushAppendOnlyFile</code> 函数</li><li><code>flushAppendOnlyFile</code> 函数会考虑是否需要将 <code>aof_buf</code> 缓冲区中的内容写入和保存到 AOF 文件里</li><li><code>flushAppendOnlyFile</code> 函数执行以下工作：<ul><li>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件</li><li>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中</li></ul></li><li><code>flushAppendOnlyFile</code> 函数的行为由服务器配置的 <code>appendfsync</code> 选项的值来决定</li></ul><p><code>appendfsync</code> 选项的值具体如下：</p><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每个写命令都同步（效率低，但最安全）</td></tr><tr><td>everysec</td><td>每秒同步一次</td></tr><tr><td>no</td><td>不进行同步，何时同步由操作系统来决定</td></tr></tbody></table><h4 id="为何需要同步？"><a href="#为何需要同步？" class="headerlink" title="为何需要同步？"></a>为何需要同步？</h4><p>对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。</p><p>如果计算机停机，则保存在缓冲区的内容将会丢失。</p><h2 id="载入与数据还原"><a href="#载入与数据还原" class="headerlink" title="载入与数据还原"></a>载入与数据还原</h2><ol><li>创建一个不带网络连接的伪客户端</li><li>从 AOF 文件中分析并读取出一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>一直执行步骤 2 和 3，直到 AOF 文件中的所有写命令都被处理完毕为止</li></ol><h2 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h2><ul><li>为了解决 AOF 文件体积膨胀的问题</li><li>通过重写创建一个新的 AOF 文件来替代现有的 AOF 文件，新的 AOF 文件不会包含任何浪费空间的冗余命令</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>不需要对现有的 AOF 文件进行任何操作</li><li>从数据库中直接读取键现在的值</li><li>用一条命令记录键值对，从而代替之前记录这个键值对的多条命令</li></ul><h3 id="AOF-后台重写"><a href="#AOF-后台重写" class="headerlink" title="AOF 后台重写"></a>AOF 后台重写</h3><p>为不阻塞父进程，Redis 将 AOF 重写程序放到子进程里执行。</p><p>在子进程执行 AOF 重写期间，服务器进程需要执行三个工作：</p><ol><li>执行客户端发来的命令</li><li>将执行后的写命令追加到 AOF 缓冲区</li><li>将执行后的写命令追加到 AOF 重写缓冲区</li></ol><p>这样一来可保证：</p><ul><li>AOF 缓冲区的内容会被写入和同步到 AOF 文件，对现有 AOF 文件的处理工作会如常进行</li><li>从创建重写子进程开始，所有写命令也会被记录到 AOF 重写缓冲区里，保证重写后的 AOF 文件与当前数据库状态一致</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《Redis 设计与实现》</li></ul>]]></content>
    
    <summary type="html">
    
      RDB 与 AOF
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Redis" scheme="http://jalan.space/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python 实现队列的几种方式</title>
    <link href="http://jalan.space/2019/02/05/2019/python-queue/"/>
    <id>http://jalan.space/2019/02/05/2019/python-queue/</id>
    <published>2019-02-05T05:52:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><ul><li>队列是一种特殊的线性表</li><li>是一种先进先出（FIFO）的数据结构</li><li>只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作</li><li>进行插入操作的端称为队尾，进行删除操作的端称为队头</li><li>队列中没有元素时，称为空队列</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="借用列表"><a href="#借用列表" class="headerlink" title="借用列表"></a>借用列表</h3><p>利用 <code>list</code> 实现对队列的模拟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表</span></span><br><span class="line">q = []</span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">q.append(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line"><span class="keyword">del</span> q[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列，即可实现栈，也可实现队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建队列</span></span><br><span class="line">d = collections.deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">d.append(<span class="number">1</span>) <span class="comment">#从队尾</span></span><br><span class="line">d.appendleft(<span class="number">2</span>) <span class="comment">#从队头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line">d.pop() <span class="comment">#从队尾</span></span><br><span class="line">d.popleft() <span class="comment">#从队头</span></span><br></pre></td></tr></table></figure><p>详见官方文档：<a href="https://docs.python.org/3/library/collections.html?highlight=collection#deque-objects" target="_blank" rel="noopener">deque objects</a>。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h3><p><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&amp;tqId=11175&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">从上往下打印二叉树</a>，借助队列实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从上到下每个节点值列表，例：[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintFromTopToBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        queue = []</span><br><span class="line">        res = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">            q_len = len(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, q_len):</span><br><span class="line">                r = queue[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">del</span> queue[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                res.append(r.val)</span><br><span class="line">                queue.append(r.left)</span><br><span class="line">                queue.append(r.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      人生苦短，我用 Python
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《白蛇：缘起》观后感</title>
    <link href="http://jalan.space/2019/02/02/2019/white-snake/"/>
    <id>http://jalan.space/2019/02/02/2019/white-snake/</id>
    <published>2019-02-02T13:53:00.000Z</published>
    <updated>2019-03-05T17:56:25.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/white-snake/snake.jpeg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>离在电影院里看《大鱼海棠》已经过去两年多了，那时写了一篇 <a href="/2016/07/07/2016-07-09-big-fish-and-chinese-flowering-crabapple/">《大鱼·海棠》——没有想象中的那么好</a>，觉得剧情与制作上都不如《大圣归来》来得惊艳。</p><p>今天约了老郑，想起前段时间在微博上看到了《白蛇：缘起》的动画宣传，果断入手两张票奔赴金逸。</p><p>两个人忐忑地坐在儿童厅里，本以为会有一堆熊孩子叽叽喳喳，直到看到 “十八禁” 的画面后恍然：这绝对不是一部儿童向的动画。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h3><p>《白娘子传奇》已是家喻户晓的故事，这部电影带上这个大 IP 讲起许仙和白娘子前世的故事，可谓 “旧瓶装新酒”。</p><p>而这 “新酒” 啊，真香。</p><blockquote><p>我们好奇为什么白素贞那么义无反顾地爱一个人，所以就想知道前面到底发生什么事情，这个切入点非常有意思，这既是白蛇爱情的缘起，也是电影故事的缘起。</p></blockquote><h3 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h3><p><img src="/img/in-post/white-snake/xuan.jpeg" alt=""></p><p>大爱许宣，不知情的以为是福建人叫了许仙的名字。</p><p>少年人阿宣，这一世不再是文弱书生了，他成了山野间的少年，善良活泼，勇敢坚毅，甚至颇有几分 “逍遥” 的味道。</p><p>不仅仅是身份的不同，他也完全打破了传说中对许仙的所有设定。</p><p>坚毅勇敢，从不认命。即便人妖殊途，他还是毅然决然地放弃了人的身份，主动变成最弱最无能的小妖，只为了和白蛇在一起。这哪是著名渣男许仙呢？</p><blockquote><p>如果不在一起，我现在就后悔。</p></blockquote><p>白素贞那么义无反顾地爱一个人，或许就是因为许仙前世的付出吧。</p><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p><img src="/img/in-post/white-snake/river.jpeg" alt=""></p><p>四个字：<strong>精致柔和</strong>！</p><p>特别是山水城镇的全景描绘，现代画风与中国传统水墨画风的交融十分惊艳。</p><p>片中有来有回的打斗场景也让人目不暇接，充满观赏性。（打斗场面比爱情线好看多了）</p><p>虽然人物表情还是略显僵硬，但是小白真是太好看了，prprprpr……</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>老船夫摇桨驱舟时突然唱出一句<a href="https://music.163.com/song?id=201487&amp;userid=53623203" target="_blank" rel="noopener">《渡情》</a> 让人会心一笑。</p><p>许宣嘲笑他唱的歌太老，自己清唱起一首<a href="https://music.163.com/song?id=1342466454&amp;userid=53623203" target="_blank" rel="noopener">《何须问》</a>来。</p><p>《何须问》这首歌的歌词是这样的：</p><blockquote><p>君不见东流水<br>来时无踪迹 一去无穷已<br>君不见城上日<br>今暝没山去 明朝复更出<br>何须问 浮生情<br>原知浮生是梦中<br>何须问 浮生情<br>只此浮生是梦中<br>只此浮生是梦中</p></blockquote><p>歌词出自几处：</p><blockquote><p>君不见东流水，一去无穷已。<br>—— 唐·贺兰进明《行路难五首》</p></blockquote><blockquote><p>来是无迹去无踪，去与来时是一同。何须更问浮生事，只此浮生是梦中。<br>——唐·鸟窠道林禅师</p></blockquote><blockquote><p>君不见城上日，今暝没尽去，明朝复更出。<br>——南北朝·鲍照《拟行路难十八首》</p></blockquote><p>无论是画风、人物建模还是曲调歌词，都是中国古典的味道。</p><p>而影片末尾小白再遇许仙时又放起了 <a href="https://music.163.com/song?id=201489&amp;userid=53623203" target="_blank" rel="noopener">《前世今生》</a>，令人莞尔。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>电影散场后吃了烧烤喝了小酒，八九点钟带着微微的醉意在福州夜晚的街道上一个人走着，有几分难得的轻松。</p><p>想到 “缘起” 的今生如此艰辛，而来世又要斗秃驴法海，且逃不过雷峰塔一劫，看来又是艰难的一世。</p><p>而我连来世都没有，想想真是轻松快活呢。</p>]]></content>
    
    <summary type="html">
    
      前世锁珠钗，此生断桥缘
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="影评" scheme="http://jalan.space/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Redis 字典与 rehash</title>
    <link href="http://jalan.space/2019/02/01/2019/redis-rehash/"/>
    <id>http://jalan.space/2019/02/01/2019/redis-rehash/</id>
    <published>2019-02-01T06:35:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h2><p>Redis 的字典使用哈希表作为底层实现。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表由 <code>dict.h/dictht</code> 结构定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><ul><li>table：数组，数组中的每个元素是一个指向 <code>dictEntry</code> 结构的指针</li><li>dictEntry：每个 <code>dictEntry</code> 结构保存着一个键值对</li><li>size：记录哈希表的大小</li><li>used：哈希表目前已有节点</li><li>sizemask：属性值总等于 <code>size - 1</code>，用于和哈希值一起决定一个键应该被放到 <code>table</code> 数组的哪个索引上</li></ul><p><img src="/img/in-post/redis/empty-hash-table.png" alt="一个空的哈希表"></p><h3 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h3><p>哈希表节点使用 <code>dictEntry</code> 结构表示， 每个 <code>dictEntry</code> 结构都保存着一个键值对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><ul><li>key：键</li><li>v：值，可以是指针、<code>uint64_t</code> 整数或 <code>int64_t</code> 整数</li><li>next：指向下一个哈希表节点的指针</li></ul><p><img src="/img/in-post/redis/dict-entry.png" alt="哈希表节点"></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典由 <code>dict.h/dict</code> 结构表示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line"></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><ul><li>type：一个指向 <code>dictType</code> 结构的指针<ul><li>dictType：保存了一簇用于操作特定类型键值对的函数</li></ul></li><li>privdata：保存了需要传给那些类型特定函数的可选参数</li><li>ht：包含两个项的数组<ul><li>ht[0]：字典只使用 <code>ht[0]</code></li><li>ht[1]：用于 rehash</li></ul></li><li>rehashidx：记录了 rehash 目前的进度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制值的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对比键的函数</span></span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁键的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁值的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/redis/dict.png" alt="字典"></p><h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>对哈希表的大小进行扩展或收缩</li><li>让哈希表的负载因子（load factor）维持在一个合理的范围内</li></ul><h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载因子 = 哈希表已保存节点数量 / 哈希表大小</span></span><br><span class="line"><span class="attr">load_factor</span> = ht[<span class="number">0</span>].used / ht[<span class="number">0</span>].size</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为字典的 <code>ht[1]</code> 哈希表分配空间<ul><li>扩展：<code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used * 2</code> 的 <code>2^n</code> （2 的 n 次方幂）</li><li>收缩：<code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used</code> 的 <code>2^n</code></li></ul></li><li>将保存在 <code>ht[0]</code> 中的所有键值对 rehash 到 <code>ht[1]</code> 上面</li><li>释放 <code>ht[0]</code>，将 <code>ht[1]</code> 设置为 <code>ht[0]</code>，并在 <code>ht[1]</code> 新创建一个空白哈希表</li></ol><h2 id="渐进式-rehash"><a href="#渐进式-rehash" class="headerlink" title="渐进式 rehash"></a>渐进式 rehash</h2><p>rehash 动作并不是一次性、集中式地完成的， 而是分多次、渐进式地完成。</p><p>因为如果键值的数目过多，一次性将这些键值对全部 rehash 到 <code>ht[1]</code> 的话， 庞大的计算量可能会导致服务器在一段时间内停止服务。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为 <code>ht[1]</code> 分配空间</li><li>在字典中维持一个索引计数器变量 <code>rehashidx</code> ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始</li><li>开始 rehash<ul><li>字典的删除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行</li><li>新添加到字典的键值对则会一律会被保存到 <code>ht[1]</code> 里面</li><li>字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外， 还会顺带将 <code>ht[0]</code> 哈希表在 rehashidx 索引上的所有键值对 rehash 到 <code>ht[1]</code></li><li>操作完成后，将 <code>rehashidx</code> 属性的值 <code>+1</code></li></ul></li><li><code>ht[0]</code> 的所有键值对都会被 rehash 至 <code>ht[1]</code>，这时程序将 <code>rehashidx</code> 属性的值设为 -1 ， 表示 rehash 操作已完成</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>分而治之，将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上</li><li>避免集中式 rehash 而带来的庞大计算量</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tech.meituan.com/2018/07/27/redis-rehash-practice-optimization.html" target="_blank" rel="noopener">美团针对Redis Rehash机制的探索和实践</a></li><li>《Redis 设计与实现》</li></ul>]]></content>
    
    <summary type="html">
    
      字典的实现
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Redis" scheme="http://jalan.space/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言入门笔记</title>
    <link href="http://jalan.space/2019/01/29/2019/begin-go/"/>
    <id>http://jalan.space/2019/01/29/2019/begin-go/</id>
    <published>2019-01-29T07:29:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/studygolang/gctt-images/master/Learning-Go-s-Concurrency-Through-Illustrations/go.jpeg" alt=""></p><p>工作需要入手了 Go 语言，开发使用的是 <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin Web Framework</a>。</p><p>入手后发现语法和 PHP/Python/JavaScript 之流还是有很大区别的，下面对学习资料及入门笔记做简单整理。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Go（又称 Golang ），由 Google 开发</li><li>是一种 <a href="https://segmentfault.com/a/1190000012372372" target="_blank" rel="noopener">静态强类型</a>、<a href="https://www.cnblogs.com/zy1987/p/3784753.html" target="_blank" rel="noopener">编译型</a>、并发型，并具有垃圾回收功能的编程语言</li><li>语法接近 C 语言，但对于变量的声明有所不同</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>MacOS 下：</p><p>直接前往 <a href="https://golang.org/dl/" target="_blank" rel="noopener">官网</a> 下载 <code>.pkg</code> 完成安装。</p><h3 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h3><p>用于放置一个 go 程序员的所有 go 代码和依赖。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>src：go源码文件</li><li>pkg：package object（编译出的二进制文件）</li><li>bin：可执行文件（编译出的二进制文件）</li></ul><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>workspace 的路径，默认为 <code>$HOME/go</code>。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>直接安装 <code>.pkg</code> 文件未设置 GOPATH，需要手动设置一下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=<span class="variable">$HOME</span>/go</span><br></pre></td></tr></table></figure><p>加入环境变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$(go env GOPATH)/bin</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>程序入口为：<code>main.main</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hello-go"><a href="#hello-go" class="headerlink" title="hello.go"></a>hello.go</h3><p>创建新项目：<code>/Users/jjy/go/src/exampleProject</code>，新建文件 <code>hello.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在 <code>/Users/jjy/go/src/exampleProject</code> 下执行 <code>go install</code>，之后会在 <code>$GOPATH/bin</code> 目录下生成编译后的二进制程序。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ /Users/jjy/<span class="keyword">go</span>/bin/exampleProject</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><ul><li>函数多返回值</li><li><a href="https://studygolang.com/articles/13875" target="_blank" rel="noopener">并发编程</a></li><li><a href="http://www.runoob.com/go/go-error-handling.html" target="_blank" rel="noopener">错误处理</a></li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://go-zh.org/doc/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://cyent.github.io/golang/method/overview/" target="_blank" rel="noopener">Go语言学习 - cyent笔记</a></li><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go 入门指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      JavaScript 才不是最好的语言呢哼
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Github + CircleCI + GKE 部署应用</title>
    <link href="http://jalan.space/2019/01/26/2019/use-circleci-to-deploy/"/>
    <id>http://jalan.space/2019/01/26/2019/use-circleci-to-deploy/</id>
    <published>2019-01-26T08:04:00.000Z</published>
    <updated>2019-03-05T17:56:25.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/devops.png" alt=""></p><p>我的 <a href="https://github.com/GGGanon/dont-forget-me-service" target="_blank" rel="noopener">Venceremos</a> 完成三分之一了，客户端同学 Csming 催着要接口，于是开始着手测试环境的部署。</p><p>由于去年在 GCP 开了账户，之前也有了 GKE 的一些使用经验，打算这次也直接在 GKE 完成应用的部署。但是每次都自己打镜像，自己修改配置文件也太蠢了吧，那就顺便加上 CI 试试。</p><h1 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h1><p>持续集成（Continuous Integration）通常缩写为 CI，指的是当代码有变更时，立即进行构建和测试，反馈运行结果，我们可以根据测试结果，确定新代码是否可以和原有代码正确的集成在一起。</p><p>由于在这篇文章里还没涉及到测试部分，只是单纯的构建部署，因此还不能称作真正意义上的 CI。</p><h1 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h1><p>公司使用的持续集成工具是 Jenkins，也写过部署相关的 pipeline，但用 CircleCI 还是头一回。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CircleCI 是一个持续集成/持续部署的服务，开源项目可以免费使用，他的价格取决于你需要并发构建实例的数量，单个实例是免费的。</p><p>它能做到：</p><ul><li>关联你的 Github/BitBucket 项目</li><li>当代码有更新时自动抓取</li><li>执行工作流中的构建、测试、部署等步骤</li></ul><h2 id="关联-Github"><a href="#关联-Github" class="headerlink" title="关联 Github"></a>关联 Github</h2><p>可以在 <a href="https://github.com/marketplace" target="_blank" rel="noopener">Github MarketPlace</a> 中找到 <a href="https://github.com/marketplace/circleci" target="_blank" rel="noopener">CircleCI</a>，关联后即可使用。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>要让持续集成工具明白你的用意，首先要定义好你的工作流。</p><p>在项目的根目录下创建 <code>.circleci</code> 文件夹，并在文件夹中创建工作流配置文件 <code>config.yml</code>，CircleCI 将会根据 <code>config.yml</code> 中的内容执行相关操作。</p><p>一个简单的 <code>config.yaml</code> 配置格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="number">2</span></span><br><span class="line"><span class="attribute">jobs</span>:</span><br><span class="line">  <span class="attribute">build</span>:</span><br><span class="line">    <span class="attribute">docker</span>:</span><br><span class="line">      - <span class="attribute">image</span>: circleci/<span class="attribute">ruby</span>:<span class="number">2.4</span>.<span class="number">1</span></span><br><span class="line">    <span class="attribute">steps</span>:</span><br><span class="line">      - checkout</span><br><span class="line">      - <span class="attribute">run</span>: echo <span class="string">"A first hello"</span></span><br></pre></td></tr></table></figure><p>具体语法不多介绍了，详见官方文档：<a href="https://circleci.com/docs/" target="_blank" rel="noopener">Welcome to CircleCI Documentation</a>。</p><h2 id="我的工作流"><a href="#我的工作流" class="headerlink" title="我的工作流"></a>我的工作流</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>构建步骤要完成的几件事：</p><ul><li>拉取代码</li><li>构建镜像</li><li>将镜像推送至镜像仓库</li></ul><h4 id="代码拉取"><a href="#代码拉取" class="headerlink" title="代码拉取"></a>代码拉取</h4><p>非常简单，在 <code>steps</code> 中定义 <code>checkout</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    steps:</span></span><br><span class="line">      - checkout</span><br></pre></td></tr></table></figure><p><code>checkout</code> 会把项目源码拉取至当前工作目录。</p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>我采用的是根据 <code>Dockerfile</code> 完成镜像构建的。</p><p>项目是基于 nodeJS 开发的，首先要编写一个 <code>Dockerfile</code> 文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /workspace</span></span><br><span class="line"><span class="bash">WORKDIR /workspace</span></span><br><span class="line"><span class="bash">RUN npm install</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 8088</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>工作流：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    steps:</span></span><br><span class="line">      ......</span><br><span class="line">      - run:</span><br><span class="line"><span class="symbol">          name:</span> Build image</span><br><span class="line"><span class="symbol">          command:</span> |</span><br><span class="line">            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)</span><br><span class="line">            <span class="meta"># 构建镜像</span></span><br><span class="line">            docker build -t $FULL_DOCKER_IMAGE_NAME .</span><br></pre></td></tr></table></figure><p>这里的 <code>$FULL_DOCKER_IMAGE_NAME</code> 可以根据项目的具体需求来赋值。</p><h4 id="镜像推送"><a href="#镜像推送" class="headerlink" title="镜像推送"></a>镜像推送</h4><p>因为使用的是 GCP 的镜像仓库，因此这一步还包含了 GCP 的授权登录。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    steps:</span><br><span class="line">      <span class="string">......</span></span><br><span class="line">      - run:</span><br><span class="line">          name: Push image</span><br><span class="line">          <span class="keyword">command</span>: |</span><br><span class="line">            FULL_DOCKER_IMAGE_NAME=$<span class="params">(cat full_docker_image_name)</span></span><br><span class="line">            <span class="keyword">echo</span> $GCLOUD_SERVICE_KEY | base64 <span class="params">--decode</span> <span class="params">--ignore-garbage</span> &gt; gcloud-service-key.json</span><br><span class="line">            gcloud auth activate-service-account <span class="params">--key-file</span> gcloud-service-key.json</span><br><span class="line">            gcloud <span class="params">--quiet</span> auth configure-docker</span><br><span class="line">            docker push $FULL_DOCKER_IMAGE_NAME</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">  deploy:</span><br><span class="line">    steps:</span><br><span class="line">      <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">      - run:</span><br><span class="line">          name: Deploy</span><br><span class="line">          command: |</span><br><span class="line">            # 获取授权信息</span><br><span class="line">            echo <span class="variable">$GCLOUD_SERVICE_KEY</span> | base64 --decode --ignore-garbage &gt; gcloud-service-key.json</span><br><span class="line">            <span class="builtin-name">set</span> -x</span><br><span class="line">            # 授权登录</span><br><span class="line">            gcloud auth activate-service-account --key-file gcloud-service-key.json</span><br><span class="line">            gcloud --quiet<span class="built_in"> config </span><span class="builtin-name">set</span> project <span class="variable">$GOOGLE_PROJECT_ID</span></span><br><span class="line">            gcloud --quiet<span class="built_in"> config </span><span class="builtin-name">set</span> compute/zone <span class="variable">$GOOGLE_COMPUTE_ZONE</span></span><br><span class="line">            <span class="attribute">EXISTING_CLUSTER</span>=$(gcloud container clusters list <span class="attribute">--format</span>=<span class="string">"value(name)"</span> <span class="attribute">--filter</span>=<span class="string">"name=<span class="variable">$GOOGLE_CLUSTER_NAME</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;EXISTING_CLUSTER&#125;</span>"</span> != <span class="variable">$GOOGLE_CLUSTER_NAME</span> ]</span><br><span class="line">            then</span><br><span class="line">              gcloud --quiet container clusters create <span class="variable">$GOOGLE_CLUSTER_NAME</span> <span class="attribute">--num-nodes</span>=1</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              gcloud --quiet container clusters get-credentials <span class="variable">$GOOGLE_CLUSTER_NAME</span></span><br><span class="line">            fi</span><br><span class="line">            <span class="attribute">FULL_DOCKER_IMAGE_NAME</span>=$(cat workspace/full_docker_image_name)</span><br><span class="line">            # 滚动更新</span><br><span class="line">            kubectl <span class="attribute">--namespace</span>=default <span class="builtin-name">set</span> image deployment/venceremos <span class="attribute">dont-forget-service</span>=<span class="variable">$FULL_DOCKER_IMAGE_NAME</span> --record</span><br></pre></td></tr></table></figure><h3 id="定义执行流程"><a href="#定义执行流程" class="headerlink" title="定义执行流程"></a>定义执行流程</h3><p>之前的步骤都只是定义了工作流的模板，具体模板的执行顺序、依赖等还要使用 <code>workflow</code> 关键字进行最后的定义。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workflows</span>:</span><br><span class="line">  <span class="attribute">version</span>: <span class="number">2</span></span><br><span class="line">  <span class="attribute">build-deploy</span>:</span><br><span class="line">    <span class="attribute">jobs</span>:</span><br><span class="line">      - build</span><br><span class="line">      - <span class="attribute">deploy</span>:</span><br><span class="line">          <span class="attribute">requires</span>:</span><br><span class="line">            - build</span><br></pre></td></tr></table></figure><p>附上 <code>config.yaml</code> 文件：<a href="https://github.com/GGGanon/dont-forget-me-service/blob/develop/.circleci/config.yml" target="_blank" rel="noopener">config.yaml</a>，后续会根据不同分支来部署不同的环境，也会加上单元测试的步骤，持续更新。</p><h1 id="GCP"><a href="#GCP" class="headerlink" title="GCP"></a>GCP</h1><p>由于是在 GCP 上部署，在 CircleCI 中配置了 google-cloud-sdk 镜像：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">defaults</span>: &amp;defaults</span><br><span class="line">  <span class="attribute">docker</span>:</span><br><span class="line">    - <span class="attribute">image</span>: google/cloud-sdk<span class="variable">@sha256</span>:<span class="number">126</span>a49cfa2aa6e20d561fa14999bf657bc341efeba04939bd2f612bf843d12a6</span><br></pre></td></tr></table></figure><p>其他要注意的地方估计只有授权登录了，获取授权配置见：<a href="https://cloud.google.com/docs/authentication/getting-started" target="_blank" rel="noopener">Getting Started with Authentication</a></p><p>项目使用了两种 GCP 资源：</p><ul><li>Google Kubernetes Engine - Google k8s 引擎</li><li>Google Container Registry - Google 镜像仓库</li></ul><h2 id="GKE"><a href="#GKE" class="headerlink" title="GKE"></a>GKE</h2><p>因为使用的是 Google 自己的镜像仓库，也不需要仓库授权的麻烦步骤了。</p><p>官方文档：<a href="https://cloud.google.com/kubernetes-engine/docs/" target="_blank" rel="noopener">Google Kubernetes Engine Documentation</a></p><h2 id="Container-Registry"><a href="#Container-Registry" class="headerlink" title="Container Registry"></a>Container Registry</h2><p>Google 的镜像仓库，会根据 Storage 的具体流量进行收费。在国内使用很不友好，已被 qiang。</p><p>使用方法详见官方文档：<a href="https://cloud.google.com/container-registry/docs/" target="_blank" rel="noopener">Container Registry Documentation</a></p><hr><p>最后纪念一下调了半死终于跑起来的样子：</p><p><img src="/img/circle-ci-test.png" alt="(◔౪◔)"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.jianshu.com/p/36af6af74dfc" target="_blank" rel="noopener">使用 CircleCI 2.0 进行持续集成/持续部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      人生很短，部署流程很长
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Kubernetes" scheme="http://jalan.space/tags/Kubernetes/"/>
    
      <category term="GCP" scheme="http://jalan.space/tags/GCP/"/>
    
      <category term="NodeJS" scheme="http://jalan.space/tags/NodeJS/"/>
    
      <category term="DevOps" scheme="http://jalan.space/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 入门笔记</title>
    <link href="http://jalan.space/2019/01/16/2019/begin-nodejs/"/>
    <id>http://jalan.space/2019/01/16/2019/begin-nodejs/</id>
    <published>2019-01-16T15:33:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>打算用 NodeJS 来撸一个小应用，走起！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Node.js 就是运行在服务端的 JavaScript。</p><ul><li>基于 Chrome V8 引擎的 JavaScript 运行环境</li><li>事件驱动</li><li>非阻塞式 I/O 的模型</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>macOS：</p><ol><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a> 下载包安装</li><li><code>brew install node</code></li></ol><p><code>node -v</code> 查看是否安装成功。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world"></a>Hello, world</h2><p>创建一个 <code>hello.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, world!"</span>);</span><br></pre></td></tr></table></figure><p>在终端运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">node</span> <span class="title">hello</span>.js</span><br></pre></td></tr></table></figure><h2 id="Restify"><a href="#Restify" class="headerlink" title="Restify"></a>Restify</h2><p>Restify 是一个基于 NodeJS 的 REST 应用框架，支持服务器端和客户端。Restify 比起 Express 更专注于 REST 服务。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> restify</span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>创建 <code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义响应方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello'</span> + req.params.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = restify.createServer();</span><br><span class="line">server.get(<span class="string">'/hello/:name'</span>, respond);</span><br><span class="line">server.head(<span class="string">'/hello/:name'</span>, respond);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 3900 接口</span></span><br><span class="line">server.listen(<span class="number">3900</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s listening at %s'</span>, server.name, server.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行应用</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ node app.js</span><br><span class="line">restify listening at <span class="link">http://</span>[<span class="string">::</span>]:3900</span><br></pre></td></tr></table></figure><p>访问接口</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ curl <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">3900</span>/hello/world</span><br><span class="line"><span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>Github：<a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken</a></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p><code>sign</code> 方法报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error: </span>Expected "payload" to be a plain object.</span><br></pre></td></tr></table></figure><p>原因：直接将 mongoDB 查询结果对象 mongoosejs Object 作为参数传递，mongoosejs Object 并非序列化参数，需要使用 <code>toJSON()</code> 进行转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 token 并设置用户 token 缓存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// token 生成</span></span><br><span class="line">    <span class="keyword">var</span> accessToken = jwt.sign(user.toJSON(), config.secret, &#123;</span><br><span class="line">        expiresIn: <span class="number">1200</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> accessToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://blog.fens.me/nodejs-restify/" target="_blank" rel="noopener">restify构建REST服务</a></li><li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js 教程</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-use-restify-develop-rest-api/index.html?ca=drs-&amp;utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">1</a></li></ul>]]></content>
    
    <summary type="html">
    
      PHP 才不是最好的语言呢哼
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="NodeJS" scheme="http://jalan.space/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>B-Tree 与 B+Tree</title>
    <link href="http://jalan.space/2019/01/05/2019/b-tree-and-b-plus-tree/"/>
    <id>http://jalan.space/2019/01/05/2019/b-tree-and-b-plus-tree/</id>
    <published>2019-01-05T02:38:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 MySQL 的相关书籍，在此复盘一下索引相关的数据结构 B-Tree 和 B+Tree。</p><h2 id="诞生原因"><a href="#诞生原因" class="headerlink" title="诞生原因"></a>诞生原因</h2><p>二叉查找树的时间复杂度已经是 O(logN) 了，为什么还要使用 B-Tree 和 B+Tree 呢？</p><h3 id="磁盘-IO-问题"><a href="#磁盘-IO-问题" class="headerlink" title="磁盘 IO 问题"></a>磁盘 IO 问题</h3><p>平衡二叉树由于树深度过高而造成磁盘 IO 读写过于频繁，从而效率低下。为了减少磁盘 IO 的次数：</p><ul><li>每个节点存储多个元素</li><li>摒弃二叉树，采用多叉树</li></ul><p>从而诞生了多路查找树。</p><h3 id="不平衡问题"><a href="#不平衡问题" class="headerlink" title="不平衡问题"></a>不平衡问题</h3><p>二叉查找树存在的极端情况：所有节点都位于同一侧。</p><p>这种情况下查找效率就十分低下了，因此需要对二叉树左右子树的高度进行平衡化处理，于是就有了平衡二叉树（Balanced Binary Tree）。</p><p>平衡的概念：</p><ul><li>各个分支的高度是均匀的</li><li>左右子树的高度之差绝对值小于 1</li></ul><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h2><p><img src="/img/in-post/b-tree.png" alt="B-Tree"></p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>m 阶 B-Tree 特征：</p><ul><li>每个节点最多可以拥有 m 棵子树</li><li>根节点：至少有 2 个节点</li><li>非根非叶节点：至少有 <code>ceil(m/2)</code> 个子树</li><li>非叶节点中的信息：<code>[n, A0, K1, A1, K2, A2, ..., Kn, An]</code><ul><li>n：节点中保存的关键字个数（<code>ceil(m/2) - 1 &lt;= n &lt;= m-1</code>）</li><li>K：关键字，有序，<code>Kn &lt; k(n+1)</code></li><li>A：指向子树根节点的指针</li></ul></li><li>从根到叶子的每一条路径都有相同的长度（叶子节点都在相同层）</li></ul><h2 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h2><p><img src="/img/in-post/b+tree.png" alt="B+Tree"></p><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><ul><li>有 k 个子树的中间节点包含有 k 个元素（B-Tree 中是 k-1 个元素）</li><li>非叶子节点中每个元素不保存数据，仅用来索引。节点中仅含有其子树（根节点）中的最大（或最小）关键字</li><li>所有叶子节点中包含了全部元素的信息（无论查找成功与否，每次查找都走了一条从根到叶子节点的路径）</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>单一节点存储更多元素，磁盘 IO 次数更少</li><li>所有查询都要查找到叶子节点，查询性能稳定</li><li>所有叶子节点形成有序链表，便于范围查找（B-Tree 的范围查找需要通过中序遍历实现）</li></ul><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>MySQL 中的索引可以以一定顺序引用多个列，这种索引叫做复合（联合）索引，一般的，一个联合索引是一个有序元组 <code>&lt;a1, a2, …, an&gt;</code>，其中各个元素均为数据表的一列。</p><p>联合索引对多个值进行排序的依据是 <code>CREATE TABLE</code> 语句中定义索引时列的顺序。</p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`name_cid_INX`</span> (<span class="string">`name`</span>,<span class="string">`cid`</span>),</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">8</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>这里使用了联合索引，索引列的顺序为 <code>&lt;name, cid&gt;</code>。所以现根据 <code>name</code> 排序，再根据 <code>cid</code> 排序。排序后的数据可能是这样的：</p><table><thead><tr><th>name</th><th>cid</th></tr></thead><tbody><tr><td>a</td><td>6</td></tr><tr><td>c</td><td>4</td></tr><tr><td>c</td><td>5</td></tr><tr><td>h</td><td>1</td></tr><tr><td>z</td><td>9</td></tr></tbody></table><p>由排序结果可以观察出：</p><ul><li><code>name</code> 一定是有序的，<code>cid</code> 是无序的（<strong>直接使用第二个cid字段进行条件判断是用不到索引的</strong>）</li><li>若要 <code>cid</code> 有序，<code>name</code> 需等值匹配（<strong>要想使用第二个索引，必须先使用第一个索引的原因</strong>）</li></ul><p>这样看来，一系列多列索引的有效查询条件就很好解释了。</p><h4 id="联合索引的有效查询条件"><a href="#联合索引的有效查询条件" class="headerlink" title="联合索引的有效查询条件"></a>联合索引的有效查询条件</h4><ul><li>全值匹配：和索引中的所有列进行匹配</li><li>匹配最左前缀：只使用索引第一列</li><li>匹配列前缀：可以只匹配某一列的值的开头部分</li><li>匹配范围值：只匹配第一列的范围值</li><li>精确匹配某一列并范围匹配另一列：前缀精确匹配，后续跟一列范围匹配</li></ul><h5 id="灵魂拷问"><a href="#灵魂拷问" class="headerlink" title="灵魂拷问"></a>灵魂拷问</h5><p>如果使用 <code>cid=1 AND name=&#39;小红&#39;</code> 顺序设置 <code>WHERE</code> 是否还会使用索引呢？</p><p><strong>答案是会的</strong>。</p><p>MySQL 查询优化器会判断纠正这条 SQL 语句该以什么样的顺序执行效率最高，最后才生成真正的执行计划。所以 <code>WHERE</code> 中 <code>AND</code> 条件的先后顺序对如何选择索引是无关的，优化器会去分析判断选用哪个索引。</p><h2 id="搜索时间复杂度"><a href="#搜索时间复杂度" class="headerlink" title="搜索时间复杂度"></a>搜索时间复杂度</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>一个有 n 个节点的二叉树，它的最小深度为 <code>log(n)</code>（log 底为2），最大深度为 <code>n</code>（所有节点都在树的同一边）。</p><p>二叉搜索树的深度越小，那么搜索所需要的运算时间越小。一个深度为 <code>log(n)</code> 的二叉搜索树，搜索算法的时间复杂度也是 <code>O(log n)</code>。</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>同样，一棵平衡二叉树的搜索时间复杂度为 <code>O(log n)</code>，n 是节点数，底数是树的分叉数。</p><p><img src="https://images2015.cnblogs.com/blog/303980/201703/303980-20170331183940836-1426600354.png" alt="平衡二叉树高度计算"></p><h2 id="在-MySQL-中的使用"><a href="#在-MySQL-中的使用" class="headerlink" title="在 MySQL 中的使用"></a>在 MySQL 中的使用</h2><h3 id="InnoDB-索引机制"><a href="#InnoDB-索引机制" class="headerlink" title="InnoDB 索引机制"></a>InnoDB 索引机制</h3><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`zodiac`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`name`</span>)</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'鼠'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'牛'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'虎'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'兔'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'龙'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'蛇'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'马'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'羊'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'猴'</span>);</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">'鸡'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">'狗'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">'猪'</span>);</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/innodb-index.png" alt="InnoDB 主索引"></p><ul><li>B+Tree 每个节点的关键字是表的主键</li><li>叶子页（leaf page）包含了数据记录，非叶子节点只包含主键<ul><li>“聚簇”：表示数据行和相邻的键值紧凑地存储在一起，因为索引和数据是保存在同一棵B树之中，从聚簇索引中获取数据通常比在非聚簇索引中要来得快</li></ul></li><li>InnoDB 的数据文件是依靠主键组织起来的，在 InnoDB 下创建表必须指定主键，如果没有显式指定，依然会对该表隐式地定义一个主键作为聚簇索引</li></ul><h3 id="MyISAM-索引机制"><a href="#MyISAM-索引机制" class="headerlink" title="MyISAM 索引机制"></a>MyISAM 索引机制</h3><p><img src="/img/in-post/mysiam-index.png" alt="InnoDB 主索引"></p><ul><li>B+Tree 叶子节点中包含的是数据记录的地址（可以理解为”行号”）</li></ul><h3 id="两者差异对比"><a href="#两者差异对比" class="headerlink" title="两者差异对比"></a>两者差异对比</h3><p><img src="/img/in-post/innodb-mysiam-compare.png" alt="差异对比"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《高性能 MySQL》</li><li><a href="https://blog.csdn.net/z_ryan/article/details/79685072" target="_blank" rel="noopener">简单剖析B树（B-Tree）与Ｂ+树</a></li><li><a href="https://www.cnblogs.com/xiaoxi/p/6868087.html" target="_blank" rel="noopener">MySQL和B树的那些事</a></li><li><a href="https://www.cnblogs.com/vincently/p/4526560.html" target="_blank" rel="noopener">【经典数据结构】B树与B+树</a></li><li><a href="https://www.zhihu.com/question/36996520" target="_blank" rel="noopener">mysql索引最左匹配原则的理解?</a></li></ul>]]></content>
    
    <summary type="html">
    
      MySQL 索引复盘
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="MySQL" scheme="http://jalan.space/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 上传文件到 Google Cloud Storage</title>
    <link href="http://jalan.space/2018/12/27/2018/upload-file-to-gcp-storage-from-python3/"/>
    <id>http://jalan.space/2018/12/27/2018/upload-file-to-gcp-storage-from-python3/</id>
    <published>2018-12-27T15:46:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<p>需要上传生成的文本文件到 GCP 的 Storage 中，使用 Python 实现。</p><h2 id="安装-gcloud"><a href="#安装-gcloud" class="headerlink" title="安装 gcloud"></a>安装 gcloud</h2><p>首先，需要安装 Python 的 gcloud 库，<a href="https://googleapis.github.io/google-cloud-python/" target="_blank" rel="noopener">google-cloud-python</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gcloud</span><br><span class="line">pip <span class="keyword">install</span> google-cloud-<span class="keyword">storage</span></span><br></pre></td></tr></table></figure><h2 id="获取凭证文件"><a href="#获取凭证文件" class="headerlink" title="获取凭证文件"></a>获取凭证文件</h2><p><a href="https://cloud.google.com/storage/docs/reference/libraries?authuser=1#client-libraries-install-python" target="_blank" rel="noopener">点击前往</a></p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gcloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line">storage_client = storage.Client.from_service_account_json(<span class="string">'creds.json'</span>) <span class="comment"># 指定凭证文件</span></span><br><span class="line">bucket = self.storage_client.get_bucket(<span class="string">'bucket-name'</span>) <span class="comment"># 设置 bucket 名称</span></span><br><span class="line">blob = bucket.blob(blob_name) <span class="comment"># 设置 storage 中的文件名</span></span><br><span class="line">blob.upload_from_filename(path_to_file) <span class="comment"># 设置要上传的源文件路径</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      from gcloud import storage
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
      <category term="GCP" scheme="http://jalan.space/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>PHP 垃圾回收机制</title>
    <link href="http://jalan.space/2018/12/23/2018/php-gc/"/>
    <id>http://jalan.space/2018/12/23/2018/php-gc/</id>
    <published>2018-12-23T14:38:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-变量与内存对象"><a href="#PHP-变量与内存对象" class="headerlink" title="PHP 变量与内存对象"></a>PHP 变量与内存对象</h2><p>垃圾回收是对<strong>变量</strong>及所关联<strong>内存对象</strong>的操作。</p><p>PHP 变量分为两类：</p><ul><li>标量类型：布尔型、整型、浮点型、字符串</li><li>复杂类型：数组、对象、资源</li><li>NULL（特殊，不划分为任何类型）</li></ul><p>所有上述类型均用 <code>zval</code> 的结构表示。</p><h3 id="源码-Zend-zend-h"><a href="#源码-Zend-zend-h" class="headerlink" title="源码 Zend/zend.h"></a>源码 Zend/zend.h</h3><p>5 个字段存储 8 种类型。</p><h4 id="zvalue-value"><a href="#zvalue-value" class="headerlink" title="_zvalue_value"></a>_zvalue_value</h4><p>用于表示 PHP 中所有变量的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;  </span><br><span class="line">    <span class="keyword">long</span> lval;                  <span class="comment">/* long value */</span> </span><br><span class="line">    <span class="keyword">double</span> dval;                <span class="comment">/* double value */</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">        <span class="keyword">char</span> *val;  </span><br><span class="line">        <span class="keyword">int</span> len;  </span><br><span class="line">    &#125; str;  </span><br><span class="line">    HashTable *ht;              <span class="comment">/* hash table value */</span> </span><br><span class="line">    zend_object_value obj;  </span><br><span class="line">&#125; zvalue_value;</span><br></pre></td></tr></table></figure><ul><li>lval：存储布尔型、整型、资源</li><li>dval：存储浮点型</li><li>str：存储字符串</li><li>ht：存储数组（PHP 中的数组是哈希表）</li><li>obj：存储对象</li><li>所有字段设置为0：NULL</li></ul><h4 id="zval-struct"><a href="#zval-struct" class="headerlink" title="_zval_struct"></a>_zval_struct</h4><p>由 <code>_zval_struct</code> 中的 <code>type</code> 决定 <code>_zvalue_value</code> 究竟是哪种类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span>  </span><br><span class="line">    <span class="comment">/* Variable information */</span> </span><br><span class="line">    zvalue_value value;       </span><br><span class="line">    <span class="comment">/* value */</span> </span><br><span class="line">    zend_uint refcount__gc;  </span><br><span class="line">    zend_uchar type;    <span class="comment">/* active type */</span> </span><br><span class="line">    zend_uchar is_ref__gc;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>refcount__gc</code> 表示当前有几个变量在引用此 <code>zval</code></li><li><code>is_ref__gc</code> 表示当前 <code>zval</code> 是否被 按引用 引用</li></ul><h2 id="PHP5-2"><a href="#PHP5-2" class="headerlink" title="PHP5.2"></a>PHP5.2</h2><p>PHP5.2 中的垃圾回收算法是：Reference Counting，即”引用计数”。</p><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>为每个内存对象分配一个计数器</li><li>当一个内存对象建立时计数器初始化为 1</li><li>以后每有一个新变量引用此内存对象，则计数器加1</li><li>每当减少一个引用此内存对象的变量则计数器减 1</li><li>当垃圾回收机制运作的时候，将所有计数器为0的内存对象销毁并回收其占用的内存</li></ul><p>内存对象即 <code>zval</code>，计数器是 <code>refcount__gc</code>。</p><h3 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = <span class="string">"江五渣一点也不酷"</span>;</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>); <span class="comment">//name:(refcount=1, is_ref=0),string '江五渣一点也不酷' (length=24)</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = <span class="string">"江五渣一点也不酷"</span>;</span><br><span class="line">    $temp_name = $name;</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>); <span class="comment">//name:(refcount=2, is_ref=0),string '江五渣一点也不酷' (length=24)</span></span><br></pre></td></tr></table></figure><h4 id="引用赋值"><a href="#引用赋值" class="headerlink" title="引用赋值"></a>引用赋值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = <span class="string">"江五渣一点也不酷"</span>;</span><br><span class="line">    $temp_name = &amp;$name;</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>); <span class="comment">//name:(refcount=2, is_ref=1),string '江五渣一点也不酷' (length=24)</span></span><br></pre></td></tr></table></figure><h4 id="数组型变量"><a href="#数组型变量" class="headerlink" title="数组型变量"></a>数组型变量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = [<span class="string">'a'</span>=&gt;<span class="string">'江五渣'</span>, <span class="string">'b'</span>=&gt;<span class="string">'菜菜哒'</span>];</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">//name:</span></span><br><span class="line">    <span class="comment">//(refcount=1, is_ref=0),</span></span><br><span class="line">    <span class="comment">//array (size=2)</span></span><br><span class="line">      <span class="comment">//'a' =&gt; (refcount=1, is_ref=0),string '江五渣' (length=9)</span></span><br><span class="line">      <span class="comment">//'b' =&gt; (refcount=1, is_ref=0),string '菜菜哒' (length=9)</span></span><br></pre></td></tr></table></figure><p><img src="http://php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png" alt="复合类型图示"></p><h4 id="销毁变量"><a href="#销毁变量" class="headerlink" title="销毁变量"></a>销毁变量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = <span class="string">"江五渣的不开心"</span>;</span><br><span class="line">    $temp_name = $name;</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>); <span class="comment">//name:(refcount=2, is_ref=0),string '江五渣的不开心' (length=21)</span></span><br><span class="line">    <span class="keyword">unset</span>($temp_name);</span><br><span class="line">    xdebug_debug_zval(<span class="string">'name'</span>); <span class="comment">//name:(refcount=1, is_ref=0),string '江五渣的不开心' (length=21)</span></span><br></pre></td></tr></table></figure><p>*注： <code>unset</code> 并非一定会释放内存，当有两个变量指向的时候，并非会释放变量占用的内存，只是 <code>refcount</code> 减 1。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>存在内存泄漏问题。</p><p>看一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$a = <span class="keyword">array</span>();  </span><br><span class="line">$a[] = &amp; $a;  </span><br><span class="line"><span class="keyword">unset</span>($a);</span><br></pre></td></tr></table></figure><ul><li>建立了数组 a</li><li>让 a 的第一个元素按引用指向 a，此时 <code>a.zval.refcount = 2</code></li><li>销毁变量 a，此时 <code>a.zval.refcount = 1</code>，但没有办法对其进行操作，形成了一个循环自引用</li></ul><p><img src="http://images.51cto.com/files/uploadimg/20110228/1350200.jpg" alt="循环自引用"></p><h2 id="PHP5-3"><a href="#PHP5-3" class="headerlink" title="PHP5.3"></a>PHP5.3</h2><p>PHP5.3 的垃圾回收算法依然以引用计数为基础，但不再用简单的计数作为回收准则，而是使用了一种同步回收算法：<a href="http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf" target="_blank" rel="noopener">Concurrent Cycle Collection in Reference Counted Systems</a>。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>一个 <code>zval</code> 如果有引用，要么被全局符号表中的符号引用，要么被其它表示复杂类型的 <code>zval</code> 中的符号引用。因此在 <code>zval</code> 中存在一些可能根(<code>root</code>)。</p><ul><li>PHP 会分配一个固定大小的“根缓冲区”，这个缓冲区用于存放固定数量的 <code>zval</code>，这个数量默认是 10,000</li><li>对每个根缓冲区中的根 <code>zval</code> 按照深度优先遍历算法遍历所有能遍历到的 <code>zval</code>，并将每个 <code>zval</code> 的 <code>refcount</code> 减 1（同时为了避免对同一 <code>zval</code> 多次减 1(因为可能不同的根能遍历到同一个 <code>zval</code>)，每次对某个 <code>zval</code> 减 1 后就对其标记为“已减”）</li><li>再次对每个缓冲区中的根 <code>zval</code> 深度优先遍历<ul><li><code>zval</code> 的 <code>refcount</code> 不为0，对其加 1</li></ul></li><li>清空根缓冲区中的所有根，然后销毁所有 <code>refcount</code> 为 0 的 <code>zval</code>，并收回其内存</li></ul><p>总结：对此 <code>zval</code> 中的每个元素进行一次 <code>refcount</code> 减 1 操作，操作完成之后，如果 <code>zval</code> 的 <code>refcount=0</code>，那么这个 <code>zval</code> 就是一个辣鸡。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="http://php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png" alt="引用计数系统中的同步周期回收"></p><p>A. 节点被放入缓冲区 <code>root</code>，标记为紫色<br>B. 缓冲区满后，以深度优先对每个节点所包含的 <code>zval</code> 做减 1 操作。操作过的节点标记为灰色（避免重复操作）<br>C. 再次深度优先判断每个节点包含的 <code>zval</code> 值。<code>refcount=0</code> ：标记为白色（垃圾），<code>refcount&gt;0</code>：对非垃圾还原操作，<code>zval + 1</code> ，标记为黑色<br>D. 再次遍历，将白色节点 <code>zval</code> 释放</p><h3 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h3><ul><li>不是每次 <code>refcount</code> 减少时都进入回收周期，只有根缓冲区满额后在开始垃圾回收</li><li>可以解决循环引用问题</li><li>可以总将内存泄露保持在一个阈值以下</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.php.net/manual/zh/features.gc.php" target="_blank" rel="noopener">PHP 垃圾回收机制 官方文档</a></li><li><a href="https://blog.csdn.net/u011957758/article/details/76864400" target="_blank" rel="noopener">一看就懂系列之 由浅入深聊一聊php的垃圾回收机制</a></li><li><a href="https://www.cnblogs.com/lovehappying/p/3679356.html" target="_blank" rel="noopener">PHP垃圾回收深入理解</a></li><li><a href="https://www.cnblogs.com/xinghun/p/5660051.html" target="_blank" rel="noopener">php内存管理机制、垃圾回收机制</a></li><li><a href="PHP5和PHP7的垃圾回收机制有什么不同">PHP5和PHP7的垃圾回收机制有什么不同</a></li><li><a href="http://www.laruence.com/2018/04/08/3170.html" target="_blank" rel="noopener">深入理解PHP7内核之zval</a></li></ul>]]></content>
    
    <summary type="html">
    
      传说中的……GC？
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Argo 创建 Kubernetes 工作流</title>
    <link href="http://jalan.space/2018/12/18/2018/argo/"/>
    <id>http://jalan.space/2018/12/18/2018/argo/</id>
    <published>2018-12-18T08:50:00.000Z</published>
    <updated>2019-03-05T17:56:25.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/argo.png" alt=""></p><h2 id="什么是-Argo"><a href="#什么是-Argo" class="headerlink" title="什么是 Argo"></a>什么是 Argo</h2><p>在工作中遇到需要串联 n 个容器任务的情况，选择了 Argo 进行工作流程的控制。</p><p>Argo 是一个开源项目，为 Kubernetes 提供容器本地工作流程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="需要环境"><a href="#需要环境" class="headerlink" title="需要环境"></a>需要环境</h3><ul><li>Kubernetes &gt;= 1.9</li><li>安装 kubectl</li><li>存在 Kubeconfig 文件（默认路径为 ~/.kube/config）</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>On Mac:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install argoproj/tap/argo</span><br></pre></td></tr></table></figure><p>On Linux:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>argo https:<span class="regexp">//gi</span>thub.com<span class="regexp">/argoproj/</span>argo<span class="regexp">/releases/</span>download<span class="regexp">/v2.2.1/</span>argo-linux-amd64</span><br><span class="line">chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>argo</span><br></pre></td></tr></table></figure><h3 id="安装控制器与-UI"><a href="#安装控制器与-UI" class="headerlink" title="安装控制器与 UI"></a>安装控制器与 UI</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns argo</span><br><span class="line">kubectl apply -n argo -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/argoproj/</span>argo<span class="regexp">/v2.2.1/m</span>anifests<span class="regexp">/install.yaml</span></span><br></pre></td></tr></table></figure><h2 id="令-UI-可访问"><a href="#令-UI-可访问" class="headerlink" title="令 UI 可访问"></a>令 UI 可访问</h2><p>Argo UI 对外端口为 <code>8001</code>。</p><h3 id="方法一：kubectl-port-forward"><a href="#方法一：kubectl-port-forward" class="headerlink" title="方法一：kubectl port-forward"></a>方法一：kubectl port-forward</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n argo port-<span class="keyword">forward</span> deployment/argo-ui <span class="number">8001</span>:<span class="number">8001</span></span><br></pre></td></tr></table></figure><p>访问本地 <code>http://127.0.0.1:8001</code></p><h3 id="方法二：kubectl-proxy"><a href="#方法二：kubectl-proxy" class="headerlink" title="方法二：kubectl proxy"></a>方法二：kubectl proxy</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl proxy</span></span><br></pre></td></tr></table></figure><p>访问 <code>http://127.0.0.1:8001/api/v1/namespaces/argo/services/argo-ui/proxy/</code>。</p><h3 id="方法三：负载均衡"><a href="#方法三：负载均衡" class="headerlink" title="方法三：负载均衡"></a>方法三：负载均衡</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl patch svc argo-ui -n argo -p <span class="string">'&#123;"</span>spec<span class="string">": &#123;"</span><span class="built_in">type</span><span class="string">": "</span>LoadBalancer<span class="string">"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>等待设置完成后进行查看：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">kubectl</span> <span class="meta">get</span> <span class="keyword">svc </span>argo-ui -n argo</span><br></pre></td></tr></table></figure><h2 id="Argo-CLI"><a href="#Argo-CLI" class="headerlink" title="Argo CLI"></a>Argo CLI</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argo submit hello-world.yaml    # submit a workflow spec <span class="keyword">to</span> Kubernetes</span><br><span class="line">argo list                       # list current workflows</span><br><span class="line">argo <span class="builtin-name">get</span> hello-world-xxx        # <span class="builtin-name">get</span> <span class="builtin-name">info</span> about a specific workflow</span><br><span class="line">argo logs -w hello-world-xxx    # <span class="builtin-name">get</span> logs <span class="keyword">from</span> all steps <span class="keyword">in</span> a workflow</span><br><span class="line">argo logs hello-world-xxx-yyy   # <span class="builtin-name">get</span> logs <span class="keyword">from</span> a specific <span class="keyword">step</span> <span class="keyword">in</span> a workflow</span><br><span class="line">argo delete hello-world-xxx     # delete workflow</span><br></pre></td></tr></table></figure><p>注：<code>submit</code> 后默认使用的命名空间为 <code>default</code>。</p><h2 id="工作流模板"><a href="#工作流模板" class="headerlink" title="工作流模板"></a>工作流模板</h2><h3 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h3><p>指定每个任务的依赖项，将工作流定义为 <strong>图</strong>，在运行任务时可以实现有效的并行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  generateName:</span> <span class="string">dag-diamond-</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">diamond</span></span><br><span class="line"><span class="attr">  templates:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">echo</span></span><br><span class="line"><span class="attr">    inputs:</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">message</span></span><br><span class="line"><span class="attr">    container:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">alpine:3.7</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">[echo,</span> <span class="string">"<span class="template-variable">&#123;&#123;inputs.parameters.message&#125;&#125;</span>"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">diamond</span></span><br><span class="line"><span class="attr">    dag:</span></span><br><span class="line"><span class="attr">      tasks:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">A</span></span><br><span class="line"><span class="attr">        template:</span> <span class="string">echo</span></span><br><span class="line"><span class="attr">        arguments:</span></span><br><span class="line"><span class="attr">          parameters:</span> <span class="string">[&#123;name:</span> <span class="string">message,</span> <span class="attr">value:</span> <span class="string">A&#125;]</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">B</span></span><br><span class="line"><span class="attr">        dependencies:</span> <span class="string">[A]</span></span><br><span class="line"><span class="attr">        template:</span> <span class="string">echo</span></span><br><span class="line"><span class="attr">        arguments:</span></span><br><span class="line"><span class="attr">          parameters:</span> <span class="string">[&#123;name:</span> <span class="string">message,</span> <span class="attr">value:</span> <span class="string">B&#125;]</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">C</span></span><br><span class="line"><span class="attr">        dependencies:</span> <span class="string">[A]</span></span><br><span class="line"><span class="attr">        template:</span> <span class="string">echo</span></span><br><span class="line"><span class="attr">        arguments:</span></span><br><span class="line"><span class="attr">          parameters:</span> <span class="string">[&#123;name:</span> <span class="string">message,</span> <span class="attr">value:</span> <span class="string">C&#125;]</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">D</span></span><br><span class="line"><span class="attr">        dependencies:</span> <span class="string">[B,</span> <span class="string">C]</span></span><br><span class="line"><span class="attr">        template:</span> <span class="string">echo</span></span><br><span class="line"><span class="attr">        arguments:</span></span><br><span class="line"><span class="attr">          parameters:</span> <span class="string">[&#123;name:</span> <span class="string">message,</span> <span class="attr">value:</span> <span class="string">D&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h3><p>和 Kubernetes 一样，需要设置 secret，参考 <a href="/2018/10/08/2018/add-private-docker-registry-to-kubernetes">在 Kubernetes 中拉取私人镜像仓库镜像</a>。</p><p>配置文件中添加 <code>imagePullSecrets</code>，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># imagePullSecrets can be referenced in a workflow spec, which will be carried forward to all pods</span></span><br><span class="line"><span class="comment"># of the workflow. Note that imagePullSecrets can also be attached to a service account:</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  generateName:</span> <span class="string">hello-world-</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">whalesay</span></span><br><span class="line"><span class="attr">  imagePullSecrets:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">docker-registry-secret</span></span><br><span class="line"><span class="attr">  templates:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">whalesay</span></span><br><span class="line"><span class="attr">    container:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">docker/whalesay:latest</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">[cowsay]</span></span><br><span class="line"><span class="attr">      args:</span> <span class="string">["hello</span> <span class="string">world"]</span></span><br></pre></td></tr></table></figure><h3 id="消费-GPU"><a href="#消费-GPU" class="headerlink" title="消费 GPU"></a>消费 GPU</h3><p>因为项目是 machine-learning 类型，需要使用到 GPU 资源。创建的 Kubernetes 集群也是 GPU 集群。</p><p>在 Google Kubernetes Engine 上 Consume GPU 的配置可以参考 <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/gpus" target="_blank" rel="noopener">Kubernetes Engine GPUs</a>。</p><h4 id="安装-Driver"><a href="#安装-Driver" class="headerlink" title="安装 Driver"></a>安装 Driver</h4><p>首先，需要安装 Nvidia 的设备驱动，Google 提供了 YAML 文件。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/GoogleCloudPlatform/</span>container-engine-accelerators<span class="regexp">/k8s-1.9/</span>nvidia-driver-installer<span class="regexp">/cos/</span>daemonset-preloaded.yaml</span><br></pre></td></tr></table></figure><h4 id="配置-Argo-工作流模板"><a href="#配置-Argo-工作流模板" class="headerlink" title="配置 Argo 工作流模板"></a>配置 Argo 工作流模板</h4><p>在 Argo 的工作流模板中这样配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- name: ios-training</span><br><span class="line"><span class="symbol">    retryStrategy:</span></span><br><span class="line"><span class="symbol">      limit:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">    container:</span></span><br><span class="line"><span class="symbol">      name:</span> ios-training</span><br><span class="line"><span class="symbol">      image:</span> <span class="string">"&#123;&#123;workflow.parameters.image-ios-training&#125;&#125;"</span></span><br><span class="line"><span class="symbol">      env:</span></span><br><span class="line">      - name: TEST</span><br><span class="line"><span class="symbol">        value:</span> <span class="string">"&#123;&#123;workflow.parameters.test&#125;&#125;"</span></span><br><span class="line"><span class="symbol">      resources:</span></span><br><span class="line"><span class="symbol">        limits:</span></span><br><span class="line">          nvidia.com/gpu: <span class="string">'1'</span></span><br><span class="line"><span class="symbol">        requests:</span></span><br><span class="line">          nvidia.com/gpu: <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>Argo<ul><li><a href="https://kubernetes.feisky.xyz/fu-wu-zhi-li/devops/argo" target="_blank" rel="noopener">Argo</a></li><li><a href="https://applatix.com/open-source/argo/docs/argo_v2_yaml.html" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://github.com/argoproj/argo/tree/master/examples" target="_blank" rel="noopener">工作流事例</a></li><li><a href="https://github.com/argoproj/argo/issues/577" target="_blank" rel="noopener">Support for GPU resources #577</a></li></ul></li><li><a href="https://thenewstack.io/getting-started-with-gpus-in-google-kubernetes-engine/" target="_blank" rel="noopener">Getting Started with GPUs in Google Kubernetes Engine</a></li></ul>]]></content>
    
    <summary type="html">
    
      The Workflow Engine for Kubernetes
    
    </summary>
    
      <category term="云原生应用" scheme="http://jalan.space/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Kubernetes" scheme="http://jalan.space/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB 与 Laravel 中的 mongoDB</title>
    <link href="http://jalan.space/2018/12/12/2018/mongo/"/>
    <id>http://jalan.space/2018/12/12/2018/mongo/</id>
    <published>2018-12-12T15:37:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongoDB-是个什么鬼"><a href="#mongoDB-是个什么鬼" class="headerlink" title="mongoDB 是个什么鬼"></a>mongoDB 是个什么鬼</h2><ul><li>基于分布式文件存储的数据库</li><li>面向文档存储</li><li>旨在为 WEB 应用提供可扩展的高性能数据存储解决方案</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>单个实例可以容纳多个独立数据库</li><li>每个数据库有自己的集合和权限</li></ul><p>显示所有 db 的列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></span><br></pre></td></tr></table></figure><p>指定连接数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use <span class="built_in">local</span></span></span><br></pre></td></tr></table></figure><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ul><li>一组键值（key-value）对（BSON）</li><li>不需要相同的字段</li><li>相同的字段不需要相同的数据类型</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.baidu.com"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul><li>相当于 RDBMS 中的表格</li><li>没有固定的结构</li><li>通常一个集合内的数据有一定的关联性</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.baidu.com"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.google.com"</span>,<span class="attr">"name"</span>:<span class="string">"Google"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Laravel-中的使用"><a href="#在-Laravel-中的使用" class="headerlink" title="在 Laravel 中的使用"></a>在 Laravel 中的使用</h2><blockquote><p>A MongoDB based Eloquent model and Query builder for Laravel (Moloquent) </p></blockquote><p>我们使用 <code>jenssegers/laravel-mongodb</code>，git 地址：<a href="https://jenssegers.com。" target="_blank" rel="noopener">https://jenssegers.com。</a></p><p><code>README.md</code> 写的相当详细了。</p><h3 id="查询-JSON-结构数据"><a href="#查询-JSON-结构数据" class="headerlink" title="查询 JSON 结构数据"></a>查询 JSON 结构数据</h3><p>document 结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">﻿&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5c11df1024215d00175e6b62"</span>),</span><br><span class="line">    <span class="attr">"languages"</span> : &#123;</span><br><span class="line">        <span class="attr">"zh-Hans"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"zh-Hans"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="string">"1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"tw-Hant"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"tw-Hant"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="string">"2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"en"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"en"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="string">"2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ja"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"ja"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ko"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"ko"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"th"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"th"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"id"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"id"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"de"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"de"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"es"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"es"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"fr"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"fr"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"it"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"it"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"pt"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"pt"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"vi"</span> : &#123;</span><br><span class="line">            <span class="attr">"language_code"</span> : <span class="string">"vi"</span>,</span><br><span class="line">            <span class="attr">"name"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$db = <span class="keyword">new</span> DB();</span><br><span class="line">$db-&gt;where(<span class="string">'languages.en.name'</span>, <span class="string">'like'</span>, <span class="string">'%'</span> . $name . <span class="string">'%'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">MongoDB 教程</a></li><li><a href="https://www.jianshu.com/p/9d9bd51d31b6" target="_blank" rel="noopener">PHP Homestead 虚拟化安装与 MongoDB 扩展安装</a></li></ul>]]></content>
    
    <summary type="html">
    
      芒果滴哔——
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="php" scheme="http://jalan.space/tags/php/"/>
    
      <category term="mongodb" scheme="http://jalan.space/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Linux 定时任务</title>
    <link href="http://jalan.space/2018/11/21/2018/crontab/"/>
    <id>http://jalan.space/2018/11/21/2018/crontab/</id>
    <published>2018-11-21T15:54:00.000Z</published>
    <updated>2019-03-05T17:56:25.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><h3 id="编辑-crontab-文件"><a href="#编辑-crontab-文件" class="headerlink" title="编辑 crontab 文件"></a>编辑 crontab 文件</h3><p>执行以下命令打开 <strong>用户所属的</strong> crontab 文件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crontab -e</span></span><br></pre></td></tr></table></figure><p>打开 root 用户所属的 crontab 文件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo crontab -e</span></span><br></pre></td></tr></table></figure><p>选定编辑器可以使用 <code>select-editor</code>。</p><h3 id="任务格式"><a href="#任务格式" class="headerlink" title="任务格式"></a>任务格式</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Linux</span><br><span class="line"><span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span></span><br><span class="line">-    -    -    -    -    -</span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    + year [optional]</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    +----- day of week (0 - 7) (Sunday=0 or 7)</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    +---------- month (1 - 12)</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">    +--------------- day of month (1 - 31)</span></span><br><span class="line">|<span class="string">    +-------------------- hour (0 - 23)</span></span><br><span class="line"><span class="string">+------------------------- min (0 - 59)</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span>                  # 每隔一分钟执行一次任务  </span><br><span class="line">0 <span class="bullet">* *</span> <span class="bullet">* *</span>                  # 每小时的0点执行一次任务，比如6:00，10:00  </span><br><span class="line">6,10 <span class="bullet">* 2 *</span> *            # 每个月2号，每小时的6分和10分执行一次任务  </span><br><span class="line"><span class="emphasis">*/3,*</span>/5 <span class="bullet">* *</span> <span class="bullet">* *</span>          # 每隔3分钟或5分钟执行一次任务，比如10:03，10:05，10:06</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>cron restart</span><br></pre></td></tr></table></figure><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="开启日志文件"><a href="#开启日志文件" class="headerlink" title="开启日志文件"></a>开启日志文件</h3><ul><li>修改 <code>/etc/rsyslog.d/50-default.conf</code> 文件，将 <code>#cron.*</code> 前的 <code>#</code> 去除</li><li>重启 rsyslog 服务：<code>service rsyslog restart</code></li><li>重启 cron 服务：<code>service cron restart</code></li><li>查看日志文件：<code>tail -f /var/log/cron.log</code></li></ul><h3 id="奇奇怪怪的错误"><a href="#奇奇怪怪的错误" class="headerlink" title="奇奇怪怪的错误"></a>奇奇怪怪的错误</h3><h4 id="命令有输出信息导致错误"><a href="#命令有输出信息导致错误" class="headerlink" title="命令有输出信息导致错误"></a>命令有输出信息导致错误</h4><p>重定向输出：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span> &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000011316003" target="_blank" rel="noopener">在 Ubuntu 中， 将 cron 的默认日志存放在 /var/log/cron以及crontab的运用</a></li></ul>]]></content>
    
    <summary type="html">
    
      crontab
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Linux" scheme="http://jalan.space/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>《毒液：致命守护者》观后感：英雄至死是少年</title>
    <link href="http://jalan.space/2018/11/10/2018/venom/"/>
    <id>http://jalan.space/2018/11/10/2018/venom/</id>
    <published>2018-11-10T12:34:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>之前对漫威系列并不感冒，今天被少棉安利去看了新出的英雄，感觉棒棒的。正义与邪恶的碰撞、融合充满戏剧性，英雄身上的”少年感”也令人心向往之。</p><h2 id="英雄并非从始至终都完美"><a href="#英雄并非从始至终都完美" class="headerlink" title="英雄并非从始至终都完美"></a>英雄并非从始至终都完美</h2><p>一开场，男主 Eddie 像个正义的使者，作为记者因说出不该说的话被炒 n 次鱿鱼，却满不在乎地说：是我炒了他们。</p><p>而这回又一次作死，为了死去的无辜之人发声，让 Eddie 失去了工作与即将步入婚姻的女友。为此他开始过起失意的生活，当 Dr. Dora 找到他想请他帮忙披露生命基金会的罪行时，他没有坚持他一贯的正义，而是选择了逃避。</p><p>“Dr. Drake 让我成为这般模样，我不想再和这件事有任何瓜葛。”</p><p>Eddie 并非从始至终得完美，他也彷徨过、退缩过，他也曾怀疑心中所坚持的东西是否真的正确。心里的正义感从未让自己的生活舒心，是否还应该坚持呢？</p><p>然而，在桥上抚摸那枚前女友归还给他的戒指后，他还是选择了赴 Dr. Dora 的约。</p><p>正义感从未让生活舒心，但却令人安心啊。</p><p>完美的英雄没有烟火气，有缺陷的英雄能让观众更有共鸣感。这也是 Eddie 的魅力所在吧。</p><h2 id="“我不会放弃追她”"><a href="#“我不会放弃追她”" class="headerlink" title="“我不会放弃追她”"></a>“我不会放弃追她”</h2><p>分手后穷困潦倒的人跑到前女友楼下黯然神伤，看到她带着现男友回来只好假装路过。两人独处时小心翼翼地问一句”你最近过得还好吗”，最后又不甘心地发出”我们还能重新开始吗”的疑问，眼神低垂，像个犯错的孩子。</p><p>可惜啊，这个柔情深种的人是个幼稚的人。</p><p>毒液说：你的心跳怎么加快了，看来你很喜欢她。</p><p>毒液说：快道歉吧，以后或许没有机会了。</p><p>深藏着的心思被人揭露后才肯承认，说不出口的话也要别人推一把才愿扭扭捏捏地开口。</p><p>“我做错了很多事，但我很爱你。”</p><p>开口的那一刻应该成长了吧，虽然还是不甘心，还是放不下。直面自己的错误和内心是最勇敢的表现，爱便爱着，真诚比什么都重要。</p><h2 id="失败者的定义是什么"><a href="#失败者的定义是什么" class="headerlink" title="失败者的定义是什么"></a>失败者的定义是什么</h2><p>毒液对艾迪说：”我们都是 loser。”</p><p>你是地球上的 loser，而我在我那儿也是个 loser。</p><p>那到底什么样的人是失败者呢？如 Eddie 一般因为坚持内心所想而被处处打压就是社会的失败者吗？</p><p>从世俗的角度来看是的，没有了体面的工作，被未婚妻放了鸽子，住一间小破房，终日无所事事，怎么看也不像成功者的样子。但如果我们人人都活成了世俗想要的样子，那还会有英雄的出现吗？</p><h2 id="令人温暖的少年感"><a href="#令人温暖的少年感" class="headerlink" title="令人温暖的少年感"></a>令人温暖的少年感</h2><p>在我看来，无论 Eddie 还是毒液，都是充满”少年感”的。</p><p>毒液的”少年感”是让人忍俊不禁的”同为 loser 我愿意和你并肩作战”，而 Eddie 的”少年感”则来自不愿被世界改变的强大内心。</p><p>“少年感”像是一个人的”初心”，它之所以可贵就在于很多人早已丢失了它。在世俗的摸爬滚打中，很多人早已轻易地被社会磨去了棱角，变得不再坚持自己。</p><p>如果能始终保持住这份”少年感”，我也能成为自己世界里的英雄啦。</p><hr><p>《毒液：致命守护者》是一部画面感相当不错的电影，以上均为观后瞎想。</p>]]></content>
    
    <summary type="html">
    
      温暖的少年感令人心向往之
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>Python 操作 Redis</title>
    <link href="http://jalan.space/2018/11/07/2018/python-redis/"/>
    <id>http://jalan.space/2018/11/07/2018/python-redis/</id>
    <published>2018-11-06T16:45:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h2><p>redis 安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> redis</span><br></pre></td></tr></table></figure><p>引入：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>redis-py 使用 connection pool 来管理对一个 redis server 的所有连接，避免每次建立、释放连接的开销。默认，每个 Redis 实例都会维护一个自己的连接池。</p><p>可以直接建立一个连接池，然后作为参数 <code>r</code>，这样就可以实现多个 Redis 实例共享一个连接池。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool = redis.ConnectionPool(host=self.host, port=self.port, db=<span class="number">0</span>)</span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="获取所有-key"><a href="#获取所有-key" class="headerlink" title="获取所有 key"></a>获取所有 key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.keys()</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = self.r.get(key)</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendRedisData</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num, step)</span>:</span></span><br><span class="line">        self.host = <span class="string">"xxx.xxx.xxx.xxx"</span></span><br><span class="line">        self.port = <span class="string">"6379"</span></span><br><span class="line">        self.r = self.connect_redis()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_redis</span><span class="params">(self)</span>:</span></span><br><span class="line">        pool = redis.ConnectionPool(host=self.host, port=self.port, db=<span class="number">0</span>)</span><br><span class="line">        r = redis.StrictRedis(connection_pool=pool)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_keys</span><span class="params">(self)</span>:</span></span><br><span class="line">        keys = self.r.keys()</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            print(self.get_value(key)) <span class="comment">#获取每个 key 对应的 value 值</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.r.get(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = SendRedisData(num, step)</span><br><span class="line">    s.get_all_keys()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      import redis
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="python" scheme="http://jalan.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>让 Linux 进程在后台运行</title>
    <link href="http://jalan.space/2018/11/01/2018/run-in-the-background-in-linux/"/>
    <id>http://jalan.space/2018/11/01/2018/run-in-the-background-in-linux/</id>
    <published>2018-11-01T15:20:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><p>在命令后加上 <code>&amp;</code> 实现后台运行。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span> &amp;</span><br></pre></td></tr></table></figure><p>将所有标准输出与错误输出都重定向到某文件中：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; <span class="keyword">out</span>.<span class="keyword">file</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>使用 <code>&amp;</code> 命令后作业将被提交到后台运行，但一旦把控制台关掉（<code>exit</code> 退出后），作业就会停止运行。而 <code>nohup</code> 可以在推出账户后继续运行进程。</p><p><code>nohup</code> 即不挂起的意思（no hang up）。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="keyword">command</span> &amp;</span><br></pre></td></tr></table></figure><p>作业的输出都将被重定向到一个名为 <code>nohup.out</code> 文件中。</p><p>注：使用 <code>nohup</code> 后需要使用 <code>exit</code> 正常推出当前账户，此啊能保证命令一直在后台运行。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="jobs-l"><a href="#jobs-l" class="headerlink" title="jobs -l"></a>jobs -l</h3><p>仅可查看当前终端生效的进程。</p><h3 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -aux | <span class="keyword">grep</span> chat.js</span><br></pre></td></tr></table></figure><ul><li>a:显示所有程序 </li><li>u:以用户为主的格式来显示 </li><li>x:显示所有程序，不以终端机来区分</li></ul><h3 id="端口占用情况"><a href="#端口占用情况" class="headerlink" title="端口占用情况"></a>端口占用情况</h3><p>查看使用端口的进程：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="selector-tag">i</span>:<span class="number">8090</span></span><br></pre></td></tr></table></figure><p>查看其占用端口：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ap <span class="string">| grep 8090</span></span><br></pre></td></tr></table></figure><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      远离烦乱的终端信息
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Linux" scheme="http://jalan.space/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一诚可以抵万恶</title>
    <link href="http://jalan.space/2018/10/17/2018/love-yourself/"/>
    <id>http://jalan.space/2018/10/17/2018/love-yourself/</id>
    <published>2018-10-17T12:32:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“如果提前了解了你们要面对的人生，不知道你们是否还有勇气前来。</p></blockquote><blockquote><p>看见得和听到的，经常会令你们沮丧，世俗是这样强大，强大到生不出改变它们的念头来。</p></blockquote><blockquote><p>可是如果有机会，提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意，那些世俗希望你们在意的事情。</p></blockquote><blockquote><p>比如占有多少，才更荣耀，拥有什么，才能被爱。</p></blockquote><blockquote><p>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。</p></blockquote><blockquote><p>爱你所爱，行你所行。听从你心，无问西东。”</p></blockquote><p>世俗不明真相，不问世事，不给机会，不听哀求，碾碎我而又唤醒我。</p><p>未来的我将干净、坦荡地活成我想要的样子。</p>]]></content>
    
    <summary type="html">
    
      真诚地面对自己，诚恳地面对生活。
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>在 Kubernetes 中拉取私人镜像仓库镜像</title>
    <link href="http://jalan.space/2018/10/08/2018/add-private-docker-registry-to-kubernetes/"/>
    <id>http://jalan.space/2018/10/08/2018/add-private-docker-registry-to-kubernetes/</id>
    <published>2018-10-08T11:43:00.000Z</published>
    <updated>2019-03-05T17:56:25.094Z</updated>
    
    <content type="html"><![CDATA[<p>对于公司内部的项目, 我们不可能使用公有开放的镜像仓库, 一般会在自己的服务器上搭建私有仓库。这时候就需要在 Kubernetes 中拉取私人镜像仓库的镜像。</p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry regsecret --docker-server=&#123;<span class="variable">$Server</span>&#125; --docker-username=&#123;<span class="variable">$Email</span>&#125; --docker-password=&#123;<span class="variable">$Password</span>&#125; --docker-email=&#123;<span class="variable">$Email</span>&#125;</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>regsecret: 密钥键名，可自行定义</li><li>–docker-server：docker 仓库地址</li><li>–docker-username：docker 仓库账号</li><li>–docker-password：docker 仓库密码</li><li>–docker-email：邮件地址（选填）</li></ul><p><strong>注：</strong>密钥只能在对应 namespace 使用，指定 namespace 使用 <code>-n</code> 参数。</p><h2 id="在配置文件中加入密钥"><a href="#在配置文件中加入密钥" class="headerlink" title="在配置文件中加入密钥"></a>在配置文件中加入密钥</h2><p>修改 <code>yml</code> 配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">&#123;$ImageUrl&#125;</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">regsecret</span></span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tonybai.com/2016/11/16/how-to-pull-images-from-private-registry-on-kubernetes-cluster/" target="_blank" rel="noopener">Kubernetes从Private Registry中拉取容器镜像的方法</a></li><li><a href="https://kubernetes.io/cn/docs/concepts/containers/images/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://www.jianshu.com/p/fd13c2762d81" target="_blank" rel="noopener">kubernetes配置secret拉取私仓镜像</a></li></ul>]]></content>
    
    <summary type="html">
    
      谁还没个私人仓库呢
    
    </summary>
    
      <category term="云原生应用" scheme="http://jalan.space/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Kubernetes" scheme="http://jalan.space/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>格式化 Laravel 与 Apache 日志</title>
    <link href="http://jalan.space/2018/09/27/2018/add-laravel-log-to-elk/"/>
    <id>http://jalan.space/2018/09/27/2018/add-laravel-log-to-elk/</id>
    <published>2018-09-27T14:14:00.000Z</published>
    <updated>2019-03-05T17:56:25.094Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便 ELK 日志收集，需要将访问日志与业务日志转化为 JSON 格式。</p><p>因业务使用 Apache 与 Laravel 框架，部署环境为 Docker 容器，现说明如何格式化二者日志并输出到标准输出流中。</p><h2 id="什么是-ELK"><a href="#什么是-ELK" class="headerlink" title="什么是 ELK"></a>什么是 ELK</h2><p>ELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写：</p><ul><li>Elasticsearch：实时的分布式搜索和分析引擎</li><li>Logstash：具有实时渠道能力的数据收集引擎</li><li>Kibana：基于 Apache 开源协议，为 Elasticsearch 提供分析和可视化的 Web 平台</li></ul><p>这三款软件都是开源软件，通常是配合使用，而且又先后归于 Elastic.co 公司名下，故被简称为 ELK 协议栈。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>在配置中使用 <code>LogFormat</code> 定义日志格式，并在格式末尾为该格式命名：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogFormat <span class="string">"&#123; <span class="subst">\"</span>@timestamp<span class="subst">\"</span>:<span class="subst">\"</span>%&#123;%Y-%m-%dT%H:%M:%S.000000Z&#125;t<span class="subst">\"</span>, <span class="subst">\"</span>request_time<span class="subst">\"</span>:<span class="subst">\"</span>%T<span class="subst">\"</span>, <span class="subst">\"</span>remote_addr<span class="subst">\"</span>:<span class="subst">\"</span>%h<span class="subst">\"</span>, <span class="subst">\"</span>local_addr<span class="subst">\"</span>:<span class="subst">\"</span>%a<span class="subst">\"</span>, <span class="subst">\"</span>host<span class="subst">\"</span>:<span class="subst">\"</span>%V<span class="subst">\"</span>, <span class="subst">\"</span>request<span class="subst">\"</span>:<span class="subst">\"</span>%U<span class="subst">\"</span>, <span class="subst">\"</span>query<span class="subst">\"</span>:<span class="subst">\"</span>%q<span class="subst">\"</span>, <span class="subst">\"</span>method<span class="subst">\"</span>:<span class="subst">\"</span>%m<span class="subst">\"</span>, <span class="subst">\"</span>status<span class="subst">\"</span>:<span class="subst">\"</span>%&gt;s<span class="subst">\"</span>, <span class="subst">\"</span>user-agent<span class="subst">\"</span>:<span class="subst">\"</span>%&#123;User-agent&#125;i<span class="subst">\"</span>, <span class="subst">\"</span>referer<span class="subst">\"</span>:<span class="subst">\"</span>%&#123;Referer&#125;i<span class="subst">\"</span>, <span class="subst">\"</span>tag<span class="subst">\"</span>:<span class="subst">\"</span>apache'<span class="subst">\"</span> &#125;"</span> apachejson</span><br></pre></td></tr></table></figure><p>将刚配置的日志格式应用于 access.log：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CustomLog $&#123;APACHE_LOG_DIR&#125;/<span class="keyword">access</span>.<span class="built_in">log</span> apachejson</span><br></pre></td></tr></table></figure><p>Apache <code>access.log</code> 参数具体含义见：<a href="https://httpd.apache.org/docs/2.4/logs.html" target="_blank" rel="noopener">Apache 官方文档</a>。</p><h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><p>Laravel 框架使用的是强大的日志系统 <code>monolog</code>。</p><h3 id="monolog-三大概念"><a href="#monolog-三大概念" class="headerlink" title="monolog 三大概念"></a>monolog 三大概念</h3><h4 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h4><p><code>handler</code> 是日志处理器。</p><ul><li>存放 <code>handler</code> 的数据结构是一个栈</li><li>一个日志实例可以有多个 <code>handler</code></li><li>通过 Logger 实例的 <code>pushHandler</code> 方法压入一个 <code>handler</code></li><li>如果你设置了多个 <code>handler</code>，当你新增一条日志的时候，他会从栈顶开始往下传播，关心这个级别日志的 <code>handler</code> 将会处理这条日志</li><li>所有的 <code>handler</code> 都会继承 <code>AbstractProcessingHandler</code> 这个抽象类</li></ul><h4 id="formatter"><a href="#formatter" class="headerlink" title="formatter"></a>formatter</h4><p><code>formatter</code> 用于设置日志格式。</p><p>每个 <code>handler</code> 可以单独设置记录的日志格式，<code>AbstractHandler</code> 抽象类中有一个 <code>setFormatter</code> 方法，该参数接受一个 <code>FormatterInterface</code> 类型的参数.</p><h4 id="processor"><a href="#processor" class="headerlink" title="processor"></a>processor</h4><p><code>processor</code> 又称日志加工程序，用于给日志添加额外信息。</p><h3 id="手把手设置日志"><a href="#手把手设置日志" class="headerlink" title="手把手设置日志"></a>手把手设置日志</h3><p>在 <code>/bootstrap/app.php</code> 中创建一个 <code>handle</code>，并为他设置 <code>formatter</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;configureMonologUsing(<span class="function"><span class="keyword">function</span> <span class="params">($monolog)</span> </span>&#123;</span><br><span class="line">    $logLevel = \Monolog\Logger::DEBUG;</span><br><span class="line">    $logStreamHandler = <span class="keyword">new</span> \Monolog\Handler\StreamHandler(<span class="string">'php://stdout'</span>, $logLevel); <span class="comment">//该 handler 输出数据到标准输出流 stdout 中</span></span><br><span class="line">    $formatter = <span class="keyword">new</span> \App\Components\Log\JsonFormatter();</span><br><span class="line">    $logStreamHandler-&gt;setFormatter($formatter);</span><br><span class="line"></span><br><span class="line">    $monolog-&gt;pushHandler($logStreamHandler);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>JsonFormatter.php</code> 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Components</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Formatter</span>\<span class="title">JsonFormatter</span> <span class="title">as</span> <span class="title">BaseJsonFormatter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonFormatter</span> <span class="keyword">extends</span> <span class="title">BaseJsonFormatter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">(array $record)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $record = <span class="keyword">$this</span>-&gt;normalize($record);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 改变格式，自由发挥</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        $json = <span class="keyword">$this</span>-&gt;toJson($record, <span class="keyword">true</span>) . (<span class="keyword">$this</span>-&gt;appendNewline ? <span class="string">"\n"</span> : <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html" target="_blank" rel="noopener">集中式日志系统 ELK 协议栈详解</a></li><li><a href="https://github.com/laravel/ideas/issues/126" target="_blank" rel="noopener">[Request] Docker-friendly logging</a></li><li><a href="https://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats" target="_blank" rel="noopener">Apache Module mod_log_config</a></li></ul>]]></content>
    
    <summary type="html">
    
      为了 ELK ！
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="MySQL" scheme="http://jalan.space/tags/MySQL/"/>
    
  </entry>
  
</feed>
