<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘归</title>
  
  <subtitle>底色悲凉，自在如风。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jalan.space/"/>
  <updated>2019-08-31T14:59:41.173Z</updated>
  <id>http://jalan.space/</id>
  
  <author>
    <name>Jalan.江佳扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】如何杀死一个进程和它的所有子进程</title>
    <link href="http://jalan.space/2019/08/31/2019/translate-killing-a-process-and-all-of-its-descendants/"/>
    <id>http://jalan.space/2019/08/31/2019/translate-killing-a-process-and-all-of-its-descendants/</id>
    <published>2019-08-31T14:59:00.000Z</published>
    <updated>2019-08-31T14:59:41.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="http://morningcoffee.io/killing-a-process-and-all-of-its-descendants.html" target="_blank" rel="noopener">Killing a process and all of its descendants</a></li><li>原文作者：<a href="https://twitter.com/igor_sarcevic" target="_blank" rel="noopener">igor_sarcevic</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/killing-a-process-and-all-of-its-descendants.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/TODO1/killing-a-process-and-all-of-its-descendants.md</a></li><li>译者：<a href="http://jalan.space">江五渣</a></li><li>校对者：</li></ul></blockquote><h1 id="如何杀死一个进程和它的所有子进程"><a href="#如何杀死一个进程和它的所有子进程" class="headerlink" title="如何杀死一个进程和它的所有子进程"></a>如何杀死一个进程和它的所有子进程</h1><p>在类 Unix 系统中杀死进程比预期中更棘手。上周我在调试一个有关用信号量终止作业的问题。更具体地说，这是一个有关于在作业中终止正在运行的进程的问题。以下是我从中学到的要点：</p><ul><li>类 Unix 操作系统有着复杂的进程间关系：父子进程、进程组、会话、会话的领导进程。但是，在 Linux 与 MacOS 等操作系统中，这其中的细节并不统一。符合 POSIX 的操作系统支持使用负 PID 向进程组发送信号。</li><li>使用系统调用向会话中的所有进程发送信号并非易事。</li><li>用 exec 启动的子进程将继承其父进程的信号配置。例如，如果父进程忽略 SIGHUP 信号，它的子进程也会忽略 SIGHUP 信号。</li><li>“孤儿进程组内发生了什么”这一问题的答案并不简单。</li></ul><h2 id="杀死父进程并不会同时杀死子进程"><a href="#杀死父进程并不会同时杀死子进程" class="headerlink" title="杀死父进程并不会同时杀死子进程"></a>杀死父进程并不会同时杀死子进程</h2><p>每个进程都有一个父进程。我们可以使用 <code>pstree</code> 或 <code>ps</code> 工具来观察这一点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动两个虚拟进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sleep 100 &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sleep 101 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pstree -p</span></span><br><span class="line">init(1)-+</span><br><span class="line">        |-bash(29051)-+-pstree(29251)</span><br><span class="line">                      |-sleep(28919)</span><br><span class="line">                      `-sleep(28964)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps j -A</span></span><br><span class="line"> PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND</span><br><span class="line">    0     1     1     1 ?           -1 Ss       0   0:03 /sbin/init</span><br><span class="line">29051  1470  1470 29051 pts/2     2386 SN    1000   0:00 sleep 100</span><br><span class="line">29051  1538  1538 29051 pts/2     2386 SN    1000   0:00 sleep 101</span><br><span class="line">29051  2386  2386 29051 pts/2     2386 R+    1000   0:00 ps j -A</span><br><span class="line">    1 29051 29051 29051 pts/2     2386 Ss    1000   0:00 -bash</span><br></pre></td></tr></table></figure><p>调用 <code>ps</code> 命令可以显示 PID（进程 ID） 和 PPID（父进程 ID）。</p><p>我对父子进程间的关系有着错误的假设。我认为如果我杀死了父进程，那么也会杀死它的所有子进程。然而这是错误的。相反，子进程将会成为孤儿进程，而 init 进程将重新成为它们的父进程。</p><p>让我们看看通过终止 bash 进程（sleep 命令的当前父进程）来重建进程间的父子关系后发生了哪些变化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> 29051 <span class="comment"># 杀死 bash 进程</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pstree -A</span></span><br><span class="line">init(1)-+</span><br><span class="line">        |-sleep(28919)</span><br><span class="line">        `-sleep(28965)</span><br></pre></td></tr></table></figure><p>于我而言，重新分配父进程的行为很奇怪。例如，当我使用 SSH 登录一台服务器，启动一个进程，然后退出时，我启动的进程将会被终止。我错误地认为这是 Linux 上的默认行为。然而实际情况是，当我离开一个 SSH 会话时，进程的终止与进程组、会话的领导进程和控制终端都有关。</p><h2 id="什么是进程组和会话领导进程？"><a href="#什么是进程组和会话领导进程？" class="headerlink" title="什么是进程组和会话领导进程？"></a>什么是进程组和会话领导进程？</h2><p>让我们再次观察上述事例中 <code>ps j</code> 命令的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps j -A</span></span><br><span class="line"> PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND</span><br><span class="line">    0     1     1     1 ?           -1 Ss       0   0:03 /sbin/init</span><br><span class="line">29051  1470  1470 29051 pts/2     2386 SN    1000   0:00 sleep 100</span><br><span class="line">29051  1538  1538 29051 pts/2     2386 SN    1000   0:00 sleep 101</span><br><span class="line">29051  2386  2386 29051 pts/2     2386 R+    1000   0:00 ps j -A</span><br><span class="line">    1 29051 29051 29051 pts/2     2386 Ss    1000   0:00 -bash</span><br></pre></td></tr></table></figure><p>除了使用 PPID 和 PID 表示的父子进程关系外，进程间还有其他两种关系：</p><ul><li>用 PGID 表示的进程组</li><li>用 SID 表示的会话</li></ul><p>我们可以在支持作业控制的 Shell 环境中观察到进程组，例如 <code>bash</code> 和 <code>zsh</code>，它们为每个管道命令都创建了一个进程组。进程组是一个或多个进程（通常与一个作业关联）的集合，可以从同一个终端接收信号。每个进程组都有一个唯一的进程组 ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动一个由 tail 和 grep 命令组成的进程组</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f /var/<span class="built_in">log</span>/syslog | grep <span class="string">"CRON"</span> &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps j</span></span><br><span class="line"> PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND</span><br><span class="line">29051 19701 19701 29051 pts/2    19784 SN    1000   0:00 tail -f /var/log/syslog</span><br><span class="line">29051 19702 19701 29051 pts/2    19784 SN    1000   0:00 grep CRON</span><br><span class="line">29051 19784 19784 29051 pts/2    19784 R+    1000   0:00 ps j</span><br><span class="line">29050 29051 29051 29051 pts/2    19784 Ss    1000   0:00 -bash</span><br></pre></td></tr></table></figure><p>请注意，在前半段中，<code>tail</code> 和 <code>grep</code> 的 PGID 是相同的。</p><p>会话是进程组的集合，通常由一个控制终端和一个会话领导进程组成。如果会话中有一个控制终端，它就具有单个前台进程组，除了该控制终端，会话中的所有其他进程组都是后台进程组。</p><p><img src="http://morningcoffee.io/images/killing-a-process-and-all-of-its-descendants/sessions.png" alt="会话"></p><p>并非所有的 bash 进程都是会话，但是当你使用 SSH 登录一台远程服务器时，你通常会得到一个会话。当 bash 作为会话领导进程运行时，它将 SIGHUP 信号传播给它的子进程。SIGHUP 信号的传播方式就是我一直以来坚信子进程会与父进程一起消亡的核心原因。</p><h2 id="在-Unix-中会话的实现并非一致"><a href="#在-Unix-中会话的实现并非一致" class="headerlink" title="在 Unix 中会话的实现并非一致"></a>在 Unix 中会话的实现并非一致</h2><p>在上述事例中，你可以注意到 SID （进程的会话 ID）出现的位置。它是会话中所有进程共享的 ID。</p><p>但是，你需要记住，并非所有的 Unix 系统都遵循这一实现。单一 UNIX 规范只讨论“会话领导进程”，没有类似于进程 ID 或进程组 ID 的“会话 ID”。会话领导进程是一个具有唯一进程 ID 的单进程，因此我们可以讨论的会话 ID 是会话领导者的进程 ID。</p><p>System V Release 4 引入了会话 ID。</p><p>实际上，这意味着你能在 Linux 上通过 <code>ps</code> 命令获取会话 ID，但是在 BSD 及其变体（如 MacOS）上，会话 ID 并不存在，或始终为零。</p><h2 id="杀死进程组或会话中的所有进程"><a href="#杀死进程组或会话中的所有进程" class="headerlink" title="杀死进程组或会话中的所有进程"></a>杀死进程组或会话中的所有进程</h2><p>我们可以使用该 PGID，通过 kill 命令向整个进程组发送信号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -SIGTERM -- -19701</span></span><br></pre></td></tr></table></figure><p>我们用一个负数 <code>-19701</code> 向进程组发送信号。如果我们传递的是一个正数，这个数将被视为进程 ID 用于终止进程。如果我们传递的是一个负数，它被视为 PGID，用于终止整个进程组。</p><p>负数来自系统调用的直接定义。</p><p>杀死会话中的所有进程与之大相径庭。如我们在前一节说到的，有些系统没有会话 ID 的概念。即使是具有会话 ID 的系统，例如 Linux，也没有提供系统调用来终止会话中的所有进程。你需要遍历 <code>/proc</code> 输出的进程树，收集所有的 SID，然后一一终止进程。</p><p>Pgrep 实现了遍历、收集并通过会话 ID 杀死进程的算法。使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -s &lt;SID&gt;</span><br></pre></td></tr></table></figure><h2 id="被-nohup-忽略的信号传播到子进程"><a href="#被-nohup-忽略的信号传播到子进程" class="headerlink" title="被 nohup 忽略的信号传播到子进程"></a>被 nohup 忽略的信号传播到子进程</h2><p>被忽略的信号，就像是被 <code>nohup</code> 忽略的信号那样，都被传播到进程的所有子进程中。这种信号传播方式就是我上周在 bug 排查中遇到的最终瓶颈。</p><p>在我的程序中运行着 bash 命令的代理 —— 我验证了我已经建立了一个具有控制终端的 bash 会话。该控制终端是 bash 会话中其他启动进程的会话领导进程。我的进程树如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">agent -+</span><br><span class="line">       +- bash (session leader) -+</span><br><span class="line">                                 | - process1</span><br><span class="line">                                 | - process2</span><br></pre></td></tr></table></figure><p>我以为，当我使用 SIGHUP 杀死 bash 会话时，它的子进程也会同时终止。对代理的集成测试也证明了这一点。</p><p>但是，我忽略了这个代理是以 <code>nohup</code> 启动的。当你使用 <code>exec</code> 启动子进程时，就像我们在代理中启动 bash 进程一样，它会从它的父进程继承信号状态。</p><p>最后一个结论使我惊讶万分。</p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      这一切是否是继父 init 的阴谋？
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Linux" scheme="http://jalan.space/tags/Linux/"/>
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>二零一九碎碎念</title>
    <link href="http://jalan.space/2019/08/27/2019/bibi/"/>
    <id>http://jalan.space/2019/08/27/2019/bibi/</id>
    <published>2019-08-27T13:41:00.000Z</published>
    <updated>2019-08-31T08:56:17.025Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="薯条是？" />    <label for="pass">薯条是？</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      我与春风皆过客
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>在 Swift 中快速创建与访问自定义颜色</title>
    <link href="http://jalan.space/2019/08/24/2019/swift-extend-uicolor/"/>
    <id>http://jalan.space/2019/08/24/2019/swift-extend-uicolor/</id>
    <published>2019-08-24T09:41:00.000Z</published>
    <updated>2019-08-24T10:18:33.630Z</updated>
    
    <content type="html"><![CDATA[<p>在 Swift 中使用 UIColor 定义颜色是件麻烦事儿，你需要在初始化函数中给出 RGB 以及透明度的数值：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">init</span>(<span class="attribute">red</span>: CGFloat, </span><br><span class="line"><span class="attribute">green</span>: CGFloat, </span><br><span class="line"><span class="attribute">blue</span>: CGFloat, </span><br><span class="line"><span class="attribute">alpha</span>: CGFloat)</span><br></pre></td></tr></table></figure><p>我们希望可以像 <code>UIColor.black</code> 这样快速访问我们自定义的颜色。<code>extension UIColor</code> 可以帮助我们实现这一功能。</p><h2 id="什么是-extension？"><a href="#什么是-extension？" class="headerlink" title="什么是 extension？"></a>什么是 extension？</h2><p>extension 可以为一个类型添加新的功能，但不能重写已有的功能。</p><p>extension 可以完成：</p><ol><li>添加计算属性（computed properties）</li><li>添加方法（methods）</li><li>添加初始化方法（initializers）</li><li>添加附属脚本（subscripts）</li><li>添加并使用嵌套类型（nested types）</li><li>遵循并实现某一协议（conform protocol）</li></ol><h2 id="创建一个-extension"><a href="#创建一个-extension" class="headerlink" title="创建一个 extension"></a>创建一个 extension</h2><p>我们可以在项目中创建一个 Extensions 文件夹来存放 extension 文件。</p><p>选择 <em>File &gt; New &gt; File … &gt; iOS &gt; Swift File</em>， 输入名称后创建一个文件。</p><p>文件名可以根据「扩展类名 + 功能介绍」的格式来取。例如为 <code>UIColor</code> 添加自定义颜色，文件名就可以定为 <em>UIColorCustomColor.swift</em>。</p><h2 id="通过-extension-UIColor-自定义颜色"><a href="#通过-extension-UIColor-自定义颜色" class="headerlink" title="通过 extension UIColor 自定义颜色"></a>通过 extension UIColor 自定义颜色</h2><h3 id="定义新增初始化方法"><a href="#定义新增初始化方法" class="headerlink" title="定义新增初始化方法"></a>定义新增初始化方法</h3><p>使用 <code>convenience</code> 关键字新增一个初始化 <code>init</code> 方法。</p><p>该方法接收三个 <code>Int</code> 类型参数：</p><ul><li>red：红色光值（R）</li><li>green：绿色光值（G）</li><li>blue：蓝色光值（B）</li></ul><p>而后根据这三个参数初始化 <code>UIColor</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新增初始化方法</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(red: <span class="type">Int</span>, green: <span class="type">Int</span>, blue: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(red &gt;= <span class="number">0</span> &amp;&amp; red &lt;= <span class="number">255</span>, <span class="string">"Invalid red component"</span>)</span><br><span class="line">        <span class="built_in">assert</span>(green &gt;= <span class="number">0</span> &amp;&amp; green &lt;= <span class="number">255</span>, <span class="string">"Invalid green component"</span>)</span><br><span class="line">        <span class="built_in">assert</span>(blue &gt;= <span class="number">0</span> &amp;&amp; blue &lt;= <span class="number">255</span>, <span class="string">"Invalid blue component"</span>)</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: <span class="type">CGFloat</span>(red) / <span class="number">255.0</span>, green: <span class="type">CGFloat</span>(green) / <span class="number">255.0</span>, blue: <span class="type">CGFloat</span>(blue) / <span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义自定义颜色结构体"><a href="#定义自定义颜色结构体" class="headerlink" title="定义自定义颜色结构体"></a>定义自定义颜色结构体</h3><p>使用 <code>struct</code> 定义一个名为 <code>CustomColor</code> 的颜色结构体，用于存放所有自定义颜色。</p><p>该结构体中又定义了不同颜色的结构体，例如 <code>struct Black</code>，<code>struct Gray</code>，用于存放各自颜色类别下的具体颜色。</p><p>大致就是这个结构：</p><ul><li>自定义颜色<ul><li>黑色<ul><li>墨水黑</li><li>非洲黑</li><li>乌漆麻黑</li><li>……</li></ul></li><li>灰色<ul><li>烟灰</li><li>天灰灰</li><li>……</li></ul></li><li>紫色<ul><li>基佬紫</li><li>……</li></ul></li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新增初始化方法</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义颜色结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CustomColor</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 黑色</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Black</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">SmokyBlack</span> = <span class="type">UIColor</span>(red: <span class="number">13</span>, green: <span class="number">13</span>, blue: <span class="number">13</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 灰色</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Gray</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 正常文字</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">GraniteGray</span> = <span class="type">UIColor</span>(red: <span class="number">102</span>, green: <span class="number">102</span>, blue: <span class="number">110</span>)</span><br><span class="line">            <span class="comment">// 补充文字灰色</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">SpanishGray</span> = <span class="type">UIColor</span>(red: <span class="number">153</span>, green: <span class="number">153</span>, blue: <span class="number">161</span>)</span><br><span class="line">            <span class="comment">// 补充文字灰色 2</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">LightGray</span> = <span class="type">UIColor</span>(red: <span class="number">210</span>, green: <span class="number">210</span>, blue: <span class="number">212</span>)</span><br><span class="line">            <span class="comment">// 失去焦点灰色</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Platinum</span> = <span class="type">UIColor</span>(red: <span class="number">230</span>, green: <span class="number">230</span>, blue: <span class="number">233</span>)</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 白色</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">White</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">WhiteSmoke</span> = <span class="type">UIColor</span>(red: <span class="number">247</span>, green: <span class="number">247</span>, blue: <span class="number">248</span>)</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Platinum</span> = <span class="type">UIColor</span>(red: <span class="number">232</span>, green: <span class="number">237</span>, blue: <span class="number">223</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>上面已经定义好了一个自定义颜色结构体，调用方式如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bottomLine.backgroundColor = <span class="type">UIColor</span>.<span class="type">CustomColor</span>.<span class="type">Gray</span>.<span class="type">LightGray</span>.cgColor</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://medium.com/ios-os-x-development/ios-extend-uicolor-with-custom-colors-93366ae148e6" target="_blank" rel="noopener">iOS — Extend UIColor with custom colors</a></li><li><a href="https://stackoverflow.com/questions/33942483/swift-extension-example" target="_blank" rel="noopener">Swift extension example</a></li><li><a href="https://www.jianshu.com/p/09c6c88ed61e" target="_blank" rel="noopener">Swift 中 convenience 和 required 关键字用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      extension UIColor
    
    </summary>
    
      <category term="移动开发者" scheme="http://jalan.space/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="Swift" scheme="http://jalan.space/tags/Swift/"/>
    
      <category term="iOS" scheme="http://jalan.space/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>在 UITableView 的 Cell 中画一条线</title>
    <link href="http://jalan.space/2019/08/09/2019/ios-add-line-in-cell/"/>
    <id>http://jalan.space/2019/08/09/2019/ios-add-line-in-cell/</id>
    <published>2019-08-09T13:17:00.000Z</published>
    <updated>2019-08-09T13:38:02.346Z</updated>
    
    <content type="html"><![CDATA[<p>初入 iOS 坑，想实现待办事项完成事项后的删除线效果。但如果直接在 <code>textLabel</code> 的文字上加入删除线属性的话，只会在文字范围加入删除线。强迫症的我认为如果能直接在 Cell 上加入一条线会比较好看（吧），类似这样的效果：</p><p><img src="/img/in-post/swift-cell-line.png" alt="哪里好看了喂"></p><p>这样每一个 Cell 的删除线长度都一样，比较符合强迫症的气质。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>使用 <code>UIView</code> 画一个矩形，假装它是一条线</li><li>设置这个矩形的背景色</li><li>把这个矩形添加到 Cell 的 <code>contentView</code> 中</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 添加删除线 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 UIView 画一个矩形</span></span><br><span class="line"><span class="keyword">let</span> lineView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">20</span>, width: cell.contentView.frame.width - <span class="number">35</span>, height: <span class="number">0.5</span>))</span><br><span class="line"><span class="comment">// 填充矩形颜色</span></span><br><span class="line">lineView.backgroundColor = <span class="type">UIColor</span>.<span class="type">CustomColor</span>.<span class="type">Gray</span>.<span class="type">Platinum</span></span><br><span class="line"><span class="comment">// 添加为 contentView 的子页面</span></span><br><span class="line">cell.contentView.addSubview(lineView)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      不是删除线哦
    
    </summary>
    
      <category term="移动开发者" scheme="http://jalan.space/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="Swift" scheme="http://jalan.space/tags/Swift/"/>
    
      <category term="iOS" scheme="http://jalan.space/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>面向对象困境之 —— 横切关注点</title>
    <link href="http://jalan.space/2019/08/04/2019/oop-crosscutting-concern/"/>
    <id>http://jalan.space/2019/08/04/2019/oop-crosscutting-concern/</id>
    <published>2019-08-04T09:29:00.000Z</published>
    <updated>2019-08-04T09:33:58.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是关注点（Concern）？"><a href="#什么是关注点（Concern）？" class="headerlink" title="什么是关注点（Concern）？"></a>什么是关注点（Concern）？</h2><blockquote><p>A <strong>Concern</strong> is a term that refers to a part of the system divided on the basis of the functionality.</p></blockquote><p><strong>关注点</strong>是指基于功能划分系统的一部分。</p><h2 id="什么是横切关注点（Crosscutting-Concern）？"><a href="#什么是横切关注点（Crosscutting-Concern）？" class="headerlink" title="什么是横切关注点（Crosscutting Concern）？"></a>什么是横切关注点（Crosscutting Concern）？</h2><blockquote><p>部分关注点「横切」程序代码中的数个模块，即在多个模块中都有出现，它们即被称作「横切关注点（Cross-cutting concerns, Horizontal concerns）」。</p></blockquote><p>这样说好像还是特别抽象？那我们举个例子。</p><p><strong>日志功能</strong>就是<strong>横切关注点</strong>的一个典型案例。日志功能往往横跨系统中的每个业务模块，即“<strong>横切</strong>”所有需要日志功能的类和方法体。所以我们说日志成为了<strong>横切</strong>整个系统对象结构的<strong>关注点</strong> —— 也就叫做<strong>横切关注点</strong>啦。</p><h2 id="面向对象的困境"><a href="#面向对象的困境" class="headerlink" title="面向对象的困境"></a>面向对象的困境</h2><p>对于 OOP 来说，我们很难在<strong>不同的继承关系链</strong>中共用代码。</p><p>例如 A 类继承 B 类，C 类继承 D 类，而 A 和 C 都需要实现一个写日志的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当我们遇到这种情况时要怎么办呢？</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="复制-粘贴"><a href="#复制-粘贴" class="headerlink" title="复制 - 粘贴"></a>复制 - 粘贴</h3><p>虽然我们对此嗤之以鼻，但在业务时间紧迫（或懒懒懒）时，很多人还是会采用这种方案。</p><p>方案的缺点一目了然：代码重复率高。复制粘贴一时爽，后期维护火葬场。</p><h3 id="引入基础类"><a href="#引入基础类" class="headerlink" title="引入基础类"></a>引入基础类</h3><p>让所有继承链都继承一个基础类 <code>Base</code>，然后在这个基础类中实现要共享的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个「超级」基础类，共享代码都在这里定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"write log"</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.write_log()</span><br></pre></td></tr></table></figure><p>但随着时间的推移，这个基础类 <code>Base</code> 的规模会越来越大，职责也变得越来越模糊。</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>像 PHP、Java、Swift 等是不支持多重继承的，Python 或 C++ 可以使用这种方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"write log"</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A 继承 B 也继承 Log</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B, Log)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D, Log)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.write_log()</span><br></pre></td></tr></table></figure><p>但多重继承会带来另一个问题：<strong>菱形缺陷</strong>（Diamond Problem）。</p><p>参考阅读：<a href="http://jalan.space/2019/07/29/2019/oo-diamond-problem/">《面向对象困境之 —— 菱形缺陷》</a></p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>依赖注入是指通过<strong>外部传入</strong>带有某个方法的<strong>对象</strong>来使用这个方法。</p><p>例如我们定义一个带有写日志方法的 Log 类，如果我们要在类 A 中调用这个方法，那么就把 Log 的一个对象直接注入类 A 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"write log"</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, log)</span>:</span></span><br><span class="line">        self.log = log</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_a_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.log.write_log()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接注入 Log 对象</span></span><br><span class="line">a = A(Log())</span><br><span class="line">a.write_a_log()</span><br></pre></td></tr></table></figure><p>在 PHP 框架 <a href="https://laravel.com/" target="_blank" rel="noopener">Laravel</a> 中就大量使用了依赖注入。</p><h3 id="面线协议编程"><a href="#面线协议编程" class="headerlink" title="面线协议编程"></a>面线协议编程</h3><p>这里涉及到 Swift 中的<strong>协议</strong>和<strong>协议扩展</strong>。</p><p>先定义一个包含写日志方法 <code>writeLog()</code> 的协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义协议</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后为这个 <code>writeLog()</code> 提供一个默认的实现方法，即<strong>协议扩展</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义协议</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供一个默认的实现方法</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// coding</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，任何遵守 <code>Log</code> 协议的类都可以使用默认的 <code>writeLog()</code> 方法了。</p><h2 id="参考资料与扩展阅读"><a href="#参考资料与扩展阅读" class="headerlink" title="参考资料与扩展阅读"></a>参考资料与扩展阅读</h2><p><strong>横切关注点</strong>：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">WIKI：面向切面的程序设计</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9" target="_blank" rel="noopener">横切关注点</a></li><li><a href="https://en.wikipedia.org/wiki/Cross-cutting_concern" target="_blank" rel="noopener">Cross-cutting concern</a></li><li><a href="https://stackoverflow.com/questions/23700540/cross-cutting-concern-example" target="_blank" rel="noopener">Cross cutting concern example</a></li></ul><p><strong>依赖注入</strong>：</p><ul><li><a href="https://blog.tonyseek.com/post/notes-about-ioc-and-di/" target="_blank" rel="noopener">控制反转 (IoC) 和依赖注入 (DI)</a></li></ul><p><strong>面向协议编程</strong>：</p><ul><li><a href="https://onevcat.com/2016/11/pop-cocoa-1/" target="_blank" rel="noopener">面向协议编程与 Cocoa 的邂逅 (上)</a></li></ul>]]></content>
    
    <summary type="html">
    
      什么是横切关注点？
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="面向对象" scheme="http://jalan.space/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象困境之 —— 菱形缺陷</title>
    <link href="http://jalan.space/2019/07/29/2019/oo-diamond-problem/"/>
    <id>http://jalan.space/2019/07/29/2019/oo-diamond-problem/</id>
    <published>2019-07-29T15:03:00.000Z</published>
    <updated>2019-08-01T14:36:33.101Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 C++ 是支持 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a>（multiple inheritance）的，即一个类可以同时从多于一个父类继承行为与特征。</p><p>而现在大多数现代编程语言对 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 避而远之，例如 PHP 、Swift、Java 都是不支持 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 的。因为多重继承增加了程序的复杂性和含糊性，例如容易导致<strong>菱形缺陷</strong>（Diamond Problem）。</p><h2 id="什么是菱形缺陷？"><a href="#什么是菱形缺陷？" class="headerlink" title="什么是菱形缺陷？"></a>什么是菱形缺陷？</h2><p>假设我们有一个基类 A，子类 B 和 C 都重写了 A 中的方法 <code>test()</code>。此时又有一个 D 类，同时继承了 B 和 C，那么当 D 调用 <code>test()</code> 时，继承的是哪个父类的方法呢？</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="function"><span class="keyword">new</span> <span class="title">D</span>()</span></span><br><span class="line"><span class="function"><span class="comment">// 这里的 test 是哪个父类的方法？</span></span></span><br><span class="line"><span class="function"><span class="title">d</span>.<span class="title">test</span>()</span></span><br></pre></td></tr></table></figure><p>如果没有给出进一步的说明，编译器是无法给出答案的。</p><p><img src="/img/in-post/oo/multiple-inheritance-diamond.png" alt="类 A、B、C、D 的继承关系"></p><p>这个继承关系画出来就像一个菱形，所以这一问题也被称为<strong>菱形缺陷</strong>或<strong>钻石问题</strong>。💎</p><h2 id="避而远之-——-使用接口"><a href="#避而远之-——-使用接口" class="headerlink" title="避而远之 —— 使用接口"></a>避而远之 —— 使用接口</h2><p>想要实现 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 的功能，又想避免菱形问题？那就使用接口（Interface）吧！这是不支持 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 的编程语言给出的方案。</p><p>使用接口，我们可以指定某个类必须实现哪些方法，但不需要在接口中定义这些方法的具体内容。一个类无论实现几个接口，<strong>最终调用的都只有一个实现</strong>。</p><p>用 PHP 举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">b</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">a</span>, <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最终调用的都是这个实现</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'c'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迎难而上-——-我用-Python"><a href="#迎难而上-——-我用-Python" class="headerlink" title="迎难而上 —— 我用 Python"></a>迎难而上 —— 我用 Python</h2><p>虽然很多现代编程语言对 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 都避而远之，但 Python 依然是支持 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 的。Python 对菱形问题的处理得益于<strong>方法解析顺序</strong>（Method Resolution Order，MRO）。</p><p>上面一节中我们提到的例子若在 Python3 中运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"test A"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"test B"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"test C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.test() <span class="comment"># 此时输出 test B</span></span><br></pre></td></tr></table></figure><p>对于只支持单继承的语言来说，MRO 一般比较简单。而对于 Python 这种支持 <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener">多重继承</a> 的语言来说，MRO 就复杂很多。</p><p>在此对 MRO 不多做赘述，感兴趣的同学可以移步阅读：</p><ul><li><a href="https://makina-corpus.com/blog/metier/2014/python-tutorial-understanding-python-mro-class-search-path" target="_blank" rel="noopener">Python Tutorial: Understanding Python MRO - Class search path</a></li><li><a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">The Python 2.3 Method Resolution Order</a></li></ul><h2 id="参考资料与扩展阅读"><a href="#参考资料与扩展阅读" class="headerlink" title="参考资料与扩展阅读"></a>参考资料与扩展阅读</h2><ul><li><a href="https://www.python-course.eu/python3_multiple_inheritance.php" target="_blank" rel="noopener">Python：Multiple Inheritance</a></li><li><a href="https://www.zhihu.com/question/24317891" target="_blank" rel="noopener">Java 为什么不支持多继承？</a></li><li><a href="https://zhuanlan.zhihu.com/p/43204317" target="_blank" rel="noopener">python 多重继承的事</a></li><li><a href="https://hanjianwei.com/2013/07/25/python-mro/" target="_blank" rel="noopener">Python的方法解析顺序(MRO)</a></li></ul>]]></content>
    
    <summary type="html">
    
      多重继承困难重重
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="面向对象" scheme="http://jalan.space/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>病中胡思</title>
    <link href="http://jalan.space/2019/07/22/2019/fall-ill/"/>
    <id>http://jalan.space/2019/07/22/2019/fall-ill/</id>
    <published>2019-07-22T11:33:00.000Z</published>
    <updated>2019-07-22T12:14:10.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>夏天<br>如果这条街没有鞋匠<br>我就打赤脚<br>站到太阳下看太阳<br>我想到在白天出生的孩子<br>一定是出于故意<br>你来人间一趟<br>你要看看太阳<br>和你的心上人<br>一起走在街上<br>—— 海子 《夏天的太阳》</p></blockquote><p>今天去诊所看病，医生问我是哪里人，我愣了一下，最终脱口而出的还是「厦门」。</p><p>其实我早就不属于那里了，但我不知道自己属于哪里。我能融入这座城市早晚高峰拥挤的人群，却终究无法在这片土地扎根 —— 无论在何处我都只是一抹浮萍罢了。</p><p>时间好快，衣服换了一件又一件，头发剃了一茬又一茬，猫儿也长大了。时间又好慢，每天压抑着过，忙碌又慌张，在梦里我还在那条街上。</p><p>那条街上海风绵绵，灯火万家，连我也会闪闪发光。</p><p>可我成了违背誓约的逃兵，只得次次如梦，次次惊醒。梦里腥咸味的海风，梦醒时还挂在脸上。</p><p>没有「余生多指教」，亦没有「一生还太长」。我来人间一趟，不知要看怎样的太阳。</p><p>人生很短，这病还很长。</p>]]></content>
    
    <summary type="html">
    
      人生很短，这病还很长
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>Cookie Cutter？—— ReplicationController 中的 Pod 模板</title>
    <link href="http://jalan.space/2019/07/21/2019/k8s-repication-controller-cookie-cutter/"/>
    <id>http://jalan.space/2019/07/21/2019/k8s-repication-controller-cookie-cutter/</id>
    <published>2019-07-21T08:46:00.000Z</published>
    <updated>2019-07-21T09:02:46.678Z</updated>
    
    <content type="html"><![CDATA[<p>今天在《Kubernetes In Action》中看到：</p><blockquote><p>在创建 Pod 后，ReplicationController 也不关心其 pod 的实际“内容”（容器镜像、环境变量及其他）。因此，该模板仅影响此 ReplicationController 创建的新 pod。可以将其视为创建新 pod 的曲奇切模（cookie cutter）。</p></blockquote><p>看到这里，我有点好奇「曲奇切模（cookie cutter）」是个啥东西，于是去 Google 了一下，发现其实真的就是个饼干模具：</p><p><img src="/img/in-post/cookie-cutter.png" alt="Cookie Cutter"></p><p>后续想想，这样的比喻真的非常有趣：</p><blockquote><p>ReplicationController 的 pod 模板可以随时修改。更改 pod 就像用一个曲奇刀替换另一个。它只会影响你之后切出的曲奇，并且不会影响你已经剪切的曲奇。</p></blockquote><p>一个 ReplicationController 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="comment"># 这里定义的就是 cookie cutter</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>如果你想切出不一样的饼干，更换模具即可，至于之前已经做好的饼干，你也无法改变了。</p><p>就像你曾经走过的路啊，终究会是你人生的烙印。</p>]]></content>
    
    <summary type="html">
    
      已经做好的饼干你已无法改变
    
    </summary>
    
      <category term="云原生应用" scheme="http://jalan.space/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Kubernetes" scheme="http://jalan.space/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>从经典算法题看时间复杂度</title>
    <link href="http://jalan.space/2019/07/13/2019/time-complexity/"/>
    <id>http://jalan.space/2019/07/13/2019/time-complexity/</id>
    <published>2019-07-13T13:45:00.000Z</published>
    <updated>2019-07-15T13:36:16.330Z</updated>
    
    <content type="html"><![CDATA[<p>今天又有做题的同学在 LeetCode 的题解中问我解法的复杂度是多少。然而作为一个懒人，我一直在「逃避」这个问题，毕竟这东西听起来就这么「复杂」。</p><p>但本着对题解认真负责的态度（心虚），我想趁此机会做一个总结。下面我将通过一些较为经典的算法题聊一聊几种常见的时间复杂度。</p><h2 id="什么是时间复杂度？"><a href="#什么是时间复杂度？" class="headerlink" title="什么是时间复杂度？"></a>什么是时间复杂度？</h2><p>算法的<strong>时间复杂度</strong>（Time complexity）是一个<strong>函数</strong>，用于定性描述算法的运行时间。</p><p>提出时间复杂度的目的是：<em>分析与比较完成同一个任务而设计的不同算法</em>。</p><blockquote><p>分析算法的结果意味着算法需要的资源，虽然有时我们关心像内存，通信带宽或者计算机硬件这类资源，但是通常我们想要度量的是计算时间。一般来说，通过分析求解某个问题的几种候选算法，我们可以选出一种最有效的算法。这种分析可能指出不止一个可行的候选算法，但是在这个过程中，我们往往可以抛弃几个较差的算法。<br>——《算法导论》</p></blockquote><h3 id="大-O-符号"><a href="#大-O-符号" class="headerlink" title="大 O 符号"></a>大 O 符号</h3><p>时间复杂度通常用 <a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="noopener">大 O 符号</a>（Big O notation）表示。<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="noopener">大 O 符号</a> 又被称为<strong>渐近符号</strong>，是用于描述函数 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90" target="_blank" rel="noopener">渐近行为</a>。</p><p>举个例子，假设我们解决一个规模为 n 的问题要花费的时间为 $T(n)$：</p><p>$$T(n) = 4n^2 - 2n + 2$$</p><p>当 n 不断增大时，$n^2$ 开始占据主导地位，而其他各项可以被忽略，写作 $T(n) = O(n^2)$。因此时间复杂度可被称为是 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90" target="_blank" rel="noopener">渐近</a> 的。</p><h2 id="常见复杂度比较"><a href="#常见复杂度比较" class="headerlink" title="常见复杂度比较"></a>常见复杂度比较</h2><p><img src="/img/in-post/big-o.png" alt="常见时间复杂度比较"></p><h2 id="常数时间"><a href="#常数时间" class="headerlink" title="常数时间"></a>常数时间</h2><p>若算法 $T(n)$ 的上界与输入大小无关，则称它具有<strong>常数时间</strong>，记作 $T(n) = O(1)$。</p><p>常见的例子有：</p><ul><li>访问数组中的单个元素</li><li>哈希表</li></ul><h3 id="别被循环所迷惑"><a href="#别被循环所迷惑" class="headerlink" title="别被循环所迷惑"></a>别被循环所迷惑</h3><p>例如这道题 <a href="https://leetcode-cn.com/problems/valid-sudoku/" target="_blank" rel="noopener">有效的数独</a>，需要在 9x9 的格子中判断数独是否有效。</p><p>思路：把行、列和小正方形区域出现的数字用哈希表记录下来，在遍历过程中只要判断数字是否在这三个范围出现过就行了，如果出现过就返回 <code>False</code>。</p><p>题解如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        row = [&#123;&#125; <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">        col = [&#123;&#125; <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">        area = [&#123;&#125; <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">        area_index_dict = &#123;</span><br><span class="line">            <span class="number">0</span>: &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;,</span><br><span class="line">            <span class="number">1</span>: &#123;<span class="number">0</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">4</span>, <span class="number">2</span>: <span class="number">5</span>&#125;,</span><br><span class="line">            <span class="number">2</span>: &#123;<span class="number">0</span>: <span class="number">6</span>, <span class="number">1</span>: <span class="number">7</span>, <span class="number">2</span>: <span class="number">8</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                num = board[i][j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> num == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 行判断</span></span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> row[i]:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'row='</span>, num</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    row[i][num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 列判断</span></span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> col[j]:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'col='</span>, num</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    col[j][num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 小正方形的区域判断</span></span><br><span class="line">                area_index = area_index_dict[i//<span class="number">3</span>][j//<span class="number">3</span>]</span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> area[area_index]:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'area_index='</span>, area_index</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'area='</span>, num</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    area[area_index][num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>我们可以看到，虽然题解中用到了如下循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">        <span class="comment"># coding</span></span><br></pre></td></tr></table></figure><p>但由于复杂度始终是 $O(9\times9)$，加上使用哈希表来判断元素是否存在，所以算法的复杂度始为 $O(1)$。</p><h2 id="对数时间"><a href="#对数时间" class="headerlink" title="对数时间"></a>对数时间</h2><p>若 $T(n) = O(logn)$，则称其具有<strong>对数时间</strong>。</p><p>常见例子：</p><ul><li>二叉树相关操作</li><li>二分查找</li></ul><h3 id="为什么是-logn？"><a href="#为什么是-logn？" class="headerlink" title="为什么是 logn？"></a>为什么是 logn？</h3><h4 id="什么是对数？"><a href="#什么是对数？" class="headerlink" title="什么是对数？"></a>什么是对数？</h4><p>首先，我们复习一下 <a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E6%95%B0" target="_blank" rel="noopener">对数</a>。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E6%95%B0" target="_blank" rel="noopener">对数</a> 是幂运算的逆运算。假如 $x = β^y$，那么就有 $y = log_βx$。其中：</p><ul><li>$β$ 是对数的底（基底）</li><li>$y$ 就是 $x$（对于底数 $β$）的对数</li></ul><p>那我们说一个算法的复杂度是 $O(logn)$，那么 $logn$ 这个对数的底数去哪了？</p><h4 id="换底公式"><a href="#换底公式" class="headerlink" title="换底公式"></a>换底公式</h4><p>来看一下 <a href="https://baike.baidu.com/item/%E6%8D%A2%E5%BA%95%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">换底公式</a>：</p><p>$$log_ab = \frac{log_cb}{log_ca}$$</p><p>假设两个算法复杂度分别为 $O(log_an)$ 和 $O(log_bn)$，基于 <a href="https://baike.baidu.com/item/%E6%8D%A2%E5%BA%95%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">换底公式</a> 可以得到：</p><p>$$log_an = \frac{log_cn}{log_ca}$$</p><p>$$log_bn = \frac{log_cn}{log_cb}$$</p><p>对于 $O(log_an)$ 和 $O(log_bn)$ 来说，<strong>只有一个常数因子的不同</strong>。在大 O 记法中我们<strong>丢弃该因子</strong>（忽略常数），因此无论对数的底是多少，我们将对数时间都记作 $O(logn)$。</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>对数时间最典型的算法应该就是二分查找了。例如这道题 <a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">搜索插入位置</a>。</p><p>二分查找的基本思想：将查找的键和子数组的中间键作比较：</p><ul><li>如果被查找的键小于中间键，就在左子数组继续查找</li><li>如果大于中间键，就在右子数组中查找</li><li>否则中间键就是要找的元素</li></ul><p>因此，对于 n 个元素的情况：</p><ul><li>第 1 次二分剩下元素 $\frac{n}{2}$</li><li>第 2 次二分剩下元素 $\frac{n}{4}$</li><li>……</li><li>第 m 次二分剩下元素：$\frac{n}{2^m}$</li></ul><p>在最坏情况下，是在排除到只剩下最后一个值之后得到结果，即：</p><p>$$\frac{n}{2^m} = 1$$</p><p>由此可得：</p><p>$$2^m = n$$</p><p>进而求出复杂度为 $log_2(n)$。又因为我们在大 O 记法中忽略底数 2，因此复杂度就是 $O(logn)$ 啦~</p><h2 id="线性时间"><a href="#线性时间" class="headerlink" title="线性时间"></a>线性时间</h2><p>如果一个算法的时间复杂度为 $O(n)$，则称这个算法具有<strong>线性时间</strong>。随着样本数量的增加，复杂度也随之线性增加。常表现为<strong>单层循环</strong>。</p><p>来看一到例题 <a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">求众数</a>。这里我们用了摩尔投票法，时间复杂度为 $O(n)$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        major = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                major = n</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> n == major:</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = count - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> major</span><br></pre></td></tr></table></figure><h2 id="线性对数（准线性）时间"><a href="#线性对数（准线性）时间" class="headerlink" title="线性对数（准线性）时间"></a>线性对数（准线性）时间</h2><p>若算法复杂度为 $T(n) = O(nlogn)$，则称这个算法具有<strong>线性对数时间</strong>。可以理解为执行了 n 次对数时间复杂度的操作。</p><p>有几种排序算法的平均时间复杂度都是线性对数时间，例如：</p><ul><li><a href="http://jalan.space/interview/algorithm/base/sort/heap-sort.html">堆排序</a>：<a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">前 K 个高频元素</a></li><li><a href="http://jalan.space/interview/algorithm/base/sort/quick-sort.html">快速排序</a>：<a href="https://leetcode-cn.com/problems/sort-colors/description/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener">颜色分类</a></li><li><a href="http://jalan.space/interview/algorithm/base/sort/merge-sort.html">归并排序</a></li></ul><h2 id="二次时间"><a href="#二次时间" class="headerlink" title="二次时间"></a>二次时间</h2><p>若算法复杂度为 $T(n) = O(n^2)$，则称这个算法具有<strong>二次时间</strong>，即时间复杂度随着样本数量的增加呈平方数增长。常表现为<strong>双层循环</strong>。</p><p>常见的算法中有一写比较慢的排序算法，例如：</p><ul><li><a href="http://jalan.space/interview/algorithm/base/sort/bubble-sort.html">冒泡排序</a></li><li>选择排序</li><li>插入排序</li></ul><hr><p>由于涉及的排序算法很多，若一一讲解的话就偏离这篇文章的侧重点了。如果大家对各类算法感兴趣可以参考：<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">维基百科：排序算法</a>。</p><h2 id="参考资料及扩展阅读"><a href="#参考资料及扩展阅读" class="headerlink" title="参考资料及扩展阅读"></a>参考资料及扩展阅读</h2><ul><li><a href="https://www.hackerearth.com/zh/practice/basic-programming/complexity-analysis/time-and-space-complexity/tutorial/" target="_blank" rel="noopener">Time and Space Complexity</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank" rel="noopener">维基百科：时间复杂度</a></li><li><a href="https://www.zhihu.com/question/21387264" target="_blank" rel="noopener">知乎：如何理解算法时间复杂度的表示法，例如 O(n²)、O(n)、O(1)、O(nlogn) 等？</a></li></ul><hr><p>现在类似哈希表的题目做多了，再想起高一时燕林段长讲的关于「早操散场分开走，空间换时间」的梗觉得相当有趣。当时还只在乎年级排名的我没有想过将来会步入互联网行业，会喜欢上这个光怪陆离的世界。</p><p><strong>算法是生活中的大智慧，而我们都是智慧的受益者。</strong></p>]]></content>
    
    <summary type="html">
    
      「复杂度」其实一点也不复杂
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="算法" scheme="http://jalan.space/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【译】Kubernetes 儿童插图指南</title>
    <link href="http://jalan.space/2019/07/03/2019/translate-the-childrens-illustrated-guide-to-kubernetes/"/>
    <id>http://jalan.space/2019/07/03/2019/translate-the-childrens-illustrated-guide-to-kubernetes/</id>
    <published>2019-07-03T14:07:00.000Z</published>
    <updated>2019-07-03T14:08:03.380Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://www.cncf.io/the-childrens-illustrated-guide-to-kubernetes/" target="_blank" rel="noopener">The Illustrated Children’s Guide to Kubernetes</a></li><li>原文作者：<a href="https://www.cncf.io" target="_blank" rel="noopener">CLOUD NATIVE COMPUTING FOUNDATION</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/the-childrens-illustrated-guide-to-kubernetes.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/TODO1/the-childrens-illustrated-guide-to-kubernetes.md</a></li><li>译者：<a href="http://jalan.space">江五渣</a></li><li>校对者：<a href="https://github.com/mymmon" target="_blank" rel="noopener">mymmon</a>，<a href="https://github.com/csming1995" target="_blank" rel="noopener">csming1995</a></li></ul></blockquote><h1 id="Kubernetes-儿童插图指南"><a href="#Kubernetes-儿童插图指南" class="headerlink" title="Kubernetes 儿童插图指南"></a>Kubernetes 儿童插图指南</h1><p><img src="https://www.cncf.io/wp-content/uploads/2018/12/page1.png" alt=""></p><p><img src="https://www.cncf.io/wp-content/uploads/2018/12/The-Illustrated-Childrens-Guide-to-Kubernetes-Book-Files-Sept-2018-CNCF-1024x791.jpg" alt=""></p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-1.png" alt=""></p><p><strong>献给所有试图向孩子们解释软件工程的家长。</strong></p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-3.png" alt=""></p><p>很久很久以前，有一个叫 Phippy 的应用程序。她是一个简单的应用程序，由 PHP 编写且只有一个页面。她住在一个需要和其他可怕的应用程序分享环境的主机中，她不认识这些应用程序并且不愿意和他们来往。她希望她能拥有一个属于自己的环境：只有她自己和她可以称之为家的 Web 服务器。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-2.png" alt=""></p><p>每个应用程序都有个运行所依赖的环境。对于 PHP 应用程序来说，这个环境可能包括 Web 服务器，一个可读文件系统和 PHP 引擎本身。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-4.png" alt=""></p><p>有一天，一只善良的鲸鱼出现了。他建议小 Phippy 住在容器里，这样可能会更快乐。所以应用程序 Phippy 迁移到了容器中。这个容器很棒，但是……它有点像一个漂浮在大海中央的豪华起居室。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-3.png" alt=""></p><p>容器提供了一个独立的环境，应用程序可以在这个环境中运行。但是这些孤立的容器常常需要被管理并与外面的世界连接。对于孤立的容器而言，共享文件系统、网络通信、调度、负载均衡和分发都是要面对的挑战。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-5.png" alt=""></p><p>鲸鱼耸了耸肩。“对不起，孩子。”他说着，消失在海面下。就在 Phippy 甚至开始绝望时，一位驾驶着巨轮的船长出现在海平线上。这艘船由几十个绑在一起的木筏组成，但从外面来看，它就像一艘巨轮。</p><p>“你好呀，这位 PHP 应用程序朋友。我是 Kube 船长。”睿智的老船长说。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-4.png" alt=""></p><p>“Kubernetes” 在希腊语中是船长的意思。我们可以从这个单词中得到 <strong>Cybernetic</strong> 和 <strong>Gubernatorial</strong> 这两个词组。Kubernetes 项目专注于构建一个健壮的平台，用于在生产环境中运行数千个容器。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-6.png" alt=""></p><p>“我是 Phippy。”小应用程序说。</p><p>“很高兴认识你。”船长一边说，一边在她身上贴上了一张标有姓名的标签。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-5.png" alt=""></p><p>Kubernetes 使用标签作为“名牌”来标识事物。它可以根据这些标签进行查询。标签是开放性的：你可以用他们来表示角色、稳定性或其他重要的属性。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-7.png" alt=""></p><p>船长建议应用程序把她的容器搬到船上的一个船舱中。Phippy 很高兴地把她的容器搬到 Kube 船长巨轮的船舱内。Phippy 觉得这里像家一样。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-6.png" alt=""></p><p>在 Kubernetes 中，Pod 代表一个可运行的工作单元。通常，你会在 Pod 中运行一个容器。但是对于一些容器紧密耦合的情况，你可以选择在同一个 Pod 中运行多个容器。Kubernetes 负责将你的 Pod 和网络以及 Kubernetes 的其余环境相连。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-8.png" alt=""></p><p>Phippy 有一些不同寻常的兴趣，她很喜欢遗传学和绵羊。所以她问船长：“如果我想克隆我自己，是否可以根据需求克隆任意次数呢？”</p><p>“这很容易。”船长说。船长把 Phippy 介绍给了 Replication Controller。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-7.png" alt=""></p><p>Replication Controller 提供一种管理任意数量 Pod 的方法。一个 Replication Controller 包含一个 Pod 模板，该模板可以被复制任意次数。通过 Replication Controller，Kubernetes 将管理 Pod 的生命周期，包括伸缩、滚动更新和监控。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-9.png" alt=""></p><p>无数个日夜，小应用程序在她的船舱中与她的复制品相处十分愉快。但与自己为伍并没有所说的那么好……即使你拥有 N 个自己的克隆体。</p><p>Kube 船长慈祥地笑了笑：“我正好有一样东西。”</p><p>他刚开口，在 Phippy 的 Replication Controller 和船的其他部分之间打开了一条隧道。Kube 船长笑着说：“即使你的复制品来了又去，这条隧道始终会留在这里，你可以通过它发现其他 Pod，其他 Pod 也可以发现你！”</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-8.png" alt=""></p><p>服务告知 Kubernetes 环境的其余部分（包括其他 Pod 和 Replication Controller）你的应用程序包含了哪些服务，当 Pod 来来往往，服务的 IP 地址和端口始终保持不变。其他应用程序可以通过 Kurbenetes 服务发现找到你的服务。</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-illustration-10.png" alt=""></p><p>多亏了这些服务，Phippy 开始探索船的其他部分。不久之后，Phippy 遇到了 Goldie。他们成了最好的朋友。有一天，Goldie 做了一件不同寻常的事。她送给 Phippy 一件礼物。Phippy 看了礼物一眼，悲伤的泪水夺眶而出。</p><p>“你为什么这么伤心呢？”Goldie 问道。</p><p>“我喜欢这个礼物，但我没有地方可以放它！”Phippy 抽噎道。</p><p>但 Goldie 知道该怎么做。“为什么不把它放入卷中呢？”</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-9.png" alt=""></p><p>卷表示容器可以访问和存储信息的位置。对于应用程序，卷显示为本地文件系统的一部分。但卷可以由本地存储、Ceph、Gluster、持久性块存储，以及其他存储后端支持。</p><p>Phippy 喜欢在 Kube 船长的船上生活，她很享受来自新朋友的陪伴（Goldie 的每个克隆人都同样令人愉悦）。但是，当她回想起在可怕的主机度过的日子，她想知道她是否也可以拥有一点自己的隐私。</p><p>“这听起来像是你所需要的，”Kube 船长说，“这是一个命名空间。”</p><p><img src="https://web.archive.org/web/20171108051103im_/https://deis.com/images/blog-images/kubernetes-illustrated-guide-diagram-10.png" alt=""></p><p>命名空间是 Kubernetes 内部的分组机制。服务、Pod、Replication Controller 和卷可以在命名空间内部轻松协作，但命名空间提供了与集群其他部分一定程度的隔离。</p><p>Phippy 与她的新朋友一起乘坐 Kube 船长的巨轮航行于大海之上。她经历了许多伟大的冒险，但最重要的是，Phippy 找到了自己的家。</p><p>所以 Phippy 从此过上了幸福的生活。</p><p><img src="https://www.cncf.io/wp-content/uploads/2019/01/back-1024x787.jpg" alt=""></p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      用通俗易懂的小故事解释什么是 Kubernetes
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>2019 半年小结</title>
    <link href="http://jalan.space/2019/06/29/2019/half-year/"/>
    <id>http://jalan.space/2019/06/29/2019/half-year/</id>
    <published>2019-06-29T03:00:00.000Z</published>
    <updated>2019-06-29T12:55:38.030Z</updated>
    
    <content type="html"><![CDATA[<p>上个月在阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2019/05/weekly-issue-54.html" target="_blank" rel="noopener">《每周分享第 54 期》</a> 看到：</p><blockquote><p>能够获得暴利的职业，都有一个共同特点：可扩展性（scaling），一次劳动可以服务成千上万的人。<br>软件、电影、游戏行业都具有可扩展性，作品的生产成本是固定的，但可以被消费无数次，所以有巨大的获利空间，创造出许许多多的富豪。另一方面，理发师、厨师、出租车司机一次劳动，只能服务少数几个人，就不具有可扩展性，很难获得暴利，生存得很辛苦。<br>最近，我读到美国一个风险投资家的文章。他说了一句发人深思的话：<br>「写作是最具可扩展性的活动。你呆在家里，不去参加活动/会议，只是在网上写下自己的想法，然后你就具有了最好的可扩展性。」<br>我想了一下，还真是这样。你写了一篇文章，想让其他人看到，只要到处张贴就行了。每次转贴，就是扩展了一次。这比其他产品的扩展容易多了。面包师傅想要更多的人尝到自己的面包，只能多开面包店；网站要扩展，只能购买更多的服务器。相比之下，文字的扩展简直是零成本。<br>大公司每年花费数十亿美元用于广告，以求人们关注他们的产品。但是，一个好的作家可以免费获得这种扩展性。这就是为什么你应该把自己的想法写下来的原因，这么好的免费传播渠道，为什么不用呢？你以为，写下来不会有人看。错，其实是有人会看到的，如果他们觉得有价值，就会帮你传播出去。</p></blockquote><p>从 2015 年 10 月 27 日至今，转眼写博客已经快 4 年了。4 年前的我还在 <a href="https://www.w2fzu.com/" target="_blank" rel="noopener">西二在线</a> 工作室熬夜打码，如今已经辗转两个城市，在深圳的工地搬砖流汗。这 4 年我在写博客的过程中逐渐养成了不断学习、及时总结的习惯，感谢 4 年前的自己做出了这个选择。</p><p>诚如阮老师所写：<strong>写作是最具可扩展性的活动</strong>。在互联网世界留下足迹、打造属于自己的名片是再棒不过的事了！我会好好写下去的！</p><p>不知不觉 2019 年的上半年又要过去了，在这半年我换了城市，换了工作，从厦门来到深圳，从孤单变得更加孤单。</p><p>老规矩，先总结，再立 flag。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><blockquote><p>深圳是一场丢盔弃甲的逃亡。</p></blockquote><h3 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h3><p><img src="/img/in-post/2019-half-year/run.jpeg" alt=""></p><blockquote><p>2016.7.11-2019.02.22，从实习到现在，说没有不舍是不可能的。<br>不是团队不好，是我的初心变了。曾经也是一腔热血，眼里有光，但总有燃烧殆尽的时候。我在这座城市怕是再也不会发光了。<br>思考了很久，我还是决定给自己一个一切从零开始的机会，去完全陌生的城市，一步一步重建自己的工作和生活。今天从8号楼走出来长舒了一口气，好像好几个月都没睡个好觉了，今晚终于可以安心了。<br>从美图毕业啦，虽然还是一样的幼稚，虽然最终也没能成为想要成为的人。感谢这座城市给予我爱和被爱的机会，感谢遇到的所有人！愿公司越来越好！<br>再见，我要去拥抱更大的世界了。</p></blockquote><p>离职前的一周一直在吃散伙饭，和同事、朋友。在一句句「祝你深圳顺利」中装作一副很开心的样子。</p><p>走的当天还是给一些业务上有接触的同事发了私信，留了自己的联系方式，蹭了一大波好友。</p><p>点了一首 <a href="http://music.163.com/#/m/song?id=26427666" target="_blank" rel="noopener">《我说今晚月光那么美,你说是的》</a> 作为午休的起床歌。原本蹭不上周五的车，前台小姐姐知道我要离职后立马给我安排了，十分感谢。</p><p>发了 MP3 文件过去后小姐姐说听着好伤感。我说是啊，因为我要给自己送行嘛。</p><p>给我办离职手续的人事还是给我办入职手续的那个。离职卡片上写着：</p><blockquote><p>祝前程似锦，也别忘了常回家看看。</p></blockquote><p>收拾书包的时候小心翼翼地也把工位牌收好了，上边写的还是「江佳扬 —— Web &amp; 大数据事业部」，带着当年的坚毅和彷徨，仿佛从 2016 夏天到现在的所有时光都未曾变过。</p><p>想起走时蓝总对我说的：感谢你为公司做的贡献。原来我早已忘记我的初心了。</p><h3 id="关于裸辞"><a href="#关于裸辞" class="headerlink" title="关于裸辞"></a>关于裸辞</h3><p><img src="/img/in-post/2019-half-year/hongkong.jpeg" alt="香港"></p><p>人生第一次有了裸辞的经历。</p><p>在离职前很多人劝我不要这么冲动，谢谢当时所有朋友给的建议。然而过年后回厦门的时候和家里吵了一架，上班第一天领完开门红就跟 Leader 说了离职的事。那天还正好在即刻刷到「老板给我发红包，我给老板送辞呈」的段子。</p><p>裸辞后的第一感觉就是<strong>爽</strong>，不上班当然爽啦。先到深圳租了房子，然后花了一周的时间在家收拾行李，准备搬家。来了深圳后先去香港浪了一圈，后续一周宅在家里混吃等死。一周没有看任何招聘信息，没有准备任何面试资料，不看任何技术相关的东西。</p><p>决定来深圳后其实给自己定了两个目标：</p><ol><li>走出情绪阴影。以自己的情绪为主，什么开心就做什么。</li><li>找工作。</li></ol><p>对我来说，<strong>找工作</strong>其实是靠后排的，找不找无所谓，找什么样的无所谓，什么时候能入职也无所谓，自己开心就好。</p><p>虽然话是这样说，但一周过后我开始不可避免地焦虑了起来……</p><p>看着卡上的钱渐渐减少，我逐渐意识到自己需要恰饭的问题。</p><p>可能很多人裸辞之前都满怀信心吧，觉得劳资干的不爽走就是了，反正下家有的是。但是在家里躺了一周以后发现自己和社会信息脱轨，面对朋友、家人的催促，开始变得焦虑起来。所以，如果还有退路，我建议最好不要裸辞，「骑驴找马」是最好的选择，「时时有选择，处处有回转」才是人生最好的状态。</p><p>当然了，我也一点也不后悔这次「丢盔弃甲」的逃亡，毕竟<strong>试错是年轻人独有的浪漫</strong>。</p><h3 id="求职"><a href="#求职" class="headerlink" title="求职"></a>求职</h3><p>一句话：<strong>荆棘满地，尽是波折</strong>。</p><p>从一开始天南地北地瞎投瞎面，到最后到深圳针对性地到场面试，整个过程受到了不少挫折，也让我直面了自己地<strong>弱</strong>和<strong>菜</strong>。被问及一些问题时才发现在学校里学地东西很多都还给老师了，还有很多可能直接被我翘课翘掉了……为了恰饭，我制定了全面复习计划：</p><ul><li>算法与数据结构：刷《剑指 Offer》和 LeetCode</li><li>计算机网络：x 层协议以及常见协议的特点</li><li>数据库<ul><li>MySQL 的底层原理和 SQL 语句编写</li><li>Redis 的底层实现</li></ul></li><li>操作系统：包括进程、线程、死锁、内存管理等</li><li>Linux：基本命令</li><li>容器化：Docker</li><li>面向对象：主流设计模式</li><li>系统设计：RESTful API 的规范</li><li>编程语言：PHP7 的新特性、框架原理、常用函数等</li><li>安全：常见攻击手段和防御方法</li><li>……</li></ul><p>在这个过程中简单整理了一份 <a href="http://jalan.space/interview/">服务端面试常见问题收录</a>，但是入职以后也没有在维护了（羞愧脸……</p><p>不过做算法题的习惯一直保持到了现在，相信未来的我也会感谢此时自己的选择吧。</p><h3 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h3><p>入职至今已经快 3 个月了，这 3 个月学习使用 <a href="https://lumen.laravel.com/" target="_blank" rel="noopener">Lumen</a> 框架、践行微服务架构、深入探究 RESTful、构建崭新的应用程序、参与团队分享与代码 review，逐渐成为了一个代码洁癖狂，也逐渐在代码中找到了简单朴实的乐趣。</p><p>没有历史包袱的团队真的太赞了，什么都是新的开始，什么都能从头来过。未来的方向也很明确了，除了业务上的开发，也会往微服务架构方面深入研究探索，包括 DevOps 的整合。没有加班的生活也给了我更多的个人时间学习感兴趣的东西。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="算法精进"><a href="#算法精进" class="headerlink" title="算法精进"></a>算法精进</h3><p><img src="/img/in-post/2019-half-year/leetcode-commit.png" alt="LeetCode 提交记录"></p><p>养成了每天一道算法题的习惯。</p><ul><li>完成题目 <strong>219</strong> 题</li><li>参与竞赛 <strong>12</strong> 次</li><li>获得 <strong>3</strong> 次精选题解</li><li><a href="http://jalan.space/leetcode-notebook">LeetCode 题解</a> 每日更新，持续维护中</li></ul><h3 id="社交平台-GitHub"><a href="#社交平台-GitHub" class="headerlink" title="社交平台 GitHub"></a>社交平台 GitHub</h3><p><img src="/img/in-post/2019-half-year/github-commit.png" alt="GitHub 提交记录"></p><p>卸载了微博和抖音，养成了逛 GitHub 的好习惯。开始每天关注自己的 PR 有没有人回复，提交的 issue 有没有新的进展，或是 star 一些赞赞的项目，再期待一下有没有得到新的小星星。</p><h3 id="英语水平提升"><a href="#英语水平提升" class="headerlink" title="英语水平提升"></a>英语水平提升</h3><p><strong>英语水平是程序员的巨大瓶颈</strong>。</p><p>技术圈最新的一手咨询基本都来自国外，而中文咨询的更新速度特别慢。很多技术的官方文档也都是英文的，想要获得这些技术的正确使用姿势，有时不得不硬着头皮看下去。如果英文水平好些，那真的太轻松了，想想都开心！</p><p>于是在近 2 个月开始关注自己的英文水平，每周至少阅读一篇英文技术文章，也开始了通勤时间背单词的任务。一开始怕自己的英文水平不够，不敢直接参加 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>，而是先开通自己的 <a href="http://jalan.space/weekly-translation/">每周翻译计划</a>。大约翻译了一个月左右被 <a href="http://csming1995.github.io/" target="_blank" rel="noopener">csming</a> 带入掘金，感恩！</p><p>这里要重点安利一下 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>，确实是一个非常好的平台，之前看自己筛选英文技术文章时往往会比较迷茫，不知道即将阅读的文章质量如何。而 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 把高质量的文章都筛选好了，就等你来翻译和校对啦！每篇文章会根据所属方向打上对应的标签，在阅读前你就可以知道这是一篇关于 xx 方向的优质文章。</p><h3 id="一些小成就"><a href="#一些小成就" class="headerlink" title="一些小成就"></a>一些小成就</h3><ul><li>开通了知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，和 <a href="http://jalan.space/cat">薯条</a> 的两位干爹在一起维护。大家如果有优秀的文章也欢迎投稿~</li><li>维护自己的 <a href="http://jalan.space/leetcode-notebook/#/">LeetCode 题解</a>，每日更新。目前已完成：<ul><li><strong>216</strong> 题</li><li><strong>12</strong> 次竞赛</li><li>仓库获得 <strong>37</strong> 颗小星星</li></ul></li><li>参加了 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>，目前完成：<ul><li><strong>1</strong> 篇文章翻译</li><li><strong>4</strong> 篇文章校对</li><li><strong>1</strong> 篇文章推荐</li></ul></li><li>因为在 GitHub 上的活跃而收到了一封招聘邮件</li><li>第一次 Pull Request 成功，为 <a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a> 贡献了微薄之力</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><blockquote><p>世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。</p></blockquote><h3 id="关于深圳"><a href="#关于深圳" class="headerlink" title="关于深圳"></a>关于深圳</h3><blockquote><p>来了就是深圳人。</p></blockquote><p><img src="/img/in-post/2019-half-year/sz.jpeg" alt="下班路上"></p><p>深圳是一座包容、年轻、上进的城市。</p><p>这里没有什么当地特色，没有什么旅游胜地。但他真的像一位潮气蓬勃的年轻人 —— <strong>虽然什么也没有，但却什么都能创造</strong>。</p><p>在深圳，「人与人的距离感」让我感到很舒适。你的同事不会在意你下班干什么去了，不会在意你家里住哪，家里几口人，单身还是结婚。每个人都更在意自己脚下的一亩三分地，更专注于自己职责范围内的事。</p><p>城市越闲，家长里短的话题就越多。城市越忙，创造的价值就越大。这可能就是我喜欢深圳的原因之一吧。</p><h3 id="喵"><a href="#喵" class="headerlink" title="喵"></a>喵</h3><p><img src="/img/in-post/2019-half-year/cat.jpeg" alt="我蛾子天下第一可爱！"></p><p>2018 年我有了人生的第一只小猫咪，到今天已经和 <a href="http://jalan.space/cat">薯条</a> 朝夕相处了八个月。</p><p><a href="http://jalan.space/cat">薯条</a> 是一只很特别的小猫咪，它和别的小猫咪不一样，不会蹭腿的技能，也不喜欢总是被摸，撒娇三秒立马转头冷漠。</p><p>但是我去阳台晒衣服，它会蹲在阳台门口等我，我去洗手间，它也会蹲在洗手间门口一动不动。<a href="http://jalan.space/cat">薯条</a> 是一只会监督你好好洗衣服、好好洗澡、好好做饭的小猫咪，当我做完一件事推开那扇门，发现有一只毛茸茸的小东西蹲在地上等我的时候，整个世界都在放烟花！</p><p>在和 <a href="http://jalan.space/cat">薯条</a> 相处的八个月中，我被挠过、咬过、（整只猫）砸过，在凌晨两点、三点、四点、五点都醒过。它也被我打过、骂过，用小瓶子装水喷过。庆幸的是我们最终都没有分手。</p><p>养猫是一个<em>人和猫</em>互相适应、一起成长的过程。要给猫充分的空间和自由，也要给予足够的耐心和适当的奖励。在这个过程中，互相适应对方的生活方式和喜好，相处久了小猫咪也会分辨人的情绪，知道自己做什么事情是不对的，做什么事情会得到赞扬。</p><p>希望 <a href="http://jalan.space/cat">薯条</a> 每天开开心心、健健康康，天塌下来都有老父亲扛着！<a href="http://jalan.space/cat">薯条</a> 的喵生和我的人生都还很长，未来还请多多关照啦！</p><h3 id="还是废材一个"><a href="#还是废材一个" class="headerlink" title="还是废材一个"></a>还是废材一个</h3><p>刚到深圳的时候给自己定了一个不抽烟的小目标，一个月结算一次，如果哪天抽烟了就在 <a href="https://www.wunderlist.com/" target="_blank" rel="noopener">Wunderlist</a> 上做一个标记。一开始还执行的不错，一个月可能就抽个 2-3 根，后来搬家后有了一个不错的小阳台，就……我也不勉强自己了，现在在阳台抽一根烟的时间变成了全天最放松的时刻。想到小时候自己不理解大人抽烟喝酒的行为，现在也慢慢变成自己所讨厌的样子了。</p><p>另外呢，还是不喜欢和别人交流。上周鼓起勇气约了一场野球，结果异常尴尬，不仅球打的差，话也说不上两句，倒是别人全程在安慰我不要紧张，还认真地给了战术指导……🤦‍♂️但我还是坚持「无需迎合无关紧要的人」这一观点，大多数的社交时间其实都是垃圾时间，没必要浪费时间在无关紧要的人身上。</p><p>来深圳以后有在好好做饭了，尝试了很多黑暗料理，可食用性一般，但也在慢慢进步啦。</p><p><img src="/img/in-post/2019-half-year/cook.jpeg" alt="这位客官，您的菜上齐了"></p><h3 id="一些想法但不一定对"><a href="#一些想法但不一定对" class="headerlink" title="一些想法但不一定对"></a>一些想法但不一定对</h3><ul><li>把握不住自己的节奏是焦虑的本质。</li><li>「闻道有先后，术业有专攻」，有时比别人多了解一些东西没有什么可骄傲的。</li><li>菜就是菜，菜而不自知才是最可怕的。这句话适用于自己，也适用于任何人。</li><li>成长最痛的地方在于面对自己的无能为力，你要承认有些事情你如何努力都是办不到的。不是因为你还不够努力，而是你就是办不到，死都办不到。</li><li>有些事情你必须自己面对，谁也帮不了你。比如深夜无人街道上那些翻江倒海的情绪。</li><li>同理，不要觉得努力就一定会成功，喜欢某个人别人也同样要喜欢你。人不要那么骄傲，做每件事都要有受伤的觉悟。</li><li>有时候不得不推开你喜欢的东西，你不是小孩子了，不能因为喜欢一个玩具就抱着不撒手。没有人有义务去包容你的幼稚和任性。</li><li>同样的，也没有人愿意等你成长。</li><li>在还没有准备好自己之前不要轻易进入一段感情，不然你就会发现内心深处那个卑微、敏感又自私的自己会把你最珍视的东西逐渐吞噬。</li><li>凡事有两面性，不要总盯着负面看，让自己堕入情绪深渊。</li><li>小孩子才做选择，劳资全部都要。</li></ul><h2 id="下半年的-flag"><a href="#下半年的-flag" class="headerlink" title="下半年的 flag"></a>下半年的 flag</h2><ol><li>大目标<strong>独立开发者</strong>：<ul><li>LingKBlog 完工。</li><li>至少完成一个独立应用，目前有一些想法，可能会用 Python 做爬虫和一些数据清洗。</li></ul></li><li>编程语言方面：<ul><li>锁定 Python，继续精进，探究方向包括 Flask 框架、爬虫、数据分析和自动化测试。</li><li>入坑客户端。</li></ul></li><li>拥抱开源：为其他至少 2 个开源项目贡献代码。</li><li>自测方面的提升，包括单元测试、自动化测试的探究，这块也会运用到工作中。</li><li>DevOps，实践探究整个过程如何做更好地解放生产力，融合上述测试方面的内容。</li><li>容器化和微服务的探究，会把目前在看的两本书 <a href="https://book.douban.com/subject/26772677/" target="_blank" rel="noopener">《微服务设计》</a> 和 <a href="https://book.douban.com/subject/26997846/" target="_blank" rel="noopener">《Kubernetes in Action》</a> 看完。</li><li>继续更新 LeetCode 题解，目前已解答题目 200+，等到下半年结束应该可以达到 400+ 了。</li><li>英语水平提升：<ul><li>养成阅读英文技术文章的良好习惯。</li><li>每天地铁通勤时间背单词。</li><li>继续参与 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>，确保每周至少翻译一篇或校对一篇文章，下半年的目标是积分达到 60 换取一个树莓派套装。</li></ul></li><li>每周锻炼至少 3 次，包括：跑步、打野球或下班骑车 5 公里回家都算。 🚴</li><li>和 <a href="http://jalan.space/cat">薯条</a> 好感度++，每天至少培养感情 20 分钟。没有小猫咪就没有幸福的生活，请大家监督我！</li><li>练习打篮球，如果有大进步就给自己买双球鞋。 ⛹️</li><li>搞一本掘金小册。（最大 Flag）</li></ol><h2 id="安利向"><a href="#安利向" class="headerlink" title="安利向"></a>安利向</h2><h3 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h3><ul><li><a href="http://google.com/" target="_blank" rel="noopener">Google</a>：别信百度。</li><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>：不用多说了，程序员最大的<del>同性</del>交友平台，多 follow 一些大佬，看看大佬们平时都在干嘛，相信慢慢也会变成大佬了！（想太多）</li><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰的网络日志</a>：现在阮老师的每周分享已经成了我每周必看的技术周刊了，一篇文章了解技术圈和社会的大小事。</li><li><a href="https://pycoders.com/welcome" target="_blank" rel="noopener">PyCoder’s Weekly</a>：Python 程序员的每周订阅。可以通过邮箱订阅该周刊。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><a href="https://xclient.info/s/mindly.html" target="_blank" rel="noopener">Mindly</a>：一款颜值非常高的思维导图工具。和其他传统的思维导图不同，它使用<strong>星系分布</strong>的方式来构建思维导图。</li><li><a href="https://xclient.info/s/dash.html" target="_blank" rel="noopener">Dash</a>：开发手册的集大成者，可以在上面下载任何语言、任何框架的官方文档。开发者必备。</li><li><a href="https://www.wunderlist.com/" target="_blank" rel="noopener">Wunderlist - 奇妙清单</a>：微软的待办事项工具，现在是我的心头大好了。</li><li><a href="https://xclient.info/s/switchhosts.html" target="_blank" rel="noopener">SwitchHosts</a>：Host 管理工具。</li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>：已经完全入坑，现在除了写 PHP，写 Python、写前端、写博客、写题解已经全在这个 IDE 上完成了。极高的颜值，丰富的插件，为什么我没有早点发现它！！！</li><li><a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a>：粘贴板工具。</li></ul><h3 id="番剧"><a href="#番剧" class="headerlink" title="番剧"></a>番剧</h3><ul><li><a href="https://www.bilibili.com/bangumi/media/md4340/?from=search&amp;seid=8690208710526750643" target="_blank" rel="noopener">中二病也要谈恋爱</a></li><li><a href="https://www.bilibili.com/bangumi/media/md4762734/?from=search&amp;seid=15362728972451567888" target="_blank" rel="noopener">灵能百分百</a></li><li><a href="https://www.bilibili.com/bangumi/media/md24097891/?from=search&amp;seid=13101914754044750541" target="_blank" rel="noopener">CAROLE &amp; TUESDAY </a></li><li><a href="https://www.bilibili.com/bangumi/media/md139352/?from=search&amp;seid=18280631544382236573" target="_blank" rel="noopener">强风吹拂</a></li><li><a href="https://www.bilibili.com/bangumi/media/md26360655/?from=search&amp;seid=8654221681558359883" target="_blank" rel="noopener">进击的巨人</a></li><li><a href="https://www.bilibili.com/bangumi/media/md138832/?from=search&amp;seid=14638690604205368128" target="_blank" rel="noopener">终将成为你</a></li><li><a href="https://www.bilibili.com/bangumi/media/md4312482/?from=search&amp;seid=2186213051913898216" target="_blank" rel="noopener">多罗罗</a></li></ul><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p><img src="/img/in-post/2019-half-year/lingk.jpeg" alt="来海拉鲁一起冒险吧！"></p><ul><li><a href="https://zh.wikipedia.org/zh-hans/%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4_%E6%97%B7%E9%87%8E%E4%B9%8B%E6%81%AF" target="_blank" rel="noopener">塞尔达传说 旷野之息</a></li></ul><p>我的内心已经容不下其他游戏了。</p><h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>其实决定来深圳的时候没有知会我的家人，在没有工作的一个月间甚至每天还要关注厦门的天气，以便在和母上大人通话时不暴露地理位置。直到找到工作后我才打电话通知家里。非常感谢我父母对我这次决定的理解和支持，虽然他们还是希望我能回福州留在他们的身边，过年回家时得知我可能要出省也没有过多地阻拦，而是担心我在「寒冬」时求职是否会遇到过大的阻力。</p><p>还要感谢所有陪我喝酒的朋友，太谢谢各位了，在喝酒聊天的过程中排解了很多情绪。特别感谢 <a href="http://csming1995.github.io/" target="_blank" rel="noopener">csming</a> 和 <a href="http://gagalee.ink/" target="_blank" rel="noopener">185大总攻嘎嘎大人</a> 两位，感谢在变厉害的路上一直有你们相伴！</p><p>感谢我的小猫咪 <a href="http://jalan.space/cat">薯条</a> 一直不离不弃陪伴着我，在无数个失眠的夜晚给了我最大的安慰。</p><p>最后还要感谢我自己！这半年走过的路，没有一步是容易的，数不清多少夜晚在睡梦中惊醒，也不知道自己流了多少眼泪。虽然现在还是一样的情绪敏感，有时还是不知所措，但应该稍微变强一些些了吧嘻嘻！</p><p>下半年要继续加油啦！</p><hr><p>想想之前的事我还是感到遗憾和后悔，所有的忙碌和坚持不过是我逃避现实的行为罢了。</p><p>一点也不想成长。但愿另一个平行世界的我天天开心，当个废材就好。</p>]]></content>
    
    <summary type="html">
    
      深圳是一场丢盔弃甲的逃亡
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>docsify 入坑指南与我放弃 Gitbook 的那些理由</title>
    <link href="http://jalan.space/2019/06/21/2019/begin-docsify/"/>
    <id>http://jalan.space/2019/06/21/2019/begin-docsify/</id>
    <published>2019-06-21T12:59:00.000Z</published>
    <updated>2019-06-21T13:19:33.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/docsify.jpg" alt=""></p><blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p><a href="https://github.com/JalanJiang/leetcode-notebook" target="_blank" rel="noopener">Rum</a> 的题解越来越多，原先选择 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 构建解题本的弊端逐渐显现出来，每次补充一道题解重新 <code>build</code> 项目时居然要花上 30 秒左右……</p><p>由于无法忍受 <code>gitbook build</code> 的速度和大量垃圾静态文件，我打算重新构建 <a href="https://github.com/JalanJiang/leetcode-notebook" target="_blank" rel="noopener">Rum</a>，因此有了与 <a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a> 的邂逅。</p><h2 id="docsify-是什么？"><a href="#docsify-是什么？" class="headerlink" title="docsify 是什么？"></a>docsify 是什么？</h2><p>官方的介绍是：</p><blockquote><p>A magical documentation site generator.</p></blockquote><p>与 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 和 <a href="https://github.com/vuejs/vuepress" target="_blank" rel="noopener">VuePress</a> 相同，<a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a> 是一个文档站点生成器。至于它究竟 magic 在何处，我将在后面说到。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先全局安装 <code>docsify-cli</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>假设我们要在 <code>./docs</code> 子目录中编写文档，将该目录初始化：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init <span class="string">./docs</span></span><br></pre></td></tr></table></figure><p>初始化后系统帮我们生成了一个 <code>./docs</code> 目录，目录中包含以下文件：</p><ul><li><code>index.html</code>：入口文件</li><li><code>README.md</code>：将作为主页渲染</li><li><code>.nojekyll</code>：阻止 Github Pages 忽略以下划线开头的文件</li></ul><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>使用以下命令启动本地服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure><h2 id="路由说明"><a href="#路由说明" class="headerlink" title="路由说明"></a>路由说明</h2><p>页面路由和文件夹的对应关系如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docs/README<span class="selector-class">.md</span>        =&gt; http:<span class="comment">//domain.com</span></span><br><span class="line">docs/guide<span class="selector-class">.md</span>         =&gt; http:<span class="comment">//domain.com/guide</span></span><br><span class="line">docs/zh-cn/README<span class="selector-class">.md</span>  =&gt; http:<span class="comment">//domain.com/zh-cn/</span></span><br><span class="line">docs/zh-cn/guide<span class="selector-class">.md</span>   =&gt; http:<span class="comment">//domain.com/zh-cn/guide</span></span><br></pre></td></tr></table></figure><h2 id="导航与侧边栏配置"><a href="#导航与侧边栏配置" class="headerlink" title="导航与侧边栏配置"></a>导航与侧边栏配置</h2><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><h4 id="简单导航栏"><a href="#简单导航栏" class="headerlink" title="简单导航栏"></a>简单导航栏</h4><p>简单的导航栏可以在 <code>index.html</code> 文件中直接定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>LeetCode 题解<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://jalan.space"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="复杂导航"><a href="#复杂导航" class="headerlink" title="复杂导航"></a>复杂导航</h4><p>复杂导航可以通过 Markdown 文件配置。</p><p>首先配置 <code>loadNavbar</code> 为 <code>true</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line"><span class="actionscript">    loadNavbar: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./docs</code> 下创建一个 <code>_navbar.md</code> 文件，在该文件中使用 Markdown 格式书写导航：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>导航1</span><br><span class="line"><span class="code">    * [子导航](nav1/child/)</span></span><br><span class="line"><span class="bullet">* </span>[<span class="string">导航2</span>](<span class="link">nav2/</span>)</span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>默认情况下，侧边栏会根据当前文章的标题生成目录。但也可以通过 Markdown 文档生成。</p><p>首先配置 <code>loadSidebar</code> 选项为 <code>true</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line"><span class="actionscript">    loadSidebar: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>./docs</code> 下创建 <code>_sidebar.md</code> 文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">简介</span>](<span class="link">/</span>)</span><br><span class="line"><span class="bullet">* </span>数据结构</span><br><span class="line">  * [<span class="string">数组</span>](<span class="link">data-structure/array/</span>)</span><br><span class="line">  * [<span class="string">字符串</span>](<span class="link">data-structure/string/</span>)</span><br><span class="line">  * [<span class="string">链表</span>](<span class="link">data-structure/linked_list/</span>)</span><br><span class="line">  * 树</span><br><span class="line"><span class="code">    * [递归](data-structure/tree/recursion/)</span></span><br><span class="line"><span class="code">    * [层次遍历（BFS）](data-structure/tree/bfs/)</span></span><br><span class="line"><span class="code">    * [前中后序遍历（DFS）](data-structure/tree/dfs/)</span></span><br><span class="line"><span class="code">    * [其他](data-structure/tree/other/)</span></span><br><span class="line">  * [<span class="string">堆</span>](<span class="link">data-structure/heap/</span>)</span><br><span class="line">  * [<span class="string">栈</span>](<span class="link">data-structure/stack/</span>)</span><br><span class="line">  * [<span class="string">哈希表</span>](<span class="link">data-structure/hash/</span>)</span><br><span class="line"><span class="bullet">* </span>算法思想</span><br><span class="line">  * 排序</span><br><span class="line"><span class="code">    * [堆排序](algorithm/sort/heap/)</span></span><br><span class="line"><span class="code">    * [快速排序](algorithm/sort/quick/)</span></span><br><span class="line"><span class="code">    * [冒泡排序](algorithm/sort/bubble/)</span></span><br><span class="line"><span class="code">    * [其他](algorithm/sort/other/)</span></span><br><span class="line">  * 搜索</span><br><span class="line"><span class="code">    * [深度优先](algorithm/research/dfs/)</span></span><br><span class="line"><span class="code">    * [广度优先](algorithm/research/bfs/)</span></span><br><span class="line"><span class="code">    * [二分查找](algorithm/research/binary-search/)</span></span><br><span class="line">  * [<span class="string">动态规划</span>](<span class="link">algorithm/dynamic/</span>)</span><br><span class="line">  * [<span class="string">贪心</span>](<span class="link">algorithm/greedy/</span>)</span><br><span class="line">  * [<span class="string">位运算</span>](<span class="link">algorithm/bit/</span>)</span><br><span class="line">  * [<span class="string">数学题</span>](<span class="link">algorithm/math/</span>)</span><br><span class="line">  * [<span class="string">其他</span>](<span class="link">algorithm/other/</span>)</span><br><span class="line"><span class="bullet">* </span>周赛</span><br><span class="line">  * [<span class="string">第 121 场周赛</span>](<span class="link">weekly/121/</span>)</span><br><span class="line">  * [<span class="string">第 122 场周赛</span>](<span class="link">weekly/122/</span>)</span><br><span class="line">  * [<span class="string">第 124 场周赛</span>](<span class="link">weekly/124/</span>)</span><br><span class="line">  * [<span class="string">第 129 场周赛</span>](<span class="link">weekly/129/</span>)</span><br><span class="line">  * [<span class="string">第 130 场周赛</span>](<span class="link">weekly/130/</span>)</span><br><span class="line">  * [<span class="string">第 131 场周赛</span>](<span class="link">weekly/131/</span>)</span><br><span class="line">  * [<span class="string">第 133 场周赛</span>](<span class="link">weekly/133/</span>)</span><br><span class="line">  * [<span class="string">第 134 场周赛</span>](<span class="link">weekly/134/</span>)</span><br><span class="line">  * [<span class="string">第 136 场周赛</span>](<span class="link">weekly/136/</span>)</span><br><span class="line">  * [<span class="string">第 137 场周赛</span>](<span class="link">weekly/137/</span>)</span><br><span class="line">  * [<span class="string">第 138 场周赛</span>](<span class="link">weekly/138/</span>)</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>使用 <a href="https://github.com/PrismJS/prism" target="_blank" rel="noopener">Prism</a> 作为代码高亮插件，可以在 <code>index.html</code> 中这样配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-bash.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-php.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里引入的文件，如果你要高亮 Python 代码，那么就要引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-python.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对不同语言的高亮支持可见 <a href="[Prism](https://github.com/PrismJS/prism">Prism 仓库</a>)。 </p><hr><p>更多插件见 <a href="https://docsify.js.org/#/plugins" target="_blank" rel="noopener">插件列表</a>。</p><h2 id="部署到-Github-Pages"><a href="#部署到-Github-Pages" class="headerlink" title="部署到 Github Pages"></a>部署到 Github Pages</h2><p>我的 Github Pages 读取的是 <code>gh-pages</code> 分支下的代码，因此我要把 <code>./docs</code> 下的文件上传到 <code>gh-pages</code> 分支上，完整的代码则上传的到 <code>master</code> 分支。</p><p>为了方便更新，我在项目根目录下放置了一个用于推送代码的脚本 <code>push.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">message=$1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 README.md</span></span><br><span class="line">cp README.md docs/README.md</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 master</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m "$message"</span><br><span class="line">git push -f git@github.com:JalanJiang/leetcode-notebook.git master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 gh-pages</span></span><br><span class="line">cd docs/</span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m "$message"</span><br><span class="line">git push -f git@github.com:JalanJiang/leetcode-notebook.git master:gh-pages</span><br></pre></td></tr></table></figure><h2 id="与-Gitbook-体验对比"><a href="#与-Gitbook-体验对比" class="headerlink" title="与 Gitbook 体验对比"></a>与 Gitbook 体验对比</h2><p>初次搭建这一类文档站点使用的是 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a>， 之前写过一篇 <a href="http://jalan.space/2018/04/22/2018/2018-04-22-gitbook-and-git-pages/">搭建 GitBook 并托管到 git pages</a>，目前我仓库里可见的文档站点几乎都是 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 搭建的。然而很早开始 Gitbook 团队就专注于 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 的商业化项目，命令行工具已经被抛弃了……</p><table><thead><tr><th>对比项</th><th>docsify</th><th>Gitbook</th></tr></thead><tbody><tr><td>是否需要编译</td><td>否</td><td>是</td></tr><tr><td>插件</td><td>较少</td><td>多</td></tr><tr><td>阅读体验</td><td>好</td><td>极好（可以调整字体、背景等）</td></tr><tr><td>灵活性</td><td>较好</td><td>较差</td></tr></tbody></table><p>其中最大的不同点还是 <a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a> 是轻量级、无需编译的，而 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 每次 <code>build</code> 都需要生成一堆 <code>HTML</code> 静态文件，不仅 <code>build</code> 时间长，还污染了我的提交记录……‍🤦‍♂️</p><p>而在插件方面，虽然 <a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a> 插件不如 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 的丰富，但麻雀虽小五脏俱全，该有的基本也都有，足够使用。</p><p><img src="/img/in-post/docsify.svg" alt=""></p><p>如果再建文档站点，我估计再也不会回去使用 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a> 了。</p><h2 id="参考资料与扩展阅读"><a href="#参考资料与扩展阅读" class="headerlink" title="参考资料与扩展阅读"></a>参考资料与扩展阅读</h2><ul><li><a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify 官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      喜新厌旧，是我本人
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="docsify" scheme="http://jalan.space/tags/docsify/"/>
    
      <category term="Git" scheme="http://jalan.space/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【译】WebSockets 与长轮询的较量</title>
    <link href="http://jalan.space/2019/06/20/2019/translate-websockets-vs-long-polling/"/>
    <id>http://jalan.space/2019/06/20/2019/translate-websockets-vs-long-polling/</id>
    <published>2019-06-20T15:59:00.000Z</published>
    <updated>2019-07-03T14:07:20.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://www.ably.io/blog/websockets-vs-long-polling/" target="_blank" rel="noopener">WebSockets vs Long Polling</a></li><li>原文作者：<a href="https://www.ably.io/blog/author/kieran/" target="_blank" rel="noopener">Kieran Kilbride-Singh</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/websockets-vs-long-polling.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/TODO1/websockets-vs-long-polling.md</a></li><li>译者：<a href="http://jalan.space">Jalan</a></li><li>校对者：<a href="https://github.com/linxiaowu66" target="_blank" rel="noopener">linxiaowu66</a>, <a href="https://github.com/sunui" target="_blank" rel="noopener">sunui</a></li></ul></blockquote><h1 id="WebSockets-与长轮询的较量"><a href="#WebSockets-与长轮询的较量" class="headerlink" title="WebSockets 与长轮询的较量"></a>WebSockets 与长轮询的较量</h1><p><img src="https://ik.imagekit.io/ably/ghost/prod/2019/06/websockets-vs-long-polling-1.jpg?tr=w-1520" alt="WebSockets 与长轮询的较量"></p><p><strong>我们要如何在两者之间做出选择？</strong></p><p>有时候，当信息一旦准备就绪，我们就需要从服务器获取它们。而我们通常使用的 AJAX 请求/响应模式无法为这类应用场景保持请求连接的建立。相反地，我们需要一种基于推送的方法，例如 WebSockets 协议、长轮询、服务器推送事件（SSE）以及最近的 HTTP2 服务器推送。在本文中，我们将对比两种方法：WebSockets 与长轮询。</p><h2 id="长轮询概述"><a href="#长轮询概述" class="headerlink" title="长轮询概述"></a>长轮询概述</h2><p>1995 年，<a href="https://en.wikipedia.org/wiki/Netscape" target="_blank" rel="noopener">网景公司</a> 聘请 Brendan Eich 为 Netscape Navigator 实现脚本功能，经过 10 天的时间，JavaScript 诞生了。作为一门编程语言，与现代 JavaScript 语言相比，那时诞生的 JavaScript 功能非常有限，而它与浏览器文档对象模型（DOM）的交互就更加有限了。JavaScript 主要用于提供有限的增强功能来丰富浏览器文档的使用性。例如，在浏览器中验证表单、将动态 HTML 轻便地插入现有文档。</p><p><img src="https://ik.imagekit.io/ably/ghost/prod/2019/06/long-polling-f6e3a73a589fe25d7c7b622a8487a2e8a27a11f00b22b574abb021fbcd7ac2db.png?tr=w-1520" alt=""></p><p>随着 <a href="https://en.wikipedia.org/wiki/Browser_wars" target="_blank" rel="noopener">浏览器大战</a> 的升温，微软的 Internet Explorer 版本到达了版本 4 及以上，对浏览器强大特性集的争夺战导致微软在 Internet Explorer 中引入了一个新特性，这一特性最终成为了 <a href="https://xhr.spec.whatwg.org/" target="_blank" rel="noopener">XMLHttpRequest</a>。十多年来，所有浏览器都普遍支持 XMLHttpRequest。</p><p><a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling" target="_blank" rel="noopener">长轮询</a> 本质上是原始轮询技术的一种更有效的形式。向服务器发送重复请求会浪费资源，因为必须为每个新传入的请求建立连接，必须解析请求的 HTTP 头部，必须执行对新数据的查询，并且必须生成和交付响应（通常不提供新数据）。然后必须关闭连接并清除所有资源。长轮询是一种服务器选择尽可能长的时间保持和客户端连接打开的技术，仅在数据变得可用或达到超时阙值后才提供响应，而不是在给到客户端的新数据可用之前，让每个客户端多次发起重复的请求。</p><h2 id="WebSockets-概述"><a href="#WebSockets-概述" class="headerlink" title="WebSockets 概述"></a>WebSockets 概述</h2><p>大约在 2008 年中期，开发人员 <a href="https://en.wikipedia.org/wiki/Michael_Carter_(entrepreneur" target="_blank" rel="noopener">Michael Carter</a>) 和 <a href="https://en.wikipedia.org/wiki/Ian_Hickson" target="_blank" rel="noopener">Ian Hickson</a> 特别敏锐地感觉到在实现真正健壮的东西时使用 Comet 的痛苦和局限性。通过 <a href="https://krijnhoetmer.nl/irc-logs/whatwg/20080618#l-1145" target="_blank" rel="noopener">在 IRC</a> 和 <a href="https://lists.w3.org/Archives/Public/public-whatwg-archive/2008Jun/0165.html" target="_blank" rel="noopener">W3C 邮件列表</a> 上的合作，他们制定了一项计划，在网络上引入了现代实时双向通信的新标准，从而 <a href="https://lists.w3.org/Archives/Public/public-whatwg-archive/2008Jun/0186.html" target="_blank" rel="noopener">创造了“WebSocket”这个名字</a>。</p><p><img src="https://ik.imagekit.io/ably/ghost/prod/2019/06/websocks.png?tr=w-1520" alt=""></p><p>这个想法进入了 W3C HTML 草案标准，不久之后，Michael Carter 写了一篇文章，<a href="http://cometdaily.com/2008/07/04/html5-websocket/" target="_blank" rel="noopener">在 Comet 社区中介绍了 WebSockets</a>。2010 年，谷歌的 Chrome 4 成为第一款完全支持 WebSockets 的浏览器，其他浏览器供应商也在接下来的几年中纷纷效仿。2011 年，<a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="noopener">RFC 6455 —— WebSocket 协议</a> —— 在 IETF 网站上发布。</p><p>简而言之，<a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSockets</a> 是一个构建在设备 <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener">TCP/IP</a> 协议栈之上的传输层。其目的是向 Web 开发人员提供本质上尽可能接近原始的 TCP 通信层，同时添加一些抽象概念，以消除 Web 工作中存在的一些阻力。它们还满足了这样一个事实：即网络具有额外需要考虑的安全因素，这些安全因素必须考虑在内以保护消费者和服务提供商。</p><h2 id="长轮询的利与弊"><a href="#长轮询的利与弊" class="headerlink" title="长轮询的利与弊"></a>长轮询的利与弊</h2><p><strong>优点</strong></p><ul><li>长轮询是在 XMLHttpRequest 之后实现的，它几乎得到了设备的普遍支持，因此通常很少需要有进一步的备选方案。但是，在必须处理异常的情况下，或者在服务器可查询新数据但不支持长轮询（更不用说其他更现代的技术标准）的情况下，基本轮询有时仍然有些用处，并且可以使用 XMLHttpRequest 或通过 JSONP 利用简单的 HTML 脚本标签。</li></ul><p><strong>缺点</strong></p><ul><li>长轮询大量占据服务器资源。</li><li><a href="https://support.ably.io/support/solutions/articles/3000044641" target="_blank" rel="noopener">可靠的消息排序</a> 可能是长轮询的一个问题，因为来自同一个客户端的多个 HTTP 请求可能同时运行。举个例子，如果一个客户端打开两个浏览器选项卡，使用相同的服务器资源，并且客户端应用程序正在将数据持久化到本地存储区（如 localStorage 或 IndexedDb），则无法保证重复数据不会被多次写入。</li><li>根据服务端实现的不同，一个客户端对消息的确认接收也可能导致另一个客户端根本不会收到预期的消息，因为服务端可能错误地认为客户端已经收到了它所期望的数据。</li></ul><h2 id="WebSockets-的利与弊"><a href="#WebSockets-的利与弊" class="headerlink" title="WebSockets 的利与弊"></a>WebSockets 的利与弊</h2><p><strong>优点</strong></p><ul><li>WebSockets 保持一个唯一的连接打开，同时消除长轮询的延迟问题。</li><li>WebSockets 通常不使用 XMLHttpRequest，因此，当我们每次需要从服务器获取更多的信息时，无需发送头部数据。反过来说，这又减少了数据发送到服务器时需要付出的高昂的数据负载代价。</li></ul><p><strong>缺点</strong></p><ul><li>当连接终止时，WebSockets 无法自动恢复连接 —— 这是需要你自己实现的部分，也是导致存在许多 <a href="https://www.ably.io/download" target="_blank" rel="noopener">客户端库</a> 的原因。</li><li>早于 2011 年的浏览器无法支持 WebSocket 连接 —— 但这一点越来越无关紧要。</li></ul><h2 id="为什么-WebSocket-协议是更好的选择？"><a href="#为什么-WebSocket-协议是更好的选择？" class="headerlink" title="为什么 WebSocket 协议是更好的选择？"></a>为什么 WebSocket 协议是更好的选择？</h2><p>一般来说，WebSockets 会是更好的选择。</p><p>长轮询在服务器上占用更多的资源，而 WebSockets 在服务器上占用的空间很少。长轮询还需要在服务器与许多设备之间进行多次通信。而不同的网关对于一个常规连接允许保持打开的时间有不同的标准。如果连接打开时间太久，其进程可能会被杀死，甚至当这个进程正在处理一些重要的事情时。</p><p>使用 WebSockets 构建应用的理由：</p><ul><li>全双工异步消息传送。换句话说，客户端和服务器都可以独立地相互传输消息。</li><li>WebSockets 无需任何配置即可通过大多数防火墙。</li><li>良好的安全模式（基于原始的安全模式）。</li></ul><h2 id="WebSockets-开源解决方案"><a href="#WebSockets-开源解决方案" class="headerlink" title="WebSockets 开源解决方案"></a>WebSockets 开源解决方案</h2><p>WebSocket 库有两个主要分类：一种只实现协议部分，把其余部分留给开发人员实现，另一种构建在协议之上，它们具有实时消息通信应用程序通常需要的各种附加功能，例如丢失连接的恢复，发布/订阅频道、身份认证、授权等。</p><p>后者通常要求开发人员在客户端使用自己的库，而不仅仅是使用浏览器提供的原始 WebSocket API。因此，确保你对所选择方案的工作方式和所提供的服务感到满意就变得非常重要。一旦将所选择的解决方案集成到体系结构里，你可能会发现自己陷入了该方案的工作方式中，任何可靠性、性能和可扩展性方面的问题都可能会反过来影响你。</p><p>让我们从第一类说起。</p><p><strong>注意: 以下所有内容均是开源库。</strong>  </p><p><strong>ws</strong></p><p><a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws</a> 是一个“简单易用、快速且经过全面测试的 WebSocket 客户端和 Node.js 服务器”。它绝对是一个准系统级别的实现，旨在完成执行协议上所有艰难的工作，但是恢复连接、发布/订阅等附加功能，必须由你自己来管理。</p><p>客户端 (绑定前的浏览器):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://www.host.com/path'</span>);</span><br><span class="line">ws.on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端（Node.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line">    ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>μWebSockets</strong></p><p><a href="https://github.com/uNetworking/uWebSockets" target="_blank" rel="noopener">μWS</a> 是 <a href="https://www.ably.io/concepts/websockets#ws" target="_blank" rel="noopener">ws</a> 的直接替代品，它特别注重性能和稳定性。据我所知，μWS 离最快的 WebSocket 服务器仅有一步之遥。<a href="https://www.ably.io/concepts/websockets#socketcluster" target="_blank" rel="noopener">SocketCluster</a> 就是由它驱动的，关于 SocketCluster 我将在下面说到。</p><p>由于作者出于哲学上的原因试图将 μWS 从 NPM 中提取出来，近来围绕 μWS 引发了一些争议，但 μWS 最新的可运行版本仍然在 NPM 上，并且可以从 NPM 安装时明确指定该版本。也就是说，作者正在开发 <a href="https://github.com/uNetworking/v0.15" target="_blank" rel="noopener">一个新版本</a>，其附带的 <a href="https://github.com/uNetworking/uWebSockets-node" target="_blank" rel="noopener">node.js 绑定</a> 也在 <a href="https://github.com/uNetworking/uWebSockets-node/issues/2" target="_blank" rel="noopener">开发中</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'uws'</span>).Server;</span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received: '</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    ws.on(<span class="string">'message'</span>, onMessage);</span><br><span class="line">    ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="客户端-——-在浏览器中使用-WebSockets"><a href="#客户端-——-在浏览器中使用-WebSockets" class="headerlink" title="客户端 —— 在浏览器中使用 WebSockets"></a>客户端 —— 在浏览器中使用 WebSockets</h2><p>WebSocket API 定义于 <a href="https://html.spec.whatwg.org/multipage/web-sockets.html#network" target="_blank" rel="noopener">WHATWG HTML Living Standard</a>，它使用起来非常简单。构建 WebSocket 只需要一行代码：</p><p>JS</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://example.org'</span>);</span><br></pre></td></tr></table></figure><p>注意，在通常使用 HTTP 方案的地方使用 ws。在通常使用 https 方案的地方，还可以选择 wss。这些协议是和 WebSocket 规范一起引入的，旨在表示一个 HTTP 连接，该连接中包括一个升级连接以使用 WebSockets 的请求。</p><p>创建 WebSocket 对象本身并没有太大的作用。连接是异步建立的，所以在发送任何消息之前，你必须监听握手的完成情况，还需要一个从服务器接收消息的监听器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ws.addEventListener(<span class="string">'open'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 向 WebSocket 服务器发送消息</span></span><br><span class="line">    ws.send(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// `event` 对象是一个典型的 DOM 事件对象，</span></span><br><span class="line"><span class="comment">// 服务器发送的消息数据存储在 `data` 属性中</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received:'</span>, event.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>还有错误事件和关闭事件。当连接终止时，WebSockets 不会自动恢复连接 —— 这需要你自己实现，这也是存在许多客户端库的原因之一。虽然 WebSocket 类简单易用，但它实际上只是一个基本的构建块。对于不同子协议或附加功能的支持，例如消息传输通道，必须单独实现。</p><h2 id="长轮询-——-开源解决方案"><a href="#长轮询-——-开源解决方案" class="headerlink" title="长轮询 —— 开源解决方案"></a>长轮询 —— 开源解决方案</h2><p>大多数库不会单独使用长轮询，因为长轮询通常与其他传输策略一起使用，或作为其他传输策略的备选方案，或是当长轮询不起作用时，将其他传输策略作为备选。在 2018 年及以后，独立的长轮询库尤其罕见，面对更先进的替代品对传输的广泛支持，长轮询这种技术很快就失去了相关性。不过，你可以将它作为传输的备选方案，以下是一些不同语言的可选项：</p><ul><li><strong>Go:</strong> <a href="https://github.com/jcuga/golongpoll" target="_blank" rel="noopener"><strong>golongpoll</strong></a></li><li><strong>PHP:</strong> <a href="https://github.com/panique/php-long-polling" target="_blank" rel="noopener"><strong>php-long-polling</strong></a></li><li><strong>Node.js:</strong> <a href="https://github.com/fanout/pollymer" target="_blank" rel="noopener"><strong>Pollymer</strong></a></li><li><strong>Python:</strong> <a href="https://github.com/jedisct1/Simple-Comet-Server" target="_blank" rel="noopener"><strong>A simple COMET server</strong></a></li></ul><h2 id="Ably、WebSockets-与长轮询"><a href="#Ably、WebSockets-与长轮询" class="headerlink" title="Ably、WebSockets 与长轮询"></a>Ably、WebSockets 与长轮询</h2><p>大多数 <a href="https://www.ably.io/download" target="_blank" rel="noopener">Ably 的客户端库 SDK</a> 使用 <a href="https://www.ably.io/documentation/concepts/websockets" target="_blank" rel="noopener">WebSocket</a> 建立与 Ably 的实时连接，然后对包括身份验证在内的所有其他 REST 操作使用简单的 HTTP 请求。</p><p>但是，客户端库 SDK（例如我们的 <a href="https://github.com/ably/ably-js" target="_blank" rel="noopener">Javascript 浏览器库</a>）被设计为根据可用浏览器和连接选择可用且最佳的传输方式。通过支持附加的传输方式，使其能够回退到最低的公共标准，Ably 确保现在几乎所有的浏览器都能与 Ably 建立实时连接。我们的 Javascript 浏览器库目前支持以下传输方式，按照性能从优到劣排列：</p><ul><li><a href="https://www.ably.io/documentation/concepts/websockets" target="_blank" rel="noopener">WebSockets</a> (<a href="http://caniuse.com/#feat=websockets" target="_blank" rel="noopener">截止 2017 年 12 月，全球 94% 的浏览器均支持</a>)</li><li>XHR 流</li><li>XHR 轮询</li><li>JSONP 轮询</li></ul><p>在实现对 WebSocket 的支持且将长轮询作为备选方案时，需要涉及到很多方面 —— 不仅涉及客户端和服务器实现细节，还涉及对其他传输方式的支持，以确保对不同客户端环境的可靠支持，也涉及到更广泛的关注点，例如 <a href="https://www.ably.io/documentation/core-features/authentication?utm_source=websockets&amp;utm_medium=concepts" target="_blank" rel="noopener">身份验证和授权</a>、<a href="https://support.ably.io/a/solutions/articles/3000044640" target="_blank" rel="noopener">保证消息可交付</a>、<a href="https://support.ably.io/a/solutions/articles/3000044640" target="_blank" rel="noopener">可靠的消息排序</a>、<a href="https://www.ably.io/documentation/core-features/history?utm_source=websockets&amp;utm_medium=concepts" target="_blank" rel="noopener">历史消息保留</a>，还有 <a href="https://www.ably.io/documentation/" target="_blank" rel="noopener">更多方面</a>。</p><h2 id="参考资料与扩展阅读"><a href="#参考资料与扩展阅读" class="headerlink" title="参考资料与扩展阅读"></a>参考资料与扩展阅读</h2><ul><li><a href="https://www.ably.io/concepts/long-polling" target="_blank" rel="noopener">长轮询</a></li><li><a href="https://www.ably.io/concepts/websockets" target="_blank" rel="noopener">WebSockets</a></li><li><a href="https://www.ably.io/documentation/how-ably-works#any-internet-device" target="_blank" rel="noopener">Ably 是如何工作的</a></li></ul><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      掘金翻译计划首篇翻译完成！
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Python 中的比较运算符</title>
    <link href="http://jalan.space/2019/06/19/2019/python-relational-operator/"/>
    <id>http://jalan.space/2019/06/19/2019/python-relational-operator/</id>
    <published>2019-06-19T14:27:00.000Z</published>
    <updated>2019-06-19T14:33:24.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p>前段时间看到一篇 <a href="https://my.oschina.net/leejun2005/blog/615953" target="_blank" rel="noopener">Flask 开发团队内部 Python 编码风格指南</a> ，里面有一段关于比较的规范：</p><ul><li>任意类型之间的比较，使用 <code>==</code> 和 <code>!=</code></li><li>与单例（singletons）进行比较时，使用 <code>is</code> 和 <code>is not</code></li><li>永远不要与 <code>True</code> 或 <code>False</code> 进行比较（例如，不要这样写：<code>foo == False</code>，而应该这样写：<code>not foo</code>）</li></ul><p>自己在写代码的时候很少去关注变量的比较要如何实现，基本都是直接使用 <code>==</code> 。今天就借此机会聊聊 Python 中的比较运算符。</p><h2 id=""><a href="#" class="headerlink" title="== / !="></a>== / !=</h2><p><code>==</code> 和 <code>!=</code> 是<strong>等值校验</strong>。</p><p>这两个运算符是我们最熟悉不过的比较运算符了。<code>==</code> 会根据魔术方法 <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__</code></a> 检测左右两侧对象的<strong>值</strong>是否相等。</p><p>例如 <code>x == y</code> ，其实背后的操作是 <code>x.__eq__(y)</code>。</p><h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><p><code>is</code> 是<strong>身份校验</strong>。它将检测左右两侧是否为<strong>同一个对象</strong>。</p><p>同一个对象必须满足：</p><ol><li>值相同</li><li>内存地址相同</li></ol><p>因此就不难理解为什么 <code>is</code> 和 <code>is not</code> 用于单例（singletons）比较了。</p><h3 id="单例（singletons）是什么？"><a href="#单例（singletons）是什么？" class="headerlink" title="单例（singletons）是什么？"></a>单例（singletons）是什么？</h3><p>单例是一种<strong>设计模式</strong>，应用该模式的类只会生成一个实例。</p><p>单例模式保证了在程序的不同位置都<strong>可以且仅可以取到同一个对象实例</strong>：</p><ul><li>如果实例不存在：会创建一个实例</li><li>如果实例已存在：会返回这个实例</li></ul><p>关于实现可以看：<a href="http://jalan.space/php-patterns-notes/mode/new/single.html">PHP 中的单例模式</a>（突然跑题 PHP……）</p><h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><p><code>not</code> 是 Python 中的逻辑判断词，常用于布尔型 <code>True</code> 和 <code>False</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">not</span> <span class="literal">True</span> <span class="bullet">-&gt;</span> <span class="literal">False</span></span><br><span class="line"><span class="string">not</span> <span class="literal">False</span> <span class="bullet">-&gt;</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">False</span></span><br><span class="line"><span class="comment"># not a 为 True</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 元素 a 是否不在列表 b 中</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>仅对值进行简单比较时可以使用 <code>==</code>/<code>!=</code> 操作符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>is</code> 用于比较单例，例如比较 <code>None</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果涉及布尔值 <code>True</code>/<code>False</code> 的判断，使用 <code>not</code>，不要直接与 <code>True</code> 或 <code>False</code> 比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">False</span></span><br><span class="line">b = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> b:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误的写法</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="keyword">False</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>not</code> 还可以用于判断元素是否在列表/字典中存在。</p><h2 id="参考资料与扩展阅读"><a href="#参考资料与扩展阅读" class="headerlink" title="参考资料与扩展阅读"></a>参考资料与扩展阅读</h2><ul><li><a href="https://stackoverflow.com/questions/2209755/python-operation-vs-is-not" target="_blank" rel="noopener">Python != operation vs “is not”</a></li><li><a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html" target="_blank" rel="noopener">Python 魔术方法指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      比较运算符的正确打开方式
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的 requirement.txt</title>
    <link href="http://jalan.space/2019/06/13/2019/python-requirement/"/>
    <id>http://jalan.space/2019/06/13/2019/python-requirement/</id>
    <published>2019-06-13T13:04:00.000Z</published>
    <updated>2019-06-19T14:33:17.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><h2 id="Python-中的依赖"><a href="#Python-中的依赖" class="headerlink" title="Python 中的依赖"></a>Python 中的依赖</h2><p>正如 PHP 中使用 Composer 维护依赖一样，Python 也需要维护项目相关的依赖包。通常我们会在项目的根目录下放置一个 requirement.txt 文件，用于记录所有依赖包和它的确切版本号。</p><p>requirement.txt 的内容长这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alembic</span>==1.0.10</span><br><span class="line"><span class="attribute">appnope</span>==0.1.0</span><br><span class="line"><span class="attribute">astroid</span>==2.2.5</span><br><span class="line"><span class="attribute">attrs</span>==19.1.0</span><br><span class="line"><span class="attribute">backcall</span>==0.1.0</span><br><span class="line"><span class="attribute">bcrypt</span>==3.1.6</span><br><span class="line"><span class="attribute">bleach</span>==3.1.0</span><br><span class="line"><span class="attribute">cffi</span>==1.12.3</span><br><span class="line"><span class="attribute">Click</span>==7.0</span><br><span class="line"><span class="attribute">decorator</span>==4.4.0</span><br><span class="line"><span class="attribute">defusedxml</span>==0.6.0</span><br><span class="line"><span class="attribute">entrypoints</span>==0.3</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>那么 requirement.txt 究竟如何使用呢？</p><p>当我们拿到一个项目时，首先要在项目运行环境安装 requirement.txt 所包含的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><p>当我们要把环境中的依赖写入 requirement.txt 中时，可以借助 <code>freeze</code> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure><h2 id="环境混用怎么办？"><a href="#环境混用怎么办？" class="headerlink" title="环境混用怎么办？"></a>环境混用怎么办？</h2><p>在导出依赖到 requirement.txt 文件时会有一种尴尬的情况。</p><p>你的本地环境不仅包含项目 A 所需要的依赖，也包含着项目 B 所需要的依赖。此时我们要如何做到只把项目 A 的依赖导出呢？</p><p><a href="https://github.com/bndr/pipreqs" target="_blank" rel="noopener">pipreqs</a> 可以通过扫描项目目录，帮助我们仅生成当前项目的依赖清单。</p><p>通过以下命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs <span class="string">./</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pip install -r requirement.txt
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何使用搬瓦工搭建 Shadowsocks 服务器</title>
    <link href="http://jalan.space/2019/06/02/2019/build-bandwagonhost-ss/"/>
    <id>http://jalan.space/2019/06/02/2019/build-bandwagonhost-ss/</id>
    <published>2019-06-02T12:02:00.000Z</published>
    <updated>2019-06-02T13:18:18.571Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/shadowsocks/freedom.jpeg" alt=""></p><p>这几天因为没有梯子被迫使用百度搜索非常难过，程序员果然离不开墙外调查啊……于是打算花费一笔小钱搞一个自己的梯子。</p><h2 id="什么是-Shadowsocks？"><a href="#什么是-Shadowsocks？" class="headerlink" title="什么是 Shadowsocks？"></a>什么是 Shadowsocks？</h2><p>首先附上 <a href="https://github.com/shadowsocks" target="_blank" rel="noopener">Github 仓库</a>。</p><p>Shadowsocks（简称SS）是一种基于 <a href="https://zh.wikipedia.org/wiki/SOCKS#SOCK5" target="_blank" rel="noopener">Socks5</a> 代理方式的加密<strong>传输协议</strong>。现在较为广泛地用来突破 <a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E" target="_blank" rel="noopener">GFW</a>。</p><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><ul><li>使用特定的中转服务器完成数据传输<ol><li>用户就可以通过特定软件连接代理服务器</li><li>代理服务器获取网站内容并回传给用户</li></ol></li><li>为防止流量被识别和拦截<ul><li>服务器和客户端软件会要求提供密码和加密方式</li><li>数据传输期间会对传入和传出流量进行加密</li></ul></li></ul><h3 id="代理流程"><a href="#代理流程" class="headerlink" title="代理流程"></a>代理流程</h3><p><img src="/img/in-post/shadowsocks/shadowsocks.png" alt=""></p><p>其中：</p><ul><li>本机运行 <code>local.py</code>，默认监听 1080 端口，该端口代理浏览器请求</li><li>服务器运行 <code>server.py</code></li></ul><ol><li>例如此时要访问 Google，浏览器与 <code>localhost:1080</code> 进行一次 sock5 协议通信</li><li>完成通信后 <code>local</code> 知道要访问 Google</li><li><code>local</code> 将请求加密，并通过 TCP 协议发往海外服务器</li><li>海外服务器接收请求进行解密，访问 Google</li><li>海外服务器把请求后的结果返回给 <code>local</code></li><li><code>local</code> 进行解密后返回给浏览器</li></ol><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>看了一圈各种 VPS 供应商，相比较来说还是搬瓦工性价比更高些，于是最后还是选择了搬瓦工。</p><ul><li><a href="https://bwh88.net/index.php" target="_blank" rel="noopener">搬瓦工官网</a></li><li><a href="https://www.bandwagonhost.net/" target="_blank" rel="noopener">搬瓦工中文网</a>，有各种教程和优惠券</li></ul><p>购买服务器没啥好说的，根据自己的需求进行选择。<a href="https://www.bandwagonhost.net/" target="_blank" rel="noopener">搬瓦工中文网</a> 也有服务器配置的推荐。</p><p>我购买的是 49.9 刀一年的套餐，平均下来一个月也就 27 软妹币左右。<a href="https://csming1995.github.io/" target="_blank" rel="noopener">csming</a> 给了大力赞助，感恩！</p><p>搬瓦工的支付支持 Alipay，所以也不需要找人代付什么的，很方便。</p><h2 id="安装-Shadowsocks"><a href="#安装-Shadowsocks" class="headerlink" title="安装 Shadowsocks"></a>安装 Shadowsocks</h2><p>搬瓦工已经把一键安装 SS 的按钮隐藏起来了，所以我们需要通过命令行手动安装 SS。</p><h3 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h3><p>先在 Main controls 中暂停当前正在运行的服务器。</p><p><img src="/img/in-post/shadowsocks/install-os-1.png" alt=""></p><p>前往 Install new OS 安装新系统。选择 <code>centos-6-x86-bbr</code> 进行安装。</p><p><img src="/img/in-post/shadowsocks/install-os-2.jpg" alt=""></p><p>等待一段时间，安装完成后会在该页面告知服务器的端口号和密码，记得保存下来。</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><p>使用 ssh 命令登录服务器。端口和密码在上述的安装完成页面有给到，IP 地址可以在 Main controls 获取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p&lt;端口&gt; root@&lt;IP 地址&gt;</span><br></pre></td></tr></table></figure><p>回车后按照提示输入密码即可。</p><p>当然，你也可以使用搬瓦工自带的控制台操作服务器，只是我体验了一下觉得很卡，还是 ssh 更好些。</p><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><h4 id="下载-sh-脚本"><a href="#下载-sh-脚本" class="headerlink" title="下载 .sh 脚本"></a>下载 .sh 脚本</h4><p>因为 CentOS 系统是刚安装的新系统，我们先在系统上安装一下 <code>wget</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>然后下载 shadowsocks.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget — no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure><p>下载过程中按照命令行的提示输入 y 进行下载确认。</p><h4 id="赋予脚本可执行权限"><a href="#赋予脚本可执行权限" class="headerlink" title="赋予脚本可执行权限"></a>赋予脚本可执行权限</h4><p>将脚本的权限修改为可执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>执行脚本时系统就在安装 shadowsocks。在这个过程中我们还需要根据命令行提示输入以下信息：</p><ol><li>密码</li><li>默认端口号（使用页面给出的默认端口号就可以了）</li><li>选择加密方式</li></ol><p>完成安装后会展示如下界面：</p><p><img src="/img/in-post/shadowsocks/success.png" alt=""></p><p>Enjoy it!!!</p>]]></content>
    
    <summary type="html">
    
      自由之翼，墙外调查！
    
    </summary>
    
      <category term="磨刀石" scheme="http://jalan.space/categories/%E7%A3%A8%E5%88%80%E7%9F%B3/"/>
    
    
      <category term="Shadowsocks" scheme="http://jalan.space/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>使用 git upstream 从其他远程仓库同步分支</title>
    <link href="http://jalan.space/2019/05/28/2019/git-upstream/"/>
    <id>http://jalan.space/2019/05/28/2019/git-upstream/</id>
    <published>2019-05-28T13:27:00.000Z</published>
    <updated>2019-05-28T13:32:14.783Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们会遇到这样的场景，需要从其他仓库合并某个分支到现有仓库中。</p><p>之前实现这个需求我用了一个很智障的做法：把这个仓库需要的分支 copy 一份到本地仓库的临时分支上，然后进行 merge。</p><p>其实只要把想要同步的远程仓库设置为本地仓库的 upstream，就可以很方便地进行同步操作了。</p><h2 id="什么是-upstream？"><a href="#什么是-upstream？" class="headerlink" title="什么是 upstream？"></a>什么是 upstream？</h2><p><img src="/img/in-post/git-upstream.png" alt=""></p><p>当你从 Github 上 clone 一个别人的 Repo 到本地，因为你不是 Repo 的成员，所以无法向 Repo 推送代码，此时对于本地仓库来说这个 Repo 就是 upstream。</p><p>当你把这个 Repo fork 后，再 clone 到本地，此时你 fork 到自己仓库的 Repo 就是本地仓库的 origin。</p><blockquote><p>When a repo is cloned, it has a default remote called origin that points to your fork on GitHub, not the original repo it was forked from.</p></blockquote><blockquote><p>To keep track of the original repo, you need to add another remote named upstream</p></blockquote><blockquote><p>git remote add upstream git://github.com/user/repo_name.git</p></blockquote><p>所以我们可以通过设置 upstream 来获取远程 Repo 的最新代码。</p><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="built_in">add</span> upstream http<span class="variable">s:</span>//github.<span class="keyword">com</span>/octocat/Spoon-Knife.git</span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v </span><br><span class="line"></span><br><span class="line">origin<span class="string">ssh:</span><span class="comment">//xxx (fetch)</span></span><br><span class="line">origin<span class="string">ssh:</span><span class="comment">//xxx (push)</span></span><br><span class="line">upstream<span class="string">ssh:</span><span class="comment">//yyy (fetch)</span></span><br><span class="line">upstream<span class="string">ssh:</span><span class="comment">//yyy (push)</span></span><br></pre></td></tr></table></figure><h3 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">unset</span>-upstream</span></span><br></pre></td></tr></table></figure><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><p>覆盖本地的 master。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch upstream</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase upstream/master</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://wiki.jikexueyuan.com/project/github-basics/fork-synced.html" target="_blank" rel="noopener">同步你的 Fork 仓库</a></li><li><a href="https://higoge.github.io/2015/07/06/git-remote03/" target="_blank" rel="noopener">Git远程03：分支的upstream</a></li></ul>]]></content>
    
    <summary type="html">
    
      实时同步其他远程仓库
    
    </summary>
    
      <category term="磨刀石" scheme="http://jalan.space/categories/%E7%A3%A8%E5%88%80%E7%9F%B3/"/>
    
    
      <category term="Git" scheme="http://jalan.space/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>二分查找中 mid 值的计算方法</title>
    <link href="http://jalan.space/2019/05/19/2019/the-mid-in-binary-search/"/>
    <id>http://jalan.space/2019/05/19/2019/the-mid-in-binary-search/</id>
    <published>2019-05-18T16:55:00.000Z</published>
    <updated>2019-05-18T17:19:13.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p>最近在刷 LeetCode 的过程中遇到许多 <a href="https://zh.wikipedia.org/zh-hans/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">二分查找</a> 的问题。</p><p>在计算中间值下标 <code>mid</code> 时，我是这样写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = (left + right) // <span class="number">2</span></span><br></pre></td></tr></table></figure><p>后面在评论中看了一些其他大佬的题解，发现大家都是这样写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = left + (right - left) // <span class="number">2</span></span><br></pre></td></tr></table></figure><p>下面就来探究一下为什么 <code>mid = (left + right) // 2</code> 的写法是错误的。</p><h2 id="int-类型"><a href="#int-类型" class="headerlink" title="int 类型"></a>int 类型</h2><p><code>int</code> 是一种数据类型，用于定义整数类型变量的标识符，是带符号整数。</p><p>在现在对计算机中，<code>int</code> 占用 4 字节，32 比特，数据范围为：<code>-2147483648 ~ 2147483647 [-2^31 ~ 2^31-1]</code>。</p><p>那么对于两个都接近 <code>2147483647</code> 的数字而言，它们相加的结果将会溢出，变成负数。</p><p>所以，为了避免溢出情况的发生，我们不能使用 <code>mid = (left + right) // 2</code> 来计算 <code>mid</code> 值，而是使用 <code>mid = left + (right - left) // 2</code> 来作为替代。</p><h2 id="对-Python-而言"><a href="#对-Python-而言" class="headerlink" title="对 Python 而言"></a>对 Python 而言</h2><p>然而对 Python 来说，这种溢出情况是不会发生的。</p><p>在 Python2.7 版本中存在 <code>int</code> 和 <code>long</code> 两个数据类型存储整数，当 <code>int</code> 存在溢出情况时，Python 将会把数转为 <code>long</code> 类型，避免了溢出情况的发生。</p><p>在 Python3 中，就只剩下一个可以任意放大的 <code>int</code> 类型了，也不存在整型溢出的情况啦。</p><p>所以在 Python 中想要 <code>mid = (left + right) // 2</code> 这样写也是没啥问题的。</p><h2 id="二分查找题"><a href="#二分查找题" class="headerlink" title="二分查找题"></a>二分查找题</h2><p>最后扔几题二分查找相关的题目给大家练练手~</p><ul><li><a href="http://jalan.space/leetcode-notebook/research/binary_search/4.html">4. 寻找两个有序数组的中位数</a></li><li><a href="http://jalan.space/leetcode-notebook/research/binary_search/35.html">35. 搜索插入位置</a></li><li><a href="http://jalan.space/leetcode-notebook/research/binary_search/69.html">69. x 的平方根</a></li><li><a href="http://jalan.space/leetcode-notebook/research/binary_search/278.html">278. 第一个错误的版本</a></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://www.zhihu.com/question/36132386" target="_blank" rel="noopener">二分查找有几种写法？它们的区别是什么？</a></li></ul>]]></content>
    
    <summary type="html">
    
      left + (right - left) / 2 的由来
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="算法" scheme="http://jalan.space/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>假装 Poker2 是 HHKB 的键位调整</title>
    <link href="http://jalan.space/2019/05/15/2019/change-poker2-hhkb/"/>
    <id>http://jalan.space/2019/05/15/2019/change-poker2-hhkb/</id>
    <published>2019-05-15T15:16:00.000Z</published>
    <updated>2019-05-15T15:51:10.068Z</updated>
    
    <content type="html"><![CDATA[<p>因为搬了新家，换了大桌子，MacBook Pro + 电脑支架 + 显示器都齐全了，于是把在柜子里吃灰的 Poker2 拿出来装上准备瘫在椅子上写代码。</p><p>然鹅在公司已经习惯 HHKB 键位的后，Poker2 的键位已经无法正常适应了。果然我已经被 HHKB 驯化了啊……</p><p>为了不让吃灰的键盘作废，我打算改一改 Poker2 的键位，假装它是一块四位数的 HHKB。</p><h2 id="键盘修改器"><a href="#键盘修改器" class="headerlink" title="键盘修改器"></a>键盘修改器</h2><p>首先是准备工作。虽然 Poker2 支持键位编程，但是我这么懒的人，还是直接下个键盘键位修改器吧。</p><p>我下载的是 <a href="https://pqrs.org/" target="_blank" rel="noopener">Karabiner</a>。</p><h2 id="键位替换"><a href="#键位替换" class="headerlink" title="键位替换"></a>键位替换</h2><p><a href="https://pqrs.org/" target="_blank" rel="noopener">Karabiner</a> 支持多种键位映射方式。我这边用到的是简单键位映射和复杂键位映射。</p><h3 id="简单映射"><a href="#简单映射" class="headerlink" title="简单映射"></a>简单映射</h3><p>简单映射即键位的直接替换。我对如下键位做了映射：</p><p><img src="/img/in-post/chang-poker2-hhkb/simple.png" alt=""></p><h3 id="复杂映射"><a href="#复杂映射" class="headerlink" title="复杂映射"></a>复杂映射</h3><p>可以从 <a href="https://github.com/pqrs-org/KE-complex_modifications" target="_blank" rel="noopener">KE-complex_modifications</a> 导入你需要的键位。</p><p>只有方向键的选择涉及到复杂键位。最后选了 <code>Change fn + p/l/;/&#39; to arrow keys</code> 作为方向键。</p><hr><p>至此，改造完成。虽然个别按键的大小和距离还略有区别，但基本可以正常使用了~</p>]]></content>
    
    <summary type="html">
    
      买不起键盘的话调调就好了
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 中使用子查询</title>
    <link href="http://jalan.space/2019/05/14/2019/laravel-sub-query/"/>
    <id>http://jalan.space/2019/05/14/2019/laravel-sub-query/</id>
    <published>2019-05-14T14:38:00.000Z</published>
    <updated>2019-05-15T14:07:39.555Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询（Sub Query），也称作内查询（Inner Query）或嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>子查询必须遵循以下规则：</p><ul><li>子查询必须括在圆括号中</li><li>子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较</li><li>子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用</li><li>返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符</li><li>SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用</li><li>子查询不能直接用在集合函数中<br>B- ETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中</li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>来看个示例，示例中子查询用作 SELECT 语句中名为 MaxUnitPrice 的列表达式。示例来自 <a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/performance/subqueries?view=sql-server-2017" target="_blank" rel="noopener">子查询（SQL Server）</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> AdventureWorks2016;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SELECT</span> Ord.SalesOrderID, Ord.OrderDate,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(OrdDet.UnitPrice)</span><br><span class="line">     <span class="keyword">FROM</span> Sales.SalesOrderDetail <span class="keyword">AS</span> OrdDet</span><br><span class="line">     <span class="keyword">WHERE</span> Ord.SalesOrderID = OrdDet.SalesOrderID) <span class="keyword">AS</span> MaxUnitPrice</span><br><span class="line"><span class="keyword">FROM</span> Sales.SalesOrderHeader <span class="keyword">AS</span> <span class="keyword">Ord</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="Laravel-中的写法"><a href="#Laravel-中的写法" class="headerlink" title="Laravel 中的写法"></a>Laravel 中的写法</h2><h3 id="构建-raw-语句"><a href="#构建-raw-语句" class="headerlink" title="构建 raw 语句"></a>构建 raw 语句</h3><p><code>DB::raw</code> 用于在查询中使用原始表达式。不仅限于 <code>raw</code>，也包括下述其他方法：</p><ul><li><code>selectRaw</code></li><li><code>whereRaw</code> / <code>orWhereRaw</code></li><li><code>havingRaw</code> / <code>orHavingRaw</code></li><li><code>orderByRaw</code></li></ul><p>具体用法参考官方文档：<a href="https://laravel.com/docs/5.8/queries#raw-expressions" target="_blank" rel="noopener">Database: Query Builder: Raw Expressions</a>。</p><p>来看个例子：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sub = Abc::<span class="keyword">where</span>(..)-&gt;groupBy(..); <span class="comment">// Eloquent Builder instance</span></span><br><span class="line"></span><br><span class="line">$count = DB::table( DB::raw(<span class="string">"(&#123;$sub-&gt;toSql()&#125;) as sub"</span>) )</span><br><span class="line">-&gt;mergeBindings($sub-&gt;getQuery()) </span><br><span class="line">-&gt;count();</span><br></pre></td></tr></table></figure><ul><li><code>toSql()</code> 获取不带 binding 参数的 SQL 语句</li><li><code>getQuery()</code> 获取完整的 SQL 语句</li><li><code>mergeBindings()</code> 将 binding 参数合并到查询中</li></ul><h3 id="自带闭包"><a href="#自带闭包" class="headerlink" title="自带闭包"></a>自带闭包</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User::whereIn(<span class="string">'id'</span>, <span class="function"><span class="keyword">function</span><span class="params">($query)</span></span>&#123; </span><br><span class="line">    $query-&gt;select(<span class="string">'user_id'</span>) </span><br><span class="line">    -&gt;from(<span class="string">'admin_user'</span>) </span><br><span class="line">    -&gt;whereIn(<span class="string">'type'</span>, [<span class="string">'1'</span>, <span class="string">'2'</span>]); </span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><p>获得的 SQL 如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`user`</span> <span class="keyword">where</span> <span class="symbol">`id`</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="symbol">`user_id`</span> <span class="keyword">FROM</span> <span class="symbol">`admin_user`</span> <span class="keyword">WHERE</span> <span class="symbol">`type`</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/34147224/what-the-meaning-mergebindings-in-laravel" target="_blank" rel="noopener">what the meaning mergeBindings in laravel</a></li><li><a href="https://wiki.jikexueyuan.com/project/sql/sub-queries.html" target="_blank" rel="noopener">SQL 子查询</a></li><li><a href="https://blog.csdn.net/Tim_phper/article/details/78606253" target="_blank" rel="noopener">聊一聊laravel query builder 使用子查询</a></li></ul>]]></content>
    
    <summary type="html">
    
      探究子查询与其在 Laravel 中的写法
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://jalan.space/tags/Laravel/"/>
    
      <category term="SQL" scheme="http://jalan.space/tags/SQL/"/>
    
  </entry>
  
</feed>
