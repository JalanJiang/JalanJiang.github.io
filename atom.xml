<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘归</title>
  
  <subtitle>底色悲凉，自在如风。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jalan.space/"/>
  <updated>2019-04-29T13:53:46.058Z</updated>
  <id>http://jalan.space/</id>
  
  <author>
    <name>Jalan.江佳扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 入门笔记</title>
    <link href="http://jalan.space/2019/04/29/2019/begin-vue/"/>
    <id>http://jalan.space/2019/04/29/2019/begin-vue/</id>
    <published>2019-04-29T13:23:00.000Z</published>
    <updated>2019-04-29T13:53:46.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p>虽然说一直不是很喜欢写前端的东西，但作为一个纯后端来说，想做一些直接提供给普通用户使用的 Demo 始终绕不开界面展示的问题。因为工作中也正好需要使用 Vue 进行项目的开发，所以趁此机会入门 Vue，作为前端新手正式上路。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">node 安装包</a></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="独立版本"><a href="#独立版本" class="headerlink" title="独立版本"></a>独立版本</h4><p>官网下载 <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener"><code>vue.min.js</code></a> 并使用 <code>&lt;script&gt;</code> 标签引入。</p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ul><li>Staticfile CDN（国内）：<a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></li></ul><p>国内的 CDN 较不稳定，还是建议下到本地进行引入。</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">npm</span> install --<span class="built_in">global</span> vue-cli</span><br></pre></td></tr></table></figure><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>定义一个基于 webpack 模板的新项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue init webpack vue-project</span></span><br></pre></td></tr></table></figure><p>进入项目，安装并运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── build 项目构建(webpack)相关代码</span><br><span class="line">├──<span class="built_in"> config </span>配置目录，包括端口号等</span><br><span class="line">├── index.html 首页入口文件</span><br><span class="line">├── node_modules npm 加载的项目依赖模块</span><br><span class="line">├── package.json 项目配置文件</span><br><span class="line">├── src 开发目录</span><br><span class="line">│   ├── App.vue 项目入口文件</span><br><span class="line">│   ├── assets 放置一些图片</span><br><span class="line">│   ├── components 放了一个组件文件</span><br><span class="line">│   ├── main.js 项目的核心文件</span><br><span class="line">│   └── router</span><br><span class="line">├── static</span><br><span class="line">└── test</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>一起来看下 Vue 下载后自带的 Demo。</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将路由指定的组件植入此处 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span> <span class="comment">// 其他文件 import 该文件时用到的名称</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="undefined">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">  -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="undefined">  -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line"><span class="undefined">  margin-top: 60px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">// 关闭生成生产模式的提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>, <span class="comment">// 对应 App.vue 中的 div</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;, <span class="comment">// 页面组成的组件</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span> <span class="comment">// 使用的模板</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router/index.js"></a>router/index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个新路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>, <span class="comment">// 路由路径</span></span><br><span class="line">      name: <span class="string">'HelloWorld'</span>, <span class="comment">// 路由名称</span></span><br><span class="line">      component: HelloWorld <span class="comment">// 路由组件</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="输出-Hello-World！"><a href="#输出-Hello-World！" class="headerlink" title="输出 Hello World！"></a>输出 Hello World！</h3><p>看了上述代码结构后，大家应该很清楚了，如果需要输出 Hello World，修改 <code>HelloWorld.vue</code> 组件即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><ul><li><code>{ {...} }</code> 用于文本插值</li><li><code>v-html</code> 用于输出 HTML 代码</li><li><code>v-bind</code> 指令用于指定属性值</li><li>支持所有 JavaScript 表达式</li></ul><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>指令是带有 <code>v-</code> 前缀的特殊属性，<strong>用于在表达式值改变时，将某些行为应用到 DOM 上</strong>。</p><p><code>v-if</code> 根据表达式 <code>seen</code> 的值来决定是否插入 <code>p</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    seen: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参数：<code>指令:参数</code></li><li>修饰符：以 <code>.</code> 指明的特殊后缀，用于指出<strong>一个指令应该以特殊方式绑定</strong></li></ul><h4 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h4><p>使用 <code>v-model</code> 双向绑定数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器用于文本格式化。</p><ul><li>用“管道符”指示</li><li>接受表达式的值作为第一个参数</li><li>过滤器是 JavaScript 函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在两个大括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 v-bind 指令中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许串联 --&gt;</span></span><br><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure><p>对输入的字符串第一个字母转为大写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    message: <span class="string">'runoob'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  filters: &#123;</span></span><br><span class="line"><span class="actionscript">    capitalize: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      value = value.toString()</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p><code>v-bind</code> 缩写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on</code> 缩写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>关键字：</p><ul><li><code>v-if</code></li><li><code>v-else</code></li><li><code>v-else-if</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">      A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">      B</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">      C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      Not A/B/C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    type: <span class="string">'C'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定键名和索引进行迭代：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>关键字：<code>v-for</code></li><li>迭代对象需要是 <code>site in sites</code> 形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="actionscript">      &#123; name: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; name: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; name: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>当处理一些复杂逻辑时，可以把具体实现放到 <code>computed</code> 中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计算属性的 getter</span></span></span><br><span class="line"><span class="actionscript">    reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="computed-与-method-的区别"><a href="#computed-与-method-的区别" class="headerlink" title="computed 与 method 的区别"></a>computed 与 method 的区别</h4><ul><li>效果上是一样的</li><li>computed 基于它的以来缓存，只有相关依赖发生改变时才会重新获取</li><li>methods 在重新渲染时总会重新调用执行</li></ul><h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><p>关键字：<code>watch</code>，用于响应数据的变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        counter: 1</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 当 counter 改变时 alert 弹窗</span></span></span><br><span class="line"><span class="actionscript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span><span class="params">(nval, oval)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h3><p><code>v-on</code> 用于监听事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'Vue.js'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 在 `methods` 对象中定义方法</span></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="actionscript">    greet: <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// `this` 在方法里指当前 Vue 实例</span></span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// `event` 是原生 DOM 事件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (event) &#123;</span></span><br><span class="line"><span class="undefined">          alert(event.target.tagName)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 也可以用 JavaScript 直接调用方法</span></span></span><br><span class="line"><span class="actionscript">app.greet() <span class="comment">// -&gt; 'Hello Vue.js!'</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>使用 <code>v-model</code> 进行双向绑定数据。</p><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>多个复选框绑定到同一个数组中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Runoob"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">value</span>=<span class="string">"Taobao"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taobao"</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    checked : <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    checkedNames: []</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Runoob"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    picked : <span class="string">'Runoob'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="select-列表"><a href="#select-列表" class="headerlink" title="select 列表"></a>select 列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.runoob.com"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span></span><br><span class="line">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="actionscript">    selected: <span class="string">''</span> </span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li><code>.lazy</code>：在默认情况下， v-model 在 input 事件中同步输入框的值与数据，添加一个修饰符 lazy 后转变为在 change 事件中同步</li><li><code>.number</code>：输入值转为 number</li><li><code>.trim</code>：过滤首尾空格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 "change" 而不是 "input" 事件中更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>组件可以扩展 HTML 元素，对代码进行封装</li><li>任何类型的应用界面都可以抽象为一个组件树</li></ul><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>注册一个全局组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(tagName, options)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>tagName</code>：组件名</li><li><code>options</code>：配置选项</li></ul><p>组件调用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tagName</span>&gt;</span><span class="tag">&lt;/<span class="name">tagName</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注册一个组件并使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>局部组件只能在某个实例中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &lt;runoob&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="actionscript">    <span class="string">'runoob'</span>: Child</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><ul><li><code>prop</code> 是父组件用来传递数据的自定义属性</li><li>父组件的数据需要通过 <code>props</code> 把数据传递给子组件</li><li>子组件需要显式地用 <code>props</code> 选项声明 <code>prop</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">Vue Router 中文文档</a></p><p><code>&lt;router-link&gt;</code> 相关属性：</p><ul><li><code>to</code>：表示目标路由的链接。 当被点击后，内部会立刻把 to 的值传到 <code>router.push()</code></li><li><code>replace</code>：当点击时，会调用 <code>router.replace()</code> 而不是 <code>router.push()</code>，导航后不会留下 history 记录</li><li><code>append</code>：在当前 (相对) 路径前添加基路径</li><li><code>tag</code>：想要 <code>&lt;router-link&gt;</code> 渲染成某种标签可以使用 <code>tag</code></li><li><code>active-class</code>：设置链接激活时使用的 CSS 类名</li><li><code>exact-active-class</code>：配置当链接被精确匹配的时候应该激活的 class</li><li><code>event</code>：声明可以用来触发导航的事件</li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入 Vue 和 VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure><h2 id="Ajax-请求"><a href="#Ajax-请求" class="headerlink" title="Ajax 请求"></a>Ajax 请求</h2><p>Vue 使用异步加载需要使用到 vue-resource 库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#box'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'Hello World!'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//发送get请求</span></span><br><span class="line">               <span class="keyword">this</span>.$http.get(<span class="string">'get.php'</span>, &#123;<span class="attr">params</span> : &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">document</span>.write(res.body);    </span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'请求失败处理'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>emulateJSON 的作用： 如果Web服务器无法处理编码为 application/json 的请求，你可以启用 emulateJSON 选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#box'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'Hello World!'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            post:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//发送 post 请求</span></span><br><span class="line">                <span class="keyword">this</span>.$http.post(<span class="string">'/try/ajax/demo_test_post.php'</span>,&#123;<span class="attr">name</span>:<span class="string">"test"</span>,<span class="attr">url</span>:<span class="string">"http://www.runoob.com"</span>&#125;,&#123;<span class="attr">emulateJSON</span>:<span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">document</span>.write(res.body);    </span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res.status);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他请求方式"><a href="#其他请求方式" class="headerlink" title="其他请求方式"></a>其他请求方式</h3><p>vue-resource 还提供了其他 7 种符合 RESTful 设计的请求方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get(url, [options])</span><br><span class="line">head(url, [options])</span><br><span class="line"><span class="keyword">delete</span>(url, [options])</span><br><span class="line">jsonp(url, [options])</span><br><span class="line">post(url, [body], [options])</span><br><span class="line">put(url, [body], [options])</span><br><span class="line">patch(url, [body], [options])</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue 中文文档</a></li><li><a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">Vue.js 教程|菜鸟教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      前端新手村试炼
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Vue" scheme="http://jalan.space/tags/Vue/"/>
    
      <category term="前端" scheme="http://jalan.space/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git Commit message 编写规范与那些年我写过的奇怪 message</title>
    <link href="http://jalan.space/2019/04/24/2019/git-commit-message/"/>
    <id>http://jalan.space/2019/04/24/2019/git-commit-message/</id>
    <published>2019-04-24T13:29:00.000Z</published>
    <updated>2019-04-24T13:36:33.959Z</updated>
    
    <content type="html"><![CDATA[<p>作为<del>代码狗</del>程序员，每天肯定离不开各种 pull / push/ commit / add，离不开填写 Commit message。</p><p>对于如何写 Commit message 我也一度十分纠结。</p><ul><li>今天新增了好几个功能，是要下班时候一起提交还是每开发完一个功能做一次提交呢？一起提交的话 message 要怎么写呢？</li><li>直接用中文来写吗？好像怪傻*的。用英文又怕词不达意</li><li>大家写的 message 乱七八糟的看起来好丑……</li></ul><p>于是经历了十分漫长的乱写历程，最近因为团队对 Commit message 的规范化，我也终于规范了自己的书写格式。</p><p>下面这篇文章就来聊一聊曾经我写的奇怪 Commit message、Commit message 的规范写法以及为何需要规范化。</p><p>好了，开始吧，从纪念奇奇怪怪的 Commit message 开始。</p><h2 id="奇怪的写法"><a href="#奇怪的写法" class="headerlink" title="奇怪的写法"></a>奇怪的写法</h2><h3 id="没有写法"><a href="#没有写法" class="headerlink" title="没有写法"></a>没有写法</h3><p>最奇怪的写法就是没有写法（认真脸）。</p><p>提交的时候想到什么就写什么，曾经甚至为了装逼狂甩英文，当然甩了一段时间后就甩不下去了……</p><p>这种没有写法的最大缺点就是：<strong>整个团队的 Commit message 记录真的很丑</strong>……</p><p>我曾经看到有（前）同事在 Commit Message 里面直接填写一个句号或逗号提交。</p><p>如果没有明确的规范，大家为了省事真的什么 message 都写得出来。</p><h3 id="寻找规范"><a href="#寻找规范" class="headerlink" title="寻找规范"></a>寻找规范</h3><p>开始写自己的项目后充分认识到了自己强迫症的本质。为了满足自己 Commit message 强迫症，开始寻找规范。</p><p>下面是我找到的其中一种规范：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[scope]</span>message</span><br></pre></td></tr></table></figure><p>scope 如下：</p><ul><li>feat(feature)</li><li>fix(bug fix)</li><li>hotfix(workaround)</li><li>docs(documentation)</li><li>style(formatting)</li><li>refactor</li><li>test(when adding missing tests)</li><li>chore(maintain)</li><li>improve(improvement, e.g. enhanced feature)</li></ul><p>当时也践行了一段时间，我上个月应该还是这样写的。</p><p><img src="/img/in-post/git-commit-v.png" alt=""></p><p>规范化后确实好看了很多，缺点的话我们一起看看 Angular 规范后就知道了。</p><h2 id="该怎么写"><a href="#该怎么写" class="headerlink" title="该怎么写"></a>该怎么写</h2><p>这里以 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noopener">Angular 规范</a> 举例，也是我现在团队在用的规范。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>共包含三个部分：</p><ul><li>Header（必须）</li><li>Body（可省略）</li><li>Footer（可省略）</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;type&gt;</span>(<span class="params">&lt;scope&gt;</span>): <span class="params">&lt;subject&gt;</span></span><br><span class="line"><span class="comment">// 空一行</span></span><br><span class="line"><span class="params">&lt;body&gt;</span></span><br><span class="line"><span class="comment">// 空一行</span></span><br><span class="line"><span class="params">&lt;footer&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 仅有一行，包含三个字段：</p><ul><li>type（必需）：用于说明 commit 的类别</li><li>scope（可选）：用于说明 commit 影响的范围</li><li>subject（必需）：commit 目的的简短描述</li></ul><p>其中 type 只允许使用下面 7 个标识：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Body 是对本次 commit 的详细描述，可分成多行。</p><p>要注意：应该说明代码变动的动机，以及与以前行为的对比。</p><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>该部分用于两种情况：</p><ol><li>不兼容的变动：与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头</li><li>关闭 Issue：commit 针对某个 issue，在 Footer 中可以写上 <code>Closes #123</code></li></ol><h3 id="特殊情况-Revert"><a href="#特殊情况-Revert" class="headerlink" title="特殊情况 Revert"></a>特殊情况 Revert</h3><p>有一种特殊情况，如果当前 commit 用于撤销以前的 commit：</p><ul><li>必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header</li><li>Body部分的格式是固定的，必须写成 <code>This reverts commit &amp;lt;hash&gt;.</code><ul><li><code>hash</code> 为被撤销 commit 的 SHA 标识符</li></ul></li></ul><p>例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): <span class="keyword">add</span><span class="bash"> <span class="string">'graphiteWidth'</span> option</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span></span><br></pre></td></tr></table></figure><hr><p>使用新规范后我的 commit 如下：</p><p><img src="/img/in-post/git-commit-r.png" alt=""></p><h2 id="为什么这么写"><a href="#为什么这么写" class="headerlink" title="为什么这么写"></a>为什么这么写</h2><p>看完上述规范后你可能觉得太麻烦了，commit 的时候随随便便提交一条信息不就好了，为什么要这么麻烦呢？格式化、规范化的 Commit message 究竟有什么用呢？</p><h3 id="方便浏览"><a href="#方便浏览" class="headerlink" title="方便浏览"></a>方便浏览</h3><p>当然是为了好看了。</p><p>只看标识符就可以明白提交的目的相当舒服。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log HEAD --pretty=format:<span class="comment">%s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">doc</span><span class="params">(README)</span>：更新图标，整理格式</span></span><br><span class="line"><span class="function"><span class="title">refactor</span><span class="params">(auth)</span>：修改签名算法为 <span class="title">hmac</span>-<span class="title">sh1</span></span></span><br><span class="line"><span class="function"><span class="title">feat</span><span class="params">(auth)</span>：签名算法</span></span><br><span class="line"><span class="function"><span class="title">refactor</span><span class="params">(account)</span>：修改变量获取方法</span></span><br><span class="line"><span class="function"><span class="title">refactor</span><span class="params">(auth)</span>：改为从数据库获取鉴权信息</span></span><br><span class="line"><span class="function"><span class="title">feat</span><span class="params">(config)</span>：增加 <span class="title">auth</span> 加密信息配置</span></span><br><span class="line"><span class="function"><span class="title">doc</span><span class="params">(auth)</span>：修改鉴权算法说明</span></span><br><span class="line"><span class="function"><span class="title">doc</span><span class="params">(auth)</span>：鉴权算法定义</span></span><br><span class="line"><span class="function"><span class="title">feat</span><span class="params">(account)</span>：发送邮件验证码</span></span><br></pre></td></tr></table></figure><h3 id="便于快速查找"><a href="#便于快速查找" class="headerlink" title="便于快速查找"></a>便于快速查找</h3><p>例如只想找新增功能，可以这样：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git log HEAD --grep feat</span><br><span class="line"></span><br><span class="line">commit <span class="number">164</span>b5f8245dff63a18360aa8434aa7066e305eb8</span><br><span class="line"><span class="symbol">Author:</span> JalanJiang <span class="params">&lt;<span class="number">448300947</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Sat Apr <span class="number">20</span> <span class="number">22</span>:<span class="number">40</span>:<span class="number">17</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    feat(auth)：签名算法</span><br><span class="line"></span><br><span class="line">commit <span class="number">96e3059</span>f1f76bdd6e756786677412d06473ecdd7</span><br><span class="line"><span class="symbol">Author:</span> JalanJiang <span class="params">&lt;<span class="number">448300947</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Fri Apr <span class="number">19</span> <span class="number">23</span>:<span class="number">13</span>:<span class="number">01</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    feat(config)：增加 auth 加密信息配置</span><br><span class="line"></span><br><span class="line">commit <span class="number">19</span>ca524ac438742e0c327a3b0586670db587979a</span><br><span class="line"><span class="symbol">Author:</span> JalanJiang <span class="params">&lt;<span class="number">448300947</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Wed Apr <span class="number">17</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">40</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    feat(account)：发送邮件验证码</span><br></pre></td></tr></table></figure><h3 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h3><p>可以借助 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 来完成，在这里不多做赘述了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>规范没有绝对的好坏，只要适合团队和个人就行</li><li>好的习惯尽早养成，受益终身</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">阮一峰：Commit message 和 Change log 编写指南</a></li><li><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></li></ul>]]></content>
    
    <summary type="html">
    
      feat(blog)：新增一篇博文
    
    </summary>
    
      <category term="磨刀石" scheme="http://jalan.space/categories/%E7%A3%A8%E5%88%80%E7%9F%B3/"/>
    
    
      <category term="Git" scheme="http://jalan.space/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>《灵能百分百》观后感</title>
    <link href="http://jalan.space/2019/04/13/2019/hun-percent/"/>
    <id>http://jalan.space/2019/04/13/2019/hun-percent/</id>
    <published>2019-04-13T13:49:00.000Z</published>
    <updated>2019-04-29T13:03:30.512Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/hun-percent/cover.jpeg" alt=""></p><p>在 <a href="https://csming1995.github.io/" target="_blank" rel="noopener">csm</a> 的安利下，这周把灵能百分百补完了。先放下 B 站链接，哔哩哔哩 (゜-゜)つロ 干杯~-bilibili：</p><ul><li><a href="https://www.bilibili.com/bangumi/media/md5058/?from=search&amp;seid=17009427973707425447" target="_blank" rel="noopener">灵能百分百 第一季</a></li><li><a href="https://www.bilibili.com/bangumi/media/md4762734/?from=search&amp;seid=17009427973707425447" target="_blank" rel="noopener">灵能百分百 第二季</a></li></ul><h2 id="与众不同的少年漫"><a href="#与众不同的少年漫" class="headerlink" title="与众不同的少年漫"></a>与众不同的少年漫</h2><p>相信王道少年漫大家或多或少都看过几部，例如鸟山明大师的 《龙珠》，咕咕精富坚的《全职猎人》。对这类漫画而言，主角在<strong>力量</strong>上的成长是重要的主线，主角为了战胜邪恶、摆脱不公，需要不断地变得强大。</p><p>但 <a href="https://baike.baidu.com/item/one/19858252?fr=aladdin" target="_blank" rel="noopener">ONE</a> 笔下的少年漫并非如此。</p><p>和 <a href="https://movie.douban.com/subject/26339248/" target="_blank" rel="noopener">《一拳超人》</a> 中的埼玉一样，《灵能百分百》中的主角茂夫生来就站在了“超能力”的天花板，拥有他人无法企及的巨大灵力。</p><p>然而，和弟弟律相比，茂夫学习不好、不善言谈、身体羸弱……面对喜欢的女生也因为自卑而迟迟不敢表白。</p><p>虽然拥有强大的灵力，但这份灵力并不能帮助茂夫解决现实生活中的种种问题。茂夫和所有青春期的少年一样，面对生活迷茫、困惑着，他甚至因为自己无法控制超能力而倍感自卑。</p><p>在 <a href="https://baike.baidu.com/item/one/19858252?fr=aladdin" target="_blank" rel="noopener">ONE</a> 的笔下，主角的成长并非体现在力量上，而是对自身世界的探索和不断强大的内心，这也是让观众产生共鸣的地方——我们都是芸芸众生中特别而又普通的人。</p><p><img src="/img/in-post/hun-percent/mob-run.jpeg" alt=""></p><h2 id="善意百分百"><a href="#善意百分百" class="headerlink" title="善意百分百"></a>善意百分百</h2><p>我对这部番的一句话总结是：<strong>一个有人情味的好人才能超越 100% 的人</strong>。</p><p>主角茂夫是被周围人的善意围绕的：师傅灵幻的提点、弟弟律的关心、肉改部前辈们的照顾……因此茂夫也是一个内心充满善意的小天使，他没有因为自己拥有超人力而觉得高人一等，“不对人类使用超能力”这一约定他也始终践行着。</p><p><img src="/img/in-post/hun-percent/mob-person.jpeg" alt=""></p><p>而这些善意，都是巨大的力量。</p><p>因为这些善意，茂夫不断地被身边的人改变，而茂夫用自身的善意也在不断改变身边的人。最好的例子就是灵幻吧，与茂夫互相依赖、互相救赎。</p><p><img src="/img/in-post/hun-percent/mob.jpeg" alt=""></p><p>不知道要成为什么样的人？那就先成为有人情味的好人吧！</p><h2 id="完结撒盐"><a href="#完结撒盐" class="headerlink" title="完结撒盐"></a>完结撒盐</h2><p>看完至今还对灵幻对茂夫说的那句话记忆犹新：</p><blockquote><p>不愿意的话，就算逃跑也没有关系。</p></blockquote><p>对于刚刚逃跑的我来说，这句话是来自异次元世界的莫大善意。</p><p>现在和茂夫一样迷茫的我，希望终有一天也可以堂堂正正地成为自己人生的主角吧。</p><p><img src="/img/in-post/hun-percent/mob-end.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      不愿意的话，就算逃跑也没有关系
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="影评" scheme="http://jalan.space/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm + Xdebug + Postman 调试环境配置</title>
    <link href="http://jalan.space/2019/04/10/2019/phpstorm-xdebug-postman/"/>
    <id>http://jalan.space/2019/04/10/2019/phpstorm-xdebug-postman/</id>
    <published>2019-04-10T12:58:00.000Z</published>
    <updated>2019-04-29T13:54:22.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p>这都 9102 年啦，如果还在疯狂 <code>var_dump</code> <code>print</code> 的进行调试，那也太慢了吧。对于开发者而言，趁手的调试器必不可少。</p><p>在 PHP 开发环境下，目前有两种流行的调试器：</p><ul><li><a href="https://xdebug.org/" target="_blank" rel="noopener">Xdebug</a></li><li><a href="https://www.zend.com/en/products/server/z-ray" target="_blank" rel="noopener">Zend Debugger</a></li></ul><p>由于换了新电脑（捂脸），今天就来重温一下 macOS 环境下 Xdebug 的配置。</p><h1 id="Xdebug-原理"><a href="#Xdebug-原理" class="headerlink" title="Xdebug 原理"></a>Xdebug 原理</h1><p>本质上是一种 C/S 结构。</p><ul><li>Client：Xdebug 插件</li><li>Server：IDE</li><li>通信协议：<a href="https://xdebug.org/docs-dbgp.php" target="_blank" rel="noopener">DBGp</a></li></ul><p>更加详细的介绍可以前往 <a href="https://xdebug.org/docs/remote" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="单人调试"><a href="#单人调试" class="headerlink" title="单人调试"></a>单人调试</h2><p>在 <code>php.ini</code> 中写死了 IDE 的 IP 地址以及监听端口，不支持多用户调试。</p><p><img src="https://xdebug.org/images/docs/dbgp-setup.gif" alt="With a static IP/single developer"></p><h2 id="多人调试"><a href="#多人调试" class="headerlink" title="多人调试"></a>多人调试</h2><p>无需配置 <code>remote_host</code>，而是配置 <code>xdebug.remote_connect_back=On</code>，Xdebug 会记下来访地址，作为调试时的连接目标。</p><p><img src="https://xdebug.org/images/docs/dbgp-setup2.gif" alt="With an unknown IP/multiple developers"></p><h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><h2 id="Xdebug"><a href="#Xdebug" class="headerlink" title="Xdebug"></a>Xdebug</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用 <code>pecl</code> 命令，即可完成当前 PHP 版本对应的 Xdebug 的安装。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl <span class="keyword">install</span> xdebug</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改 <code>php.ini</code>，添加如下配置：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">xdebug.<span class="attr">remote_enable</span> = on <span class="comment"># 启用远程调试</span></span><br><span class="line">xdebug.<span class="attr">remote_host</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">xdebug.<span class="attr">remote_port</span> = <span class="number">9050</span> <span class="comment"># 监听端口</span></span><br><span class="line">xdebug.<span class="attr">remote_handler</span> = dbgp</span><br><span class="line">xdebug.<span class="attr">idekey</span> = PHPSTORM</span><br><span class="line">xdebug.<span class="attr">remote_log</span> = /tmp/xdebug.log</span><br></pre></td></tr></table></figure><p>修改保存后重启 <code>php-fpm</code> 服务。</p><h2 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h2><p>打开 PhpStorm 的配置面板。</p><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><p>如图，配置端口号为上述配置的 <code>xdebug.remote_port</code>。</p><p><img src="/img/in-post/xdebug/port-config.png" alt="配置端口"></p><h3 id="配置-DBGp-Proxy"><a href="#配置-DBGp-Proxy" class="headerlink" title="配置 DBGp Proxy"></a>配置 DBGp Proxy</h3><p>此处 <code>IDE key</code> 需要与 <code>xdebug.idekey</code> 一致。</p><p>Host 与 Port 均为所运行项目的地址与端口。</p><p><img src="/img/in-post/xdebug/dbgp-config.png" alt="DBGp Proxy 配置"></p><h3 id="配置-Servers"><a href="#配置-Servers" class="headerlink" title="配置 Servers"></a>配置 Servers</h3><p>与 DBGp Proxy 相同，这里的 Host 和 Port 是所运行项目的地址与端口。</p><p><img src="/img/in-post/xdebug/servers-config.png" alt="Servers 配置"></p><h3 id="新增-Run-Debug-Configurations"><a href="#新增-Run-Debug-Configurations" class="headerlink" title="新增 Run/Debug Configurations"></a>新增 Run/Debug Configurations</h3><p>选择新增一个 <code>PHP Web Page</code> ，<code>Server</code> 下拉框选择刚刚配置的过的 <code>Servers</code>。</p><p><img src="/img/in-post/xdebug/add-configurations.png" alt="新增 Configurations"></p><h1 id="进入调试"><a href="#进入调试" class="headerlink" title="进入调试"></a>进入调试</h1><h2 id="PhpStorm-开启监听"><a href="#PhpStorm-开启监听" class="headerlink" title="PhpStorm 开启监听"></a>PhpStorm 开启监听</h2><p>将 PhpStorm 右上角的小电话点绿，开始监听，随后点击小爬虫即可进入调试模式。</p><p><img src="/img/in-post/xdebug/listen.png" alt="开启监听"></p><p>然后在需要的地方打上断点就可以啦~</p><h2 id="使用-Postman-请求"><a href="#使用-Postman-请求" class="headerlink" title="使用 Postman 请求"></a>使用 Postman 请求</h2><p>那么，如何让 IDE 监听到我们发送的请求呢？</p><p>这就需要在请求中带上 <code>cookie</code> 与 <code>XDEBUG_SESSION_START</code> 参数了。</p><p><img src="/img/in-post/xdebug/postman.png" alt="Postman 请求体"></p><p>其中，<code>XDEBUG_SESSION_START</code> 的值在开启调试后的 Debugger 窗口中可以找到。<code>cookie</code> 所带值需要与 <code>IDE key</code> 相匹配。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://segmentfault.com/a/1190000011387666" target="_blank" rel="noopener">使用 Xdebug 在 PHPStorm 中调试 PHP 程序(框架/原生均适用)</a></li><li><a href="https://segmentfault.com/a/1190000011332021" target="_blank" rel="noopener">PHP xdebug 调试工具安装与使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      在 PhpStorm 中如何捕获来自 Postman 的请求？
    
    </summary>
    
      <category term="磨刀石" scheme="http://jalan.space/categories/%E7%A3%A8%E5%88%80%E7%9F%B3/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Gin 框架构建 RESTFul API 之请求参数验证</title>
    <link href="http://jalan.space/2019/04/06/2019/go-gin-validate/"/>
    <id>http://jalan.space/2019/04/06/2019/go-gin-validate/</id>
    <published>2019-04-06T14:59:00.000Z</published>
    <updated>2019-04-08T14:39:29.654Z</updated>
    
    <content type="html"><![CDATA[<p>Gin 使用 <a href="https://github.com/go-playground/validator" target="_blank" rel="noopener">go-playground/validator.v8 </a> 进行验证，详细文档见 <a href="http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags" target="_blank" rel="noopener">package validator</a>。</p><p>假设我们现在有一个用户登录的接口，使用 <code>POST</code> 方法接收 <code>email</code> 和 <code>password</code> 两个参数。</p><h2 id="模型绑定"><a href="#模型绑定" class="headerlink" title="模型绑定"></a>模型绑定</h2><p>通过模型绑定，我们能<strong>将请求体绑定到类型</strong>。</p><h3 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h3><p>定义一个名为 <code>LoginForm</code> 的结构体，将 <code>eamil</code> 和 <code>password</code> 两个参数放置其中。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">LoginForm</span> struct &#123;</span><br><span class="line"><span class="type">Email</span> string</span><br><span class="line"><span class="type">Password</span> string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h2><p>对于绑定的字段，我们需要对其设置相应的绑定标签。</p><p>具体的标签列表可查看 <a href="https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags" target="_blank" rel="noopener">官方文档</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type LoginForm <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Email <span class="built_in">string</span> `form:<span class="string">"email"</span> binding:<span class="string">"required"</span>` <span class="comment">// 绑定表单类型的数据，且字段必须存在</span></span><br><span class="line">Password <span class="built_in">string</span> `form:<span class="string">"password"</span> binding:<span class="string">"required"</span>`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绑定方法"><a href="#绑定方法" class="headerlink" title="绑定方法"></a>绑定方法</h2><h3 id="Must-bind"><a href="#Must-bind" class="headerlink" title="Must bind"></a>Must bind</h3><p>一旦绑定失败则直接返回 400 错误。</p><p>相关方法：</p><ul><li><code>Bind</code></li><li><code>BindJSON</code></li><li><code>BindQuery</code></li></ul><h3 id="Should-bind"><a href="#Should-bind" class="headerlink" title="Should bind"></a>Should bind</h3><p>一旦失败，并不会立即响应 400 错误，而是将错误信息返回给上下文环境，开发者需要自行处理。</p><p>相关方法：</p><ul><li><code>ShouldBind</code></li><li><code>ShouldBindJSON</code></li><li><code>ShouldBindQuery</code></li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type <span class="type">LoginForm</span> <span class="class"><span class="keyword">struct</span> </span>&#123;</span><br><span class="line"><span class="type">Email</span> string `form:<span class="string">"email"</span> binding:<span class="string">"required"</span>`</span><br><span class="line"><span class="type">Password</span> string `form:<span class="string">"password"</span> binding:<span class="string">"required"</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(<span class="built_in">c</span> *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> loginForm <span class="type">LoginForm</span></span><br><span class="line">err := <span class="built_in">c</span>.<span class="type">ShouldBind</span>(&amp;loginForm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 相关错误处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/keytounix/article/details/79336574" target="_blank" rel="noopener">golang实战使用gin+xorm搭建go语言web框架restgo详解5.5 控制器模型绑定</a></li><li><a href="https://segmentfault.com/a/1190000013297705#articleHeader6" target="_blank" rel="noopener">Gin实践 连载三 搭建Blog API’s（二）</a></li><li><a href="https://gin-gonic.com/zh-cn/docs/" target="_blank" rel="noopener">Gin 中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      Model binding and validation
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 PHP 的自动加载机制与 Laravel 中的具体实现</title>
    <link href="http://jalan.space/2019/04/04/2019/php-autoload/"/>
    <id>http://jalan.space/2019/04/04/2019/php-autoload/</id>
    <published>2019-04-04T12:13:00.000Z</published>
    <updated>2019-04-29T13:55:39.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章同时发布在知乎专栏 <a href="https://zhuanlan.zhihu.com/c_1099371474774818816" target="_blank" rel="noopener">前端后端客户端</a>，专栏专注于前端、后端、客户端开发的技术分享与探讨，欢迎关注。</p></blockquote><p>各位 PHPer 从入门到<del>跑路</del>精通的过程一般来说是这样的：</p><ol><li>代码很简单，都堆在一个页面里</li><li>功能多了，开始按功能拆分代码，践行 OOP，使用各种 <code>include()</code>、<code>require()</code> 来引入代码</li><li>学习使用框架，发现直接 <code>use xxx</code> 就可以很好地使用外部类了，这也太神奇了吧~！（破音尖叫</li></ol><p>可能大家忙于惊呼神奇未曾探究框架是如何帮开发者实现外部文件加载的，今天我们就来具体谈谈 PHP 自动加载机制，以及诗意框架 <a href="https://laravel.com/" target="_blank" rel="noopener">Laravel</a> 是如何实现它的。</p><h2 id="为何需要自动加载"><a href="#为何需要自动加载" class="headerlink" title="为何需要自动加载"></a>为何需要自动加载</h2><p>在没有自动加载机制前，我们使用外部类都需要手动使用 <code>include()</code> 或 <code>require()</code> 进行文件引入，如果只是小项目的开发还能 hold 住，但一旦项目规模扩大就是一场噩梦：</p><ul><li>需要使用很多类时容易造成遗漏或引入不必要的文件</li><li>若要避免重复引入需使用 <code>require_once()</code>，但 <code>require_once()</code> 的速度要比 <code>require()</code> 慢上 2-3 倍</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Person.class.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $name, $age;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">($name, $age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* no_autoload.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> (”Person.class.php”);</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(”Altair”, <span class="number">6</span>);</span><br><span class="line">var_dump ($person);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>为了解决上述问题，PHP 提供了一个解决方案：<strong>类的自动加载（autoload）机制</strong>。</p><h2 id="类的自动加载机制"><a href="#类的自动加载机制" class="headerlink" title="类的自动加载机制"></a>类的自动加载机制</h2><h3 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h3><p>在 PHP5 中，若我们使用一个没有加载的类，PHP 会自动运行 <code>__autoload()</code> 函数。因此，我们可以对 <code>__autoload()</code> 进行自定义，从而完成类的加载。</p><p><code>__autoload()</code> 需要完成的功能有：</p><ol><li>根据类名确定类文件名（需要约定映射规则）</li><li>确定类的具体路径（需要约定映射规则）</li><li>加载类（<code>include()</code> 或 <code>require()</code> 的实现）</li></ol><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>摆脱长长的 <code>include()</code> 与 <code>require()</code></li><li>使用类时才会引入文件，实现了 <code>lazy loading</code></li><li>无需知道类的实际文件地址，实现了逻辑和实体文件的分离</li></ol><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p><code>__autoload()</code> 好处多多，但也同样存在着问题：</p><ol><li>是全局函数，只能定义一次，不够灵活</li><li>类名和文件名的映射规则可能各不相同，都在一个函数中实现造成函数臃肿混乱</li></ol><p>解决上述问题，我们需要将不同的映射关系写到不同的 <code>__autoload()</code> 中去，再进行统一的注册和管理。</p><p>因此，SPL Autoload 系列函数就出现了，它帮助我们使用 autoload 调用栈。</p><h3 id="SPL-Autoload"><a href="#SPL-Autoload" class="headerlink" title="SPL Autoload"></a>SPL Autoload</h3><p>函数列表与使用方式具体见 <a href="https://www.php.net/manual/en/ref.spl.php" target="_blank" rel="noopener">SPL Functions</a>。</p><h2 id="类名与文件映射规则"><a href="#类名与文件映射规则" class="headerlink" title="类名与文件映射规则"></a>类名与文件映射规则</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li><a href="https://www.php.net/manual/zh/language.namespaces.rationale.php" target="_blank" rel="noopener">命名空间概述</a></li><li><a href="https://laravelacademy.org/post/4221.html" target="_blank" rel="noopener">现代 PHP 新特性系列（一） —— 命名空间</a></li></ul><h3 id="映射规范"><a href="#映射规范" class="headerlink" title="映射规范"></a>映射规范</h3><ul><li><a href="https://www.zybuluo.com/phper/note/65033" target="_blank" rel="noopener">PHP中PSR-[0-4]规范</a></li></ul><h2 id="包管理工具-Composer"><a href="#包管理工具-Composer" class="headerlink" title="包管理工具 Composer"></a>包管理工具 Composer</h2><p>使用 PHP 自动加载 + PSR4 标准 我们就可以自己实现一套自动加载程序了。但有了 Composer 这款包管理神器，我们也无需自己动手了。</p><p>Composer 可以帮助解决以下问题：</p><ul><li>项目依赖若干个库</li><li>其中一些库依赖于其他库</li><li>声明所依赖的东西</li><li>根据版本查找需要安装的包并安装它</li></ul><h3 id="自动加载文件"><a href="#自动加载文件" class="headerlink" title="自动加载文件"></a>自动加载文件</h3><ol><li><code>autoload_real.php</code>：自动加载功能的引导类，负责 composer 加载类的初始化和注册</li><li><code>ClassLoader.php</code>：composer 加载类，自动加载功能的核心类</li><li><code>autoload_static.php</code>：顶级命名空间初始化类，用于给核心类初始化顶级命名空间</li><li><code>autoload_classmap.php</code>: 自动加载的最简单形式，有完整的命名空间和文件目录的映射</li><li><code>autoload_files.php</code>: 用于加载全局函数的文件，存放各个全局函数所在的文件路径名</li><li><code>autoload_namespaces.php</code>: 符合PSR0标准的自动加载文件，存放着顶级命名空间与文件的映射</li><li><code>autoload_psr4.php</code>: 符合PSR4标准的自动加载文件，存放着顶级命名空间与文件的映射</li></ol><h2 id="Laravel-的具体实现"><a href="#Laravel-的具体实现" class="headerlink" title="Laravel 的具体实现"></a>Laravel 的具体实现</h2><h3 id="从入口文件出发"><a href="#从入口文件出发" class="headerlink" title="从入口文件出发"></a>从入口文件出发</h3><p>我们从 Laravel 的入口文件 <code>public/index.php</code> 看起：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| Register The Auto Loader</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Composer provides a convenient, automatically generated class loader for</span></span><br><span class="line"><span class="comment">| our application. We just need to utilize it! We'll simply require it</span></span><br><span class="line"><span class="comment">| into the script here so that we don't have to worry about manual</span></span><br><span class="line"><span class="comment">| loading any of our classes later on. It feels great to relax.</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>; <span class="comment">// 注册了自动加载机制</span></span><br></pre></td></tr></table></figure><h3 id="前往-autoload-php"><a href="#前往-autoload-php" class="headerlink" title="前往 autoload.php"></a>前往 autoload.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// autoload.php @generated by Composer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/composer/autoload_real.php'</span>; <span class="comment">// 自动加载功能的引导类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ComposerAutoloaderInit1cf4a5d9084e6125482a4af4d90171ad::getLoader();</span><br></pre></td></tr></table></figure><p>在这里我们看到引导类的名字是 <code>ComposerAutoloaderInit1cf4a5d9084e6125482a4af4d90171ad</code>。Laravel 为了防止用户定义的类名和这个类重复冲突，所以在类名上加上了哈希值。</p><h3 id="看看引导类"><a href="#看看引导类" class="headerlink" title="看看引导类"></a>看看引导类</h3><p>在上述 <code>autoload.php</code> 文件中调用了引导类的静态方法 <code>getLoader()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// autoload_real.php @generated by Composer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInit1cf4a5d9084e6125482a4af4d90171ad</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $loader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'Composer\Autoload\ClassLoader'</span> === $class) &#123;</span><br><span class="line">            <span class="comment">// 这里包含了 ClassLoader 文件</span></span><br><span class="line">            <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/ClassLoader.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 单例模式，只能有一个类的实例</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 PHP 自动加载机制注册了一个函数</span></span><br><span class="line">        spl_autoload_register(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit1cf4a5d9084e6125482a4af4d90171ad'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span>); <span class="comment">// spl_autoload_register — 注册给定的函数作为 __autoload 的实现</span></span><br><span class="line">        <span class="comment">// new 出该文件中核心类 ClassLoader()</span></span><br><span class="line">        <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader(); </span><br><span class="line">        <span class="comment">// 销毁该函数</span></span><br><span class="line">        spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit1cf4a5d9084e6125482a4af4d90171ad'</span>, <span class="string">'loadClassLoader'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化自动加载核心对象类，给自动加载核心类初始化顶级命名空间映射</span></span><br><span class="line">        $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">'HHVM_VERSION'</span>) &amp;&amp; (!function_exists(<span class="string">'zend_loader_file_encoded'</span>) || !zend_loader_file_encoded());</span><br><span class="line">        <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">            <span class="comment">// 静态初始化，仅支持 PHP5.6 以上版本并且不支持 HHVM 虚拟机</span></span><br><span class="line">            <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</span><br><span class="line"></span><br><span class="line">            call_user_func(\Composer\Autoload\ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::getInitializer($loader));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 PHP 版本低于 5.6 或者使用 HHVM 虚拟机环境，调用核心类接口初始化</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// PSR0 标准</span></span><br><span class="line">            $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">                $loader-&gt;set($namespace, $path);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// PSR4 标准</span></span><br><span class="line">            $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">                $loader-&gt;setPsr4($namespace, $path);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 傻瓜映射法</span></span><br><span class="line">            $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</span><br><span class="line">            <span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">                $loader-&gt;addClassMap($classMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $loader-&gt;register(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引入了 autoload_files，包含的数组内容会提前加载，而不是用到时才加载</span></span><br><span class="line">        <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">            $includeFiles = Composer\Autoload\ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::$files;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</span><br><span class="line">            composerRequire1cf4a5d9084e6125482a4af4d90171ad($fileIdentifier, $file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $loader 被返回</span></span><br><span class="line">        <span class="keyword">return</span> $loader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composerRequire1cf4a5d9084e6125482a4af4d90171ad</span><span class="params">($fileIdentifier, $file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($GLOBALS[<span class="string">'__composer_autoload_files'</span>][$fileIdentifier])) &#123;</span><br><span class="line">        <span class="keyword">require</span> $file;</span><br><span class="line"></span><br><span class="line">        $GLOBALS[<span class="string">'__composer_autoload_files'</span>][$fileIdentifier] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>autoload_classmap.php</code>、<code>autoload_namespaces.php</code>、<code>autoload_psr4.php</code> 所包含的数组内容来自于 <code>composer.json</code></li></ul><h4 id="静态初始化文件-autoload-static-php"><a href="#静态初始化文件-autoload-static-php" class="headerlink" title="静态初始化文件 autoload_static.php"></a>静态初始化文件 autoload_static.php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Composer</span>\<span class="title">Autoload</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将自己类中的顶级命名空间映射给了 ClassLoader 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInitializer</span><span class="params">(ClassLoader $loader)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 返回了一个匿名函数</span></span><br><span class="line">        <span class="keyword">return</span> \Closure::bind(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($loader)</span> </span>&#123;</span><br><span class="line">            $loader-&gt;prefixLengthsPsr4 = ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::$prefixLengthsPsr4;</span><br><span class="line">            $loader-&gt;prefixDirsPsr4 = ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::$prefixDirsPsr4;</span><br><span class="line">            $loader-&gt;prefixesPsr0 = ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::$prefixesPsr0;</span><br><span class="line">            $loader-&gt;classMap = ComposerStaticInit1cf4a5d9084e6125482a4af4d90171ad::$classMap;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="keyword">null</span>, ClassLoader::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getInitializer</code> 返回了一个匿名函数，这是因为 <code>ClassLoader</code> 中的 <code>prefixLengthsPsr4</code> 等方法都是私有的，普通函数无法给类的私有成员变量赋值。利用匿名函数的绑定功能就可以将把匿名函数转为 <code>ClassLoader</code> 类的成员函数。</p><p>⚠️注：</p><p>这里涉及到 PHP 匿名函数的绑定功能，详见：<a href="http://www.cnblogs.com/yjf512/p/4421289.html" target="_blank" rel="noopener">PHP 中的Closure</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>自动加载机制避免了到处 <code>include/require</code> 的糟糕写法</li><li>当使用没有加载的类时，会自动运行 <code>__autoload()</code> </li><li>但 <code>__autoload()</code> 全局只能定义一次，因此我们需要使用 autoload 调用栈，通过注册不同的 <code>__autoload</code> 来实现不同的映射规则。SPL Autoload 系列函数可以帮助我们实现这些</li><li>命名空间大法好</li><li>Composer 是个神奇的包管理工具</li><li>遵循规范能帮助我们更好地完成开发任务：<a href="https://www.php-fig.org/" target="_blank" rel="noopener">Moving PHP forward through collaboration and standards</a></li><li>Laravel：The PHP Framework For Web Artisans</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.codeceo.com/article/php-autoload.html" target="_blank" rel="noopener">PHP AutoLoad 自动加载机制分析实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      优雅逃离冗长的 include/require
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://jalan.space/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>30 seconds of php code 阅读</title>
    <link href="http://jalan.space/2019/03/31/2019/30-seconds-of-php-code/"/>
    <id>http://jalan.space/2019/03/31/2019/30-seconds-of-php-code/</id>
    <published>2019-03-31T07:46:00.000Z</published>
    <updated>2019-03-31T08:49:56.020Z</updated>
    
    <content type="html"><![CDATA[<p>Github：<a href="https://github.com/appzcoder/30-seconds-of-php-code" target="_blank" rel="noopener">30 seconds of php code</a></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><ul><li><a href="https://www.php.net/manual/zh/function.array-filter.php" target="_blank" rel="noopener">array_filter</a>： 用回调函数过滤数组中的单元</li><li><a href="https://www.php.net/manual/zh/function.array-reduce.php" target="_blank" rel="noopener">array_reduce</a>：用回调函数迭代地将数组简化为单一的值</li></ul><h3 id="展平数组"><a href="#展平数组" class="headerlink" title="展平数组"></a>展平数组</h3><ul><li><a href="https://www.php.net/manual/zh/function.array-merge.php" target="_blank" rel="noopener">array_merge</a>：合并一个或多个数组                                                                  </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepFlatten</span><span class="params">($items)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $result = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_array($item)) &#123;</span><br><span class="line">            $result[] = $item;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $result = array_merge($result, deepFlatten($item));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deepFlatten([<span class="number">1</span>, [<span class="number">2</span>], [[<span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>]); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="从左删除-n-个元素"><a href="#从左删除-n-个元素" class="headerlink" title="从左删除 n 个元素"></a>从左删除 n 个元素</h3><ul><li><a href="https://www.php.net/manual/zh/function.array-slice.php" target="_blank" rel="noopener">array_slice</a>：从数组中取出一段</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span><span class="params">($items, $n = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_slice($items, $n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// [2,3]</span></span><br><span class="line">drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><h3 id="数组分组"><a href="#数组分组" class="headerlink" title="数组分组"></a>数组分组</h3><ul><li><a href="https://www.php.net/manual/zh/function.call-user-func.php" target="_blank" rel="noopener">call_user_func</a>： 把第一个参数作为回调函数调用</li><li><a href="https://www.php.net/manual/zh/function.is-string.php" target="_blank" rel="noopener">is_string</a>：检测变量是否是字符串</li><li><a href="https://www.php.net/manual/zh/function.is-callable.php" target="_blank" rel="noopener">is_callable</a>：检测参数是否为合法的可调用结构</li><li><a href="https://www.php.net/manual/zh/function.function-exists.php" target="_blank" rel="noopener">function_exists</a>：如果给定的函数已经被定义就返回 TRUE</li><li><a href="https://www.php.net/manual/zh/function.is-object.php" target="_blank" rel="noopener">is_object</a>：检测变量是否是一个对象</li><li><a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">isset</a>：检测变量是否已设置并且非 NULL</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span><span class="params">($items, $func)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $group = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((!is_string($func) &amp;&amp; is_callable($func)) || function_exists($func)) &#123;</span><br><span class="line">            $key = call_user_func($func, $item);</span><br><span class="line">            $group[$key][] = $item;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_object($item)) &#123;</span><br><span class="line">            $group[$item-&gt;&#123;$func&#125;][] = $item;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($item[$func])) &#123;</span><br><span class="line">            $group[$item[$func]][] = $item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $group;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBy([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], <span class="string">'strlen'</span>); <span class="comment">// [3 =&gt; ['one', 'two'], 5 =&gt; ['three']]</span></span><br></pre></td></tr></table></figure><h3 id="返回列表头部"><a href="#返回列表头部" class="headerlink" title="返回列表头部"></a>返回列表头部</h3><ul><li><a href="https://www.php.net/manual/zh/function.reset.php" target="_blank" rel="noopener">reset</a>： 将数组的内部指针指向第一个单元</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">head</span><span class="params">($items)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reset($items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="返回列表尾部"><a href="#返回列表尾部" class="headerlink" title="返回列表尾部"></a>返回列表尾部</h3><ul><li><a href="https://www.php.net/manual/zh/function.end.php" target="_blank" rel="noopener">end</a>：将数组的内部指针指向最后一个单元</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">last</span><span class="params">($items)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> end($items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="检索给定键的所有值"><a href="#检索给定键的所有值" class="headerlink" title="检索给定键的所有值"></a>检索给定键的所有值</h3><ul><li><a href="https://www.php.net/manual/zh/function.array-map.php" target="_blank" rel="noopener">array_map</a>：为数组的每个元素应用回调函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluck</span><span class="params">($items, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_map( <span class="function"><span class="keyword">function</span><span class="params">($item)</span> <span class="title">use</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> is_object($item) ? $item-&gt;$key : $item[$key];</span><br><span class="line">    &#125;, $items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pluck([</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-100'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>],</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-200'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Chair'</span>],</span><br><span class="line">], <span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// ['Desk', 'Chair']</span></span><br></pre></td></tr></table></figure><h3 id="过滤指定的值"><a href="#过滤指定的值" class="headerlink" title="过滤指定的值"></a>过滤指定的值</h3><ul><li><a href="https://www.php.net/manual/zh/function.array-values.php" target="_blank" rel="noopener">array_values</a>：返回数组中所有的值</li><li><a href="https://www.php.net/manual/zh/function.array-diff.php" target="_blank" rel="noopener">array_diff</a>：计算数组的差集</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pull</span><span class="params">(&amp;$items, ...$params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $items = array_values(array_diff($items, $params));</span><br><span class="line">    <span class="keyword">return</span> $items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$items = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">pull($items, <span class="string">'a'</span>, <span class="string">'c'</span>); <span class="comment">// $items will be ['b', 'b']</span></span><br></pre></td></tr></table></figure><h3 id="按键排序"><a href="#按键排序" class="headerlink" title="按键排序"></a>按键排序</h3><ul><li><a href="https://www.php.net/manual/zh/function.krsort.php" target="_blank" rel="noopener">krsort</a>：对数组按照键名逆向排序</li><li><a href="https://www.php.net/manual/zh/function.ksort.php" target="_blank" rel="noopener">ksort</a>：对数组按照键名排序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderBy</span><span class="params">($items, $attr, $order)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $sortedItems = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        $key = is_object($item) ? $item-&gt;&#123;$attr&#125; : $item[$attr];</span><br><span class="line">        $sortedItems[$key] = $item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($order === <span class="string">'desc'</span>) &#123;</span><br><span class="line">        krsort($sortedItems);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ksort($sortedItems);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array_values($sortedItems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">orderBy(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'Joy'</span>],</span><br><span class="line">        [<span class="string">'id'</span> =&gt; <span class="number">3</span>, <span class="string">'name'</span> =&gt; <span class="string">'Khaja'</span>],</span><br><span class="line">        [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'Raja'</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'id'</span>,</span><br><span class="line">    <span class="string">'desc'</span></span><br><span class="line">); <span class="comment">// [['id' =&gt; 3, 'name' =&gt; 'Khaja'], ['id' =&gt; 2, 'name' =&gt; 'Joy'], ['id' =&gt; 1, 'name' =&gt; 'Raja']]</span></span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $n * factorial($n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span><span class="params">(...$numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count($numbers) &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> array_reduce($numbers, <span class="string">'gcd'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $r = $numbers[<span class="number">0</span>] % $numbers[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> $r === <span class="number">0</span> ? abs($numbers[<span class="number">1</span>]) : gcd($numbers[<span class="number">1</span>], $r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcd(<span class="number">8</span>, <span class="number">36</span>); <span class="comment">// 4</span></span><br><span class="line">gcd(<span class="number">12</span>, <span class="number">8</span>, <span class="number">32</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="判断是否为素数"><a href="#判断是否为素数" class="headerlink" title="判断是否为素数"></a>判断是否为素数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span><span class="params">($number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $boundary = floor(sqrt($number));</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">2</span>; $i &lt;= $boundary; $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($number % $i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $number &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isPrime(<span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lcm</span><span class="params">(...$numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ans = $numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>, $max = count($numbers); $i &lt; $max; $i++) &#123;</span><br><span class="line">        $ans = (($numbers[$i] * $ans) / gcd($numbers[$i], $ans));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栗子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcm(<span class="number">12</span>, <span class="number">7</span>); <span class="comment">// 84</span></span><br><span class="line">lcm(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><a href="https://www.php.net/strstr" target="_blank" rel="noopener">strstr</a>：查找字符串的首次出现</li><li><a href="https://www.php.net/manual/zh/function.strrpos.php" target="_blank" rel="noopener">strrpos</a>：计算指定字符串在目标字符串中最后一次出现的位置</li><li><a href="https://www.php.net/manual/zh/function.strlen.php" target="_blank" rel="noopener">strlen</a>：获取字符串长度</li><li><a href="https://www.php.net/manual/zh/function.strtolower.php" target="_blank" rel="noopener">strtolower</a>：将字符串转化为小写</li><li><a href="https://www.php.net/manual/zh/function.strtoupper.php" target="_blank" rel="noopener">strtoupper</a>：将字符串转化为大写</li></ul><h3 id="是否字母异位词"><a href="#是否字母异位词" class="headerlink" title="是否字母异位词"></a>是否字母异位词</h3><ul><li><a href="https://www.php.net/manual/zh/function.count-chars.php" target="_blank" rel="noopener">count_chars</a>：返回字符串所用字符的信息</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span><span class="params">($string1, $string2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count_chars($string1, <span class="number">1</span>) === count_chars($string2, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isAnagram(<span class="string">'act'</span>, <span class="string">'cat'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="是否回文"><a href="#是否回文" class="headerlink" title="是否回文"></a>是否回文</h3><ul><li><a href="https://www.php.net/manual/zh/function.strrev.php" target="_blank" rel="noopener">strrev</a>：反转字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strrev($string) === (string) $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">palindrome(<span class="string">'racecar'</span>); <span class="comment">// true</span></span><br><span class="line">palindrome(<span class="number">2221222</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="返回元音字母的个数"><a href="#返回元音字母的个数" class="headerlink" title="返回元音字母的个数"></a>返回元音字母的个数</h3><ul><li><a href="https://www.php.net/manual/zh/function.preg-match-all.php" target="_blank" rel="noopener">preg_match_all</a>：执行一个全局正则表达式匹配</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countVowels</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    preg_match_all(<span class="string">'/[aeiou]/i'</span>, $string, $matches);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count($matches[<span class="number">0</span>]); <span class="comment">// $matches[0]保存的是完整模式的所有匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="首字母转小写"><a href="#首字母转小写" class="headerlink" title="首字母转小写"></a>首字母转小写</h3><ul><li><a href="https://www.php.net/manual/zh/function.lcfirst.php" target="_blank" rel="noopener">lcfirst</a>：使一个字符串的第一个字符小写</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decapitalize</span><span class="params">($string, $upperRest = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lcfirst($upperRest ? strtoupper($string) : $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decapitalize(<span class="string">'FooBar'</span>); <span class="comment">// 'fooBar'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      A curated collection of useful PHP snippets that you can understand in 30 seconds or less.
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>用 Python Pillow 画一个卤蛋头</title>
    <link href="http://jalan.space/2019/03/25/2019/python-pillow/"/>
    <id>http://jalan.space/2019/03/25/2019/python-pillow/</id>
    <published>2019-03-25T13:06:00.000Z</published>
    <updated>2019-03-25T13:19:51.298Z</updated>
    
    <content type="html"><![CDATA[<p>PIL：Python Imaging Library，是 Python 平台上的图像处理标准库。</p><p>在 <a href="https://github.com/JalanJiang/pic2str" target="_blank" rel="noopener">Pic2str</a> 中，我使用它对图片进行 <code>open</code>、<code>resize</code> 与 <code>getpixel</code> 操作。</p><h2 id="关于-Pillow"><a href="#关于-Pillow" class="headerlink" title="关于 Pillow"></a>关于 Pillow</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> pillow</span><br></pre></td></tr></table></figure><h3 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入 PIL</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">im = Image.open(<span class="string">"test.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片尺寸获取</span></span><br><span class="line">h, w = im.size</span><br><span class="line"><span class="comment"># 图片缩放</span></span><br><span class="line">im = im.resize((w, h), Image.NEAREST)</span><br><span class="line"><span class="comment"># 获取像素值</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">im.getpixel((j, i)</span><br></pre></td></tr></table></figure><p>更多方法见 <a href="https://pillow.readthedocs.io/en/stable/" target="_blank" rel="noopener">Pillow 官方文档</a>。</p><h2 id="将图片转为字符输出"><a href="#将图片转为字符输出" class="headerlink" title="将图片转为字符输出"></a>将图片转为字符输出</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>打开图片</li><li>对图片进行缩放</li><li>获取图片每个像素点的像素值（RGB）</li><li>将该像素值转换为灰度值</li><li>不同灰度值对应不同的数值进行输出</li></ol><p>其中，灰度值的转换套用如下公式：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gray = int(<span class="number">0.216</span> * r + <span class="number">0.715</span> * g + <span class="number">0.0722</span> * b)</span><br></pre></td></tr></table></figure><h3 id="卤蛋头效果"><a href="#卤蛋头效果" class="headerlink" title="卤蛋头效果"></a>卤蛋头效果</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">..................................................</span><br><span class="line">..................................................</span><br><span class="line">..................'."|<span class="number">0</span>Oz_' ^.....................</span><br><span class="line">.............''_B%J<span class="variable">!llIl!</span>!!lt&amp;<span class="number">8</span>d'.................</span><br><span class="line">............"<span class="number">8</span>dl<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>i<span class="variable">!!!</span>z81...............</span><br><span class="line">..........`&amp;ull<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!BL.............</span><br><span class="line">........`hW<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>l!%h...........</span><br><span class="line">........&amp;-<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>ll% .........</span><br><span class="line">.......&amp;l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!Wh........</span><br><span class="line">......&#123;a<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!l8........</span><br><span class="line">......<span class="number">8</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!~B.......</span><br><span class="line">.....IkIi<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>vQ......</span><br><span class="line">.....&amp;&lt;<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!+B^.....</span><br><span class="line">.....W<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!m?.....</span><br><span class="line">....^<span class="number">8</span><span class="variable">!!!</span><span class="variable">!!l!</span>l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!ll&lt;_-li!</span><span class="variable">!!!</span>!!I8.....</span><br><span class="line">....L?<span class="variable">!!!</span><span class="variable">!&amp;888hZYYd!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!u&gt;ll!</span><span class="variable">!!!</span>l<span class="variable">!!!</span><span class="variable">!!!</span>i8`....</span><br><span class="line">....&amp;i<span class="variable">!!!</span><span class="variable">!l!</span><span class="variable">!ll!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!lii!</span><span class="variable">!!!</span><span class="variable">!!!</span>!lW ....</span><br><span class="line">....<span class="variable">%I!!!!!!!!!!!!!!!!!!!!!&lt;xB%</span><span class="number">8</span><span class="variable">%%8</span>h<span class="variable">!!!</span><span class="variable">!!!</span>!!&amp;.....</span><br><span class="line">....<span class="variable">%!!!!!&gt;)B%</span><span class="number">8</span><span class="variable">%8%</span>B<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!&lt;W...''.':%!</span><span class="variable">!!!</span>!l;h....</span><br><span class="line">....*i<span class="variable">!!!</span><span class="variable">!8''.'b...#&gt;!</span><span class="variable">!!!</span><span class="variable">!!0&#123;'.'8'.':&amp;!</span><span class="variable">!!!</span><span class="variable">!!!</span>%....</span><br><span class="line">...^*&lt;i<span class="variable">!!l%'..`/'..8!</span>l<span class="variable">!!!</span><span class="variable">!!&gt;M8:'..'8%!</span><span class="variable">!!!</span><span class="variable">!!!</span>l8uW..</span><br><span class="line">..'<span class="number">8</span>#~<span class="variable">!!!</span>!_&amp;. .'-<span class="number">88</span>i<span class="variable">!!!</span><span class="variable">!l!</span><span class="variable">!!!</span><span class="variable">!!_8Mxll!</span><span class="variable">!!!</span><span class="variable">!!!</span>I8!*?.</span><br><span class="line">..<span class="number">8</span>lZ]<span class="variable">!!!</span><span class="variable">!!!</span>I_?l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!&amp;ll!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!l8W!</span>&amp;.</span><br><span class="line">.)mMBO<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!lWi!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>%J)<span class="number">8</span>.</span><br><span class="line">.%;<span class="number">8</span>i8l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!Bl!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!i&amp;i&amp;<span class="number">8</span>`</span><br><span class="line">.<span class="number">8</span>]qi&amp;l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!%!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!&amp;M8B.</span><br><span class="line">.<span class="variable">%_dW8i!!!!!!!!!!!!!!!!!8!!!!!!!!!!!!!!!!!!l!%</span>iQv.</span><br><span class="line">.M&gt;WB8l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!Wi!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!]wi&amp;'.</span><br><span class="line">..<span class="number">8</span><span class="variable">!%%!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!lB&gt;!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!lmj%...</span><br><span class="line">..Xpi\Z<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>oI<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!l8`....</span><br><span class="line">...<span class="variable">!8!</span>Wl<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!ll!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!<span class="number">8</span>'....</span><br><span class="line">......<span class="number">8</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>i%.....</span><br><span class="line">......;*<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>liM......</span><br><span class="line">.......B<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>i<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>lB'.....</span><br><span class="line">......."&amp;<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!I&lt;ii&lt;(i!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>nz......</span><br><span class="line">........<span class="number">8</span>&lt;<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>i<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!l!</span>%.......</span><br><span class="line">........`<span class="number">8</span>l<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>q_.......</span><br><span class="line">..........<span class="variable">%!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!%</span>........</span><br><span class="line">...........<span class="number">8</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>I%'........</span><br><span class="line">...........'B(<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!M&gt;^........</span><br><span class="line">.............f&amp;ll<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!loX..........</span><br><span class="line">..............`&amp;&#125;i<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>l#r...........</span><br><span class="line">................`&amp;&#123;Il<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!<span class="number">18</span>'............</span><br><span class="line">................. "%&amp;<span class="variable">!!!</span><span class="variable">!!!</span><span class="variable">!!!</span>!!&#123;&amp;<span class="number">8</span>''.............</span><br><span class="line">......................h<span class="variable">%B88%</span>BW8)'.................</span><br><span class="line">.......................'..........................</span><br><span class="line">..................................................</span><br><span class="line">..................................................</span><br><span class="line">..................................................</span><br><span class="line">..................................................</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000" target="_blank" rel="noopener">Pillow</a></li></ul>]]></content>
    
    <summary type="html">
    
      变秃才能变强
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CGI、FastCGI、PHP-CGI 与 PHP-FPM</title>
    <link href="http://jalan.space/2019/03/23/2019/cgi-php/"/>
    <id>http://jalan.space/2019/03/23/2019/cgi-php/</id>
    <published>2019-03-23T07:52:00.000Z</published>
    <updated>2019-03-23T14:10:51.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/cgi.png" alt="浏览器发送请求数据并接收返回数据的过程"></p><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><ul><li>CGI（Common Gateway Interface），全称是<strong>通用网关接口</strong></li><li>运行在网络服务器上</li><li>是 Web 服务器与 PHP 应用进行“交谈”的一种工具，规定了要传什么数据、以什么格式传递给 PHP 解析器</li><li>缺陷：每一次 Web 请求都会有启动和退出过程（<code>fork-and-execute</code> 模式）,CGI 解释器的反复加载是CGI性能低下的主要原因</li></ul><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><ul><li>用来提高 CGI 程序性能</li><li>像是常驻(long-live)型的 CGI，将 CGI 解释器进程<strong>保持在内存中</strong>。它可以一直执行着，只要激活后，不会每次都要花费时间去 <code>fork</code> 一次</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>Web Server 启动时载入 FastCGI 进程管理器</li><li>FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程，等待来自 Web Server 的连接</li><li>当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器</li><li>Web Server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li><li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server</li></ol><p><img src="/img/in-post/fastcgi.png" alt="FastCGI 工作原理"></p><h2 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP-CGI"></a>PHP-CGI</h2><ul><li>PHP 实现的自带的 FastCGI <strong>管理器</strong>，能够调度 PHP-CGI 进程</li><li>缺陷：<ol><li>变更 <code>php.ini</code> 配置后，需重启 PHP-CGI 才能让新的 <code>php.ini</code> 生效，不可以平滑重启</li><li>直接杀死 PHP-CGI 进程，PHP 就不能运行了 </li></ol></li></ul><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><ul><li>对于 FastCGI 协议的具体实现，负责管理一个进程池，来处理来自 Web 服务器的请求</li><li>克服 PHP-CGI 的缺陷，通过生成新的子进程可以实现 <code>php.ini</code> 修改后的平滑重启</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.awaimai.com/371.html" target="_blank" rel="noopener">CGI、FastCGI和PHP-FPM关系图解</a></li><li><a href="https://jaminzhang.github.io/web/CGI-FastCGI-PHP-CGI-PHP-FPM-Concepts-Understanding/" target="_blank" rel="noopener">CGI/FastCGI/PHP-CGI/PHP-FPM 概念理解</a></li></ul>]]></content>
    
    <summary type="html">
    
      各种 CGI 错综复杂关系的梳理
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>进程与进程调度算法</title>
    <link href="http://jalan.space/2019/03/16/2019/process-scheduling/"/>
    <id>http://jalan.space/2019/03/16/2019/process-scheduling/</id>
    <published>2019-03-16T13:16:00.000Z</published>
    <updated>2019-03-17T04:45:42.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h1><ul><li>一段程序的执行过程</li><li>资源分配的基本单位</li></ul><h1 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h1><ol><li>新建态：刚刚创建的进程，操作系统还没有把它加入到可执行进程组中，通常是进程控制块<strong>已经创建但是还没有加载到内存中</strong>的进程</li><li>就绪态：进程已经做好了准备，已分配到所需资源，只要分配到 CPU 就能够立即运行</li><li>运行态：进程处于就绪状态<strong>被调度</strong>后，进程进入运行态</li><li>阻塞态（等待态）：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</li><li>退出态：进程结束，或出现错误，或被系统终止，进入退出态。无法再执行</li></ol><h2 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h2><p><img src="/img/in-post/process-change.png" alt="进程基本状态之间的切换"></p><p>⚠️注：</p><ul><li>只有就绪态和运行态可以相互转换，其它的都是单向转换<ul><li>就绪状态的进程通过<strong>调度算法</strong>从而获得 CPU 时间，转为运行状态</li><li>运行状态的进程，在分配给它的 <strong>CPU 时间片用完</strong>之后就会转为就绪状态，等待下一次调度</li></ul></li><li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，<strong>缺少 CPU 时间会从运行态转换为就绪态</strong></li></ul><h1 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h1><h2 id="为什么需要调度？"><a href="#为什么需要调度？" class="headerlink" title="为什么需要调度？"></a>为什么需要调度？</h2><p>用户进程数一般都多于处理机数，从而导致进程互相争夺处理机。同时，系统进程也需要使用处理机。</p><p>因此，这就需要<strong>进程调度程序</strong>按一定的策略，<strong>动态</strong>地把处理机分配给处于<strong>就绪队列</strong>中的某一个进程，使之执行。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h3><p>系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成。或因发生某事件使该进程放弃处理机时，系统方可再将处理机重新分配给另一优先权最高的进程。</p><p>这种调度算法主要用于批处理系统中，也可用于某些对实时性要求不严的实时系统中。</p><h3 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h3><p>系统同样是把处理机分配给优先权最高的进程，使之执行。但在其执行期间，只要又出现了另一个其优先权更高的进程，进程调度程序就立即停止当前进程(原优先权最高的进程)的执行，重新将处理机分配给新到的优先权最高的进程。</p><p>抢占式的优先权调度算法能更好地满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中。</p><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><h3 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h3><p>批处理系统：用户将一批作业提交给操作系统后就不再干预，由操作系统控制它们自动运行。</p><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证<strong>吞吐量</strong>和<strong>周转时间</strong>（从提交到终止的时间）。</p><h4 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h4><blockquote><p>First-Come First-Serverd(FCFS)</p></blockquote><p>按照请求的顺序进行调度，不考虑等待时间和执行时间。</p><ul><li>优点：公平，实现简单</li><li>缺点：有利于长作业，不利于短作业。因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长</li></ul><h4 id="短作业优先-SJF"><a href="#短作业优先-SJF" class="headerlink" title="短作业优先(SJF)"></a>短作业优先(SJF)</h4><blockquote><p>Shortest Job First(SJF)</p></blockquote><p>按估计运行时间最短的顺序进行调度。</p><p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p><h4 id="最短剩余时间优先-SRTN"><a href="#最短剩余时间优先-SRTN" class="headerlink" title="最短剩余时间优先(SRTN)"></a>最短剩余时间优先(SRTN)</h4><blockquote><p>Shortest Remaining Time Next(SRTN)</p></blockquote><p>按估计剩余时间最短的顺序进行调度。将短作业优先进行改进，改进为抢占式，这就是最短剩余时间优先算法。</p><ul><li>优点：利于短进程</li><li>缺点：开销大，不利于长进程</li></ul><h3 id="交互式系统"><a href="#交互式系统" class="headerlink" title="交互式系统"></a>交互式系统</h3><p>交互式操作系统是为达到人机交互目的而为机器所编写的操作系统。常见的交互操作系统有 Windows，DOS 等，在交互式系统当中，最常见的是<strong>分时操作系统</strong>。</p><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是<strong>快速地进行响应</strong>。</p><h4 id="时间片轮转-RR"><a href="#时间片轮转-RR" class="headerlink" title="时间片轮转(RR)"></a>时间片轮转(RR)</h4><blockquote><p>Round-Robin Scheduling(RR)<br>此算法是最古老、最简单、最公平且使用最广的算法</p></blockquote><ul><li>所有就绪进程按 <code>FCFS</code> 的原则排成一个队列</li><li>每次调度时，把 CPU 时间分配给队首进程，该首进程可以执行一个时间片</li><li>时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它<strong>送往就绪队列的末尾</strong>，同时继续把 CPU 时间分配给队首的进程</li></ul><p><img src="/img/in-post/process-time.png" alt="时间片轮转"></p><p>⚠️注：时间片轮转算法的效率和时间片的大小有很大关系</p><ul><li>进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间</li><li>如果时间片过长，那么实时性就不能得到保证</li></ul><h4 id="优先级调度-HPF"><a href="#优先级调度-HPF" class="headerlink" title="优先级调度(HPF)"></a>优先级调度(HPF)</h4><ul><li>为每个进程分配一个优先级，按优先级进行调度</li><li>为了防止低优先级的进程永远等不到调度，可以<strong>随着时间的推移增加等待进程的优先级</strong></li></ul><h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><ul><li>将时间片轮转与优先级调度相结合</li><li>设置了多个队列，每个队列时间片大小都不同</li><li>进程在第一个队列没执行完，就会被移到下一个队列</li><li>每个队列优先权不同，最上面的优先权最高。只有上一个队列没有进程在排队，才能调度当前队列上的进程</li><li>优点：兼顾长短作业，有较好的响应时间</li></ul><p><img src="/img/in-post/process-time-list.png" alt="多级反馈队列"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_30137611/article/details/68065609" target="_blank" rel="noopener">批处理系统和分时系统的区别</a></li><li><a href="https://vinoit.me/2016/08/26/linux-kernel-note-process-scheduling/" target="_blank" rel="noopener">linux内核笔记之进程调度</a></li><li><a href="https://www.jianshu.com/p/6e1fa5cf62cb" target="_blank" rel="noopener">进程调度总结</a></li><li><a href="https://www.yiibai.com/os" target="_blank" rel="noopener">操作系统教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      调度程序决定什么时候开始或停止一个进程的运行
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Linux" scheme="http://jalan.space/tags/Linux/"/>
    
      <category term="操作系统" scheme="http://jalan.space/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python configparser 模块</title>
    <link href="http://jalan.space/2019/02/14/2019/python-config-file/"/>
    <id>http://jalan.space/2019/02/14/2019/python-config-file/</id>
    <published>2019-02-14T10:22:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>Ps：基于 Python3</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在项目根目录下创建 <code>.ini</code> 格式的配置文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-tag">conf</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure><p>配置文件大概长这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ServerAliveInterval = 45</span><br><span class="line">Compression = <span class="literal">yes</span></span><br><span class="line">CompressionLevel = 9</span><br><span class="line">ForwardX11 = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">[bitbucket.org]</span><br><span class="line">User = hg</span><br><span class="line"></span><br><span class="line">[<span class="builtin-name">debug</span>]</span><br><span class="line"><span class="attribute">log_errors</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">show_warnings</span>=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[topsecret.server.com]</span><br><span class="line">Port = 50022</span><br><span class="line">ForwardX11 = <span class="literal">no</span></span><br></pre></td></tr></table></figure><h2 id="优雅读取"><a href="#优雅读取" class="headerlink" title="优雅读取"></a>优雅读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"><span class="comment"># 配置文件路径</span></span><br><span class="line">config.read(<span class="string">"./conf.ini"</span>)</span><br><span class="line">config.sections()</span><br><span class="line"><span class="comment"># 读取配置</span></span><br><span class="line">config.get(<span class="string">"DEFAULT"</span>, <span class="string">"Compression"</span>)</span><br><span class="line">cfg.getboolean(<span class="string">'debug'</span>,<span class="string">'log_errors'</span>)</span><br><span class="line">config.getint(<span class="string">"topsecret.server.com"</span>, <span class="string">"Port"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.python.org/3/library/configparser.html" target="_blank" rel="noopener">configparser — Configuration file parser</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c13/p10_read_configuration_files.html" target="_blank" rel="noopener">读取配置文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      论如何优雅读取配置文件
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis 持久化</title>
    <link href="http://jalan.space/2019/02/05/2019/redis-rdb-aof/"/>
    <id>http://jalan.space/2019/02/05/2019/redis-rdb-aof/</id>
    <published>2019-02-05T08:36:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ul><li>Redis 是内存数据库，数据库状态都存储在内存里</li><li>一旦服务器进程退出，服务器中的数据库状态会消失不见</li><li>为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上</li></ul><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><ul><li>RDB 文件是一个经过压缩的二进制文件</li><li>RDB 文件保存在硬盘里</li><li>通过保存数据库中的键值对来记录数据库状态</li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>有两个 Redis 命令可以用于生成 RDB 文件：</p><ul><li>SAVE</li><li>BGSAVE</li></ul><p>创建 RDB 的实际工作由 <code>rdb.c/rdbSave</code> 函数完成，SAVE 命令和 BGSAVE 命令调用方式不同。</p><h3 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h3><ul><li>会阻塞 Redis 服务器进程</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SAVE</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 创建 RDB 文件</span></span><br><span class="line">    rdbSave()</span><br></pre></td></tr></table></figure><h3 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h3><ul><li>会派生出一个子进程，负责创建 RDB 文件</li><li>服务器进程（父进程）继续处理命令请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGSAVE</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    pid = fork()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 子进程负责创建 RDB 文件</span></span><br><span class="line">        rdbSave()</span><br><span class="line">        <span class="comment"># 完成之后向父进程发送信号</span></span><br><span class="line">        signal_parent()</span><br><span class="line">    <span class="keyword">elif</span> pid &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 父进程继续处理命令请求，并通过轮训等待子进程的信号</span></span><br><span class="line">        handle_request_and_wait_signal()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handle_fork_error()</span><br></pre></td></tr></table></figure><h2 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h2><ul><li>载入工作在服务器启动时自动执行</li><li>服务器在载入 RDB 文件期间，会一直处于阻塞状态，直到载入工作完成为止</li></ul><h2 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h2><p>Redis 允许用户通过设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令。</p><h3 id="设置保存条件"><a href="#设置保存条件" class="headerlink" title="设置保存条件"></a>设置保存条件</h3><p>若提供如下配置：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>只要满足以下条件中的一个，BGSAVE 命令就会被执行：</p><ul><li>服务器在 900 秒之内，对数据库进行了至少 1 次修改</li><li>服务器在 300 秒之内，对数据库进行了至少 10 次修改</li></ul><h3 id="saveparams"><a href="#saveparams" class="headerlink" title="saveparams"></a>saveparams</h3><p>服务器程序会根据 save 选项所设置的保存条件，设置服务器状态 redisServer 结构的 <code>saveparams</code> 属性。</p><ul><li><code>saveparams</code> 属性是一个数组</li><li>数组中的每一个元素都是一个 <code>saveparam</code> 结构</li><li>每个 <code>saveparam</code> 结构都保存了一个 <code>save</code> 选项设置的保存条件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> &#123;</span></span><br><span class="line">    <span class="comment">// 秒数</span></span><br><span class="line">    <span class="keyword">time_t</span> seconds;</span><br><span class="line">    <span class="comment">// 修改数</span></span><br><span class="line">    <span class="keyword">int</span> changes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dirty"><a href="#dirty" class="headerlink" title="dirty"></a>dirty</h3><p><code>dirty</code> 计数器记录距离上一次成功执行 SAVE 命令或 BGSAVE 命令之后，服务器对数据库状态进行了多少次修改（包括写入、删除、更新等操作）</p><h3 id="lastsave"><a href="#lastsave" class="headerlink" title="lastsave"></a>lastsave</h3><p>是一个 UNINX 时间戳，记录了服务器上一次成功执行 SAVE 命令或者 BGSAVE 命令的时间。</p><h3 id="检查保存条件是否满足"><a href="#检查保存条件是否满足" class="headerlink" title="检查保存条件是否满足"></a>检查保存条件是否满足</h3><p>服务器周期性操作函数 <code>serverCron</code> （该函数对正在运行的服务器进行维护）默认每隔 100 毫秒就会执行一次，其中一项工作就是检查 save 选项所设置的保存条件是否已经满足，满足的话就执行 BGSAVE 命令。</p><p>伪代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serverCron</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">    <span class="comment"># 遍历所有保存条件</span></span><br><span class="line">    <span class="keyword">for</span> saveparam <span class="keyword">in</span> server.<span class="symbol">saveparams:</span></span><br><span class="line">        <span class="comment"># 计算距离上次执行保存操作有多少秒</span></span><br><span class="line">        save_interval = unixtime_now() - server.lastsave</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果数据库状态的修改次数超过条件所设置的次数</span></span><br><span class="line">        <span class="comment"># 如果距离上次保存的时间超过条件所设置的时间</span></span><br><span class="line">        <span class="keyword">if</span> server.dirty &gt;= saveparam.changes <span class="keyword">and</span> save_interval &gt; saveparam.<span class="symbol">seconds:</span></span><br><span class="line">            BGSAVE()</span><br></pre></td></tr></table></figure><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><ul><li>通过保存 Redis 服务器所执行的写命令来记录数据库状态</li><li>写入 AOF 文件的所有命令都是以 Redis 的<strong>命令请求协议格式</strong>保存的</li></ul><h2 id="AOF-持久化实现"><a href="#AOF-持久化实现" class="headerlink" title="AOF 持久化实现"></a>AOF 持久化实现</h2><h3 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h3><p>若 AOF 持久化功能处于打开状态，服务器在执行完一个命令后，会以协议格式将被执行的写命令追加到服务器状态的 <code>aof_buf</code> 缓冲区的末尾。</p><h3 id="文件写入与同步"><a href="#文件写入与同步" class="headerlink" title="文件写入与同步"></a>文件写入与同步</h3><ul><li>服务器每次结束一个事件循环之前，都会调用 <code>flushAppendOnlyFile</code> 函数</li><li><code>flushAppendOnlyFile</code> 函数会考虑是否需要将 <code>aof_buf</code> 缓冲区中的内容写入和保存到 AOF 文件里</li><li><code>flushAppendOnlyFile</code> 函数执行以下工作：<ul><li>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件</li><li>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中</li></ul></li><li><code>flushAppendOnlyFile</code> 函数的行为由服务器配置的 <code>appendfsync</code> 选项的值来决定</li></ul><p><code>appendfsync</code> 选项的值具体如下：</p><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每个写命令都同步（效率低，但最安全）</td></tr><tr><td>everysec</td><td>每秒同步一次</td></tr><tr><td>no</td><td>不进行同步，何时同步由操作系统来决定</td></tr></tbody></table><h4 id="为何需要同步？"><a href="#为何需要同步？" class="headerlink" title="为何需要同步？"></a>为何需要同步？</h4><p>对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。</p><p>如果计算机停机，则保存在缓冲区的内容将会丢失。</p><h2 id="载入与数据还原"><a href="#载入与数据还原" class="headerlink" title="载入与数据还原"></a>载入与数据还原</h2><ol><li>创建一个不带网络连接的伪客户端</li><li>从 AOF 文件中分析并读取出一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>一直执行步骤 2 和 3，直到 AOF 文件中的所有写命令都被处理完毕为止</li></ol><h2 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h2><ul><li>为了解决 AOF 文件体积膨胀的问题</li><li>通过重写创建一个新的 AOF 文件来替代现有的 AOF 文件，新的 AOF 文件不会包含任何浪费空间的冗余命令</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>不需要对现有的 AOF 文件进行任何操作</li><li>从数据库中直接读取键现在的值</li><li>用一条命令记录键值对，从而代替之前记录这个键值对的多条命令</li></ul><h3 id="AOF-后台重写"><a href="#AOF-后台重写" class="headerlink" title="AOF 后台重写"></a>AOF 后台重写</h3><p>为不阻塞父进程，Redis 将 AOF 重写程序放到子进程里执行。</p><p>在子进程执行 AOF 重写期间，服务器进程需要执行三个工作：</p><ol><li>执行客户端发来的命令</li><li>将执行后的写命令追加到 AOF 缓冲区</li><li>将执行后的写命令追加到 AOF 重写缓冲区</li></ol><p>这样一来可保证：</p><ul><li>AOF 缓冲区的内容会被写入和同步到 AOF 文件，对现有 AOF 文件的处理工作会如常进行</li><li>从创建重写子进程开始，所有写命令也会被记录到 AOF 重写缓冲区里，保证重写后的 AOF 文件与当前数据库状态一致</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《Redis 设计与实现》</li></ul>]]></content>
    
    <summary type="html">
    
      RDB 与 AOF
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Redis" scheme="http://jalan.space/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python 实现队列的几种方式</title>
    <link href="http://jalan.space/2019/02/05/2019/python-queue/"/>
    <id>http://jalan.space/2019/02/05/2019/python-queue/</id>
    <published>2019-02-05T05:52:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><ul><li>队列是一种特殊的线性表</li><li>是一种先进先出（FIFO）的数据结构</li><li>只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作</li><li>进行插入操作的端称为队尾，进行删除操作的端称为队头</li><li>队列中没有元素时，称为空队列</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="借用列表"><a href="#借用列表" class="headerlink" title="借用列表"></a>借用列表</h3><p>利用 <code>list</code> 实现对队列的模拟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表</span></span><br><span class="line">q = []</span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">q.append(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line"><span class="keyword">del</span> q[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列，即可实现栈，也可实现队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建队列</span></span><br><span class="line">d = collections.deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">d.append(<span class="number">1</span>) <span class="comment">#从队尾</span></span><br><span class="line">d.appendleft(<span class="number">2</span>) <span class="comment">#从队头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line">d.pop() <span class="comment">#从队尾</span></span><br><span class="line">d.popleft() <span class="comment">#从队头</span></span><br></pre></td></tr></table></figure><p>详见官方文档：<a href="https://docs.python.org/3/library/collections.html?highlight=collection#deque-objects" target="_blank" rel="noopener">deque objects</a>。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h3><p><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&amp;tqId=11175&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">从上往下打印二叉树</a>，借助队列实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从上到下每个节点值列表，例：[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintFromTopToBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        queue = []</span><br><span class="line">        res = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">            q_len = len(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, q_len):</span><br><span class="line">                r = queue[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">del</span> queue[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                res.append(r.val)</span><br><span class="line">                queue.append(r.left)</span><br><span class="line">                queue.append(r.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      人生苦短，我用 Python
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《白蛇：缘起》观后感</title>
    <link href="http://jalan.space/2019/02/02/2019/white-snake/"/>
    <id>http://jalan.space/2019/02/02/2019/white-snake/</id>
    <published>2019-02-02T13:53:00.000Z</published>
    <updated>2019-03-05T17:56:25.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/in-post/white-snake/snake.jpeg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>离在电影院里看《大鱼海棠》已经过去两年多了，那时写了一篇 <a href="/2016/07/07/2016-07-09-big-fish-and-chinese-flowering-crabapple/">《大鱼·海棠》——没有想象中的那么好</a>，觉得剧情与制作上都不如《大圣归来》来得惊艳。</p><p>今天约了老郑，想起前段时间在微博上看到了《白蛇：缘起》的动画宣传，果断入手两张票奔赴金逸。</p><p>两个人忐忑地坐在儿童厅里，本以为会有一堆熊孩子叽叽喳喳，直到看到 “十八禁” 的画面后恍然：这绝对不是一部儿童向的动画。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h3><p>《白娘子传奇》已是家喻户晓的故事，这部电影带上这个大 IP 讲起许仙和白娘子前世的故事，可谓 “旧瓶装新酒”。</p><p>而这 “新酒” 啊，真香。</p><blockquote><p>我们好奇为什么白素贞那么义无反顾地爱一个人，所以就想知道前面到底发生什么事情，这个切入点非常有意思，这既是白蛇爱情的缘起，也是电影故事的缘起。</p></blockquote><h3 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h3><p><img src="/img/in-post/white-snake/xuan.jpeg" alt=""></p><p>大爱许宣，不知情的以为是福建人叫了许仙的名字。</p><p>少年人阿宣，这一世不再是文弱书生了，他成了山野间的少年，善良活泼，勇敢坚毅，甚至颇有几分 “逍遥” 的味道。</p><p>不仅仅是身份的不同，他也完全打破了传说中对许仙的所有设定。</p><p>坚毅勇敢，从不认命。即便人妖殊途，他还是毅然决然地放弃了人的身份，主动变成最弱最无能的小妖，只为了和白蛇在一起。这哪是著名渣男许仙呢？</p><blockquote><p>如果不在一起，我现在就后悔。</p></blockquote><p>白素贞那么义无反顾地爱一个人，或许就是因为许仙前世的付出吧。</p><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p><img src="/img/in-post/white-snake/river.jpeg" alt=""></p><p>四个字：<strong>精致柔和</strong>！</p><p>特别是山水城镇的全景描绘，现代画风与中国传统水墨画风的交融十分惊艳。</p><p>片中有来有回的打斗场景也让人目不暇接，充满观赏性。（打斗场面比爱情线好看多了）</p><p>虽然人物表情还是略显僵硬，但是小白真是太好看了，prprprpr……</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>老船夫摇桨驱舟时突然唱出一句<a href="https://music.163.com/song?id=201487&amp;userid=53623203" target="_blank" rel="noopener">《渡情》</a> 让人会心一笑。</p><p>许宣嘲笑他唱的歌太老，自己清唱起一首<a href="https://music.163.com/song?id=1342466454&amp;userid=53623203" target="_blank" rel="noopener">《何须问》</a>来。</p><p>《何须问》这首歌的歌词是这样的：</p><blockquote><p>君不见东流水<br>来时无踪迹 一去无穷已<br>君不见城上日<br>今暝没山去 明朝复更出<br>何须问 浮生情<br>原知浮生是梦中<br>何须问 浮生情<br>只此浮生是梦中<br>只此浮生是梦中</p></blockquote><p>歌词出自几处：</p><blockquote><p>君不见东流水，一去无穷已。<br>—— 唐·贺兰进明《行路难五首》</p></blockquote><blockquote><p>来是无迹去无踪，去与来时是一同。何须更问浮生事，只此浮生是梦中。<br>——唐·鸟窠道林禅师</p></blockquote><blockquote><p>君不见城上日，今暝没尽去，明朝复更出。<br>——南北朝·鲍照《拟行路难十八首》</p></blockquote><p>无论是画风、人物建模还是曲调歌词，都是中国古典的味道。</p><p>而影片末尾小白再遇许仙时又放起了 <a href="https://music.163.com/song?id=201489&amp;userid=53623203" target="_blank" rel="noopener">《前世今生》</a>，令人莞尔。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>电影散场后吃了烧烤喝了小酒，八九点钟带着微微的醉意在福州夜晚的街道上一个人走着，有几分难得的轻松。</p><p>想到 “缘起” 的今生如此艰辛，而来世又要斗秃驴法海，且逃不过雷峰塔一劫，看来又是艰难的一世。</p><p>而我连来世都没有，想想真是轻松快活呢。</p>]]></content>
    
    <summary type="html">
    
      前世锁珠钗，此生断桥缘
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="影评" scheme="http://jalan.space/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Redis 字典与 rehash</title>
    <link href="http://jalan.space/2019/02/01/2019/redis-rehash/"/>
    <id>http://jalan.space/2019/02/01/2019/redis-rehash/</id>
    <published>2019-02-01T06:35:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h2><p>Redis 的字典使用哈希表作为底层实现。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表由 <code>dict.h/dictht</code> 结构定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><ul><li>table：数组，数组中的每个元素是一个指向 <code>dictEntry</code> 结构的指针</li><li>dictEntry：每个 <code>dictEntry</code> 结构保存着一个键值对</li><li>size：记录哈希表的大小</li><li>used：哈希表目前已有节点</li><li>sizemask：属性值总等于 <code>size - 1</code>，用于和哈希值一起决定一个键应该被放到 <code>table</code> 数组的哪个索引上</li></ul><p><img src="/img/in-post/redis/empty-hash-table.png" alt="一个空的哈希表"></p><h3 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h3><p>哈希表节点使用 <code>dictEntry</code> 结构表示， 每个 <code>dictEntry</code> 结构都保存着一个键值对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><ul><li>key：键</li><li>v：值，可以是指针、<code>uint64_t</code> 整数或 <code>int64_t</code> 整数</li><li>next：指向下一个哈希表节点的指针</li></ul><p><img src="/img/in-post/redis/dict-entry.png" alt="哈希表节点"></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典由 <code>dict.h/dict</code> 结构表示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line"></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><ul><li>type：一个指向 <code>dictType</code> 结构的指针<ul><li>dictType：保存了一簇用于操作特定类型键值对的函数</li></ul></li><li>privdata：保存了需要传给那些类型特定函数的可选参数</li><li>ht：包含两个项的数组<ul><li>ht[0]：字典只使用 <code>ht[0]</code></li><li>ht[1]：用于 rehash</li></ul></li><li>rehashidx：记录了 rehash 目前的进度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制值的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对比键的函数</span></span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁键的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁值的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/redis/dict.png" alt="字典"></p><h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>对哈希表的大小进行扩展或收缩</li><li>让哈希表的负载因子（load factor）维持在一个合理的范围内</li></ul><h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载因子 = 哈希表已保存节点数量 / 哈希表大小</span></span><br><span class="line"><span class="attr">load_factor</span> = ht[<span class="number">0</span>].used / ht[<span class="number">0</span>].size</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为字典的 <code>ht[1]</code> 哈希表分配空间<ul><li>扩展：<code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used * 2</code> 的 <code>2^n</code> （2 的 n 次方幂）</li><li>收缩：<code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used</code> 的 <code>2^n</code></li></ul></li><li>将保存在 <code>ht[0]</code> 中的所有键值对 rehash 到 <code>ht[1]</code> 上面</li><li>释放 <code>ht[0]</code>，将 <code>ht[1]</code> 设置为 <code>ht[0]</code>，并在 <code>ht[1]</code> 新创建一个空白哈希表</li></ol><h2 id="渐进式-rehash"><a href="#渐进式-rehash" class="headerlink" title="渐进式 rehash"></a>渐进式 rehash</h2><p>rehash 动作并不是一次性、集中式地完成的， 而是分多次、渐进式地完成。</p><p>因为如果键值的数目过多，一次性将这些键值对全部 rehash 到 <code>ht[1]</code> 的话， 庞大的计算量可能会导致服务器在一段时间内停止服务。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>为 <code>ht[1]</code> 分配空间</li><li>在字典中维持一个索引计数器变量 <code>rehashidx</code> ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始</li><li>开始 rehash<ul><li>字典的删除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行</li><li>新添加到字典的键值对则会一律会被保存到 <code>ht[1]</code> 里面</li><li>字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外， 还会顺带将 <code>ht[0]</code> 哈希表在 rehashidx 索引上的所有键值对 rehash 到 <code>ht[1]</code></li><li>操作完成后，将 <code>rehashidx</code> 属性的值 <code>+1</code></li></ul></li><li><code>ht[0]</code> 的所有键值对都会被 rehash 至 <code>ht[1]</code>，这时程序将 <code>rehashidx</code> 属性的值设为 -1 ， 表示 rehash 操作已完成</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>分而治之，将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上</li><li>避免集中式 rehash 而带来的庞大计算量</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tech.meituan.com/2018/07/27/redis-rehash-practice-optimization.html" target="_blank" rel="noopener">美团针对Redis Rehash机制的探索和实践</a></li><li>《Redis 设计与实现》</li></ul>]]></content>
    
    <summary type="html">
    
      字典的实现
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Redis" scheme="http://jalan.space/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言入门笔记</title>
    <link href="http://jalan.space/2019/01/29/2019/begin-go/"/>
    <id>http://jalan.space/2019/01/29/2019/begin-go/</id>
    <published>2019-01-29T07:29:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/studygolang/gctt-images/master/Learning-Go-s-Concurrency-Through-Illustrations/go.jpeg" alt=""></p><p>工作需要入手了 Go 语言，开发使用的是 <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin Web Framework</a>。</p><p>入手后发现语法和 PHP/Python/JavaScript 之流还是有很大区别的，下面对学习资料及入门笔记做简单整理。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Go（又称 Golang ），由 Google 开发</li><li>是一种 <a href="https://segmentfault.com/a/1190000012372372" target="_blank" rel="noopener">静态强类型</a>、<a href="https://www.cnblogs.com/zy1987/p/3784753.html" target="_blank" rel="noopener">编译型</a>、并发型，并具有垃圾回收功能的编程语言</li><li>语法接近 C 语言，但对于变量的声明有所不同</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>MacOS 下：</p><p>直接前往 <a href="https://golang.org/dl/" target="_blank" rel="noopener">官网</a> 下载 <code>.pkg</code> 完成安装。</p><h3 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h3><p>用于放置一个 go 程序员的所有 go 代码和依赖。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>src：go源码文件</li><li>pkg：package object（编译出的二进制文件）</li><li>bin：可执行文件（编译出的二进制文件）</li></ul><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>workspace 的路径，默认为 <code>$HOME/go</code>。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>直接安装 <code>.pkg</code> 文件未设置 GOPATH，需要手动设置一下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=<span class="variable">$HOME</span>/go</span><br></pre></td></tr></table></figure><p>加入环境变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$(go env GOPATH)/bin</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>程序入口为：<code>main.main</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hello-go"><a href="#hello-go" class="headerlink" title="hello.go"></a>hello.go</h3><p>创建新项目：<code>/Users/jjy/go/src/exampleProject</code>，新建文件 <code>hello.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在 <code>/Users/jjy/go/src/exampleProject</code> 下执行 <code>go install</code>，之后会在 <code>$GOPATH/bin</code> 目录下生成编译后的二进制程序。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ /Users/jjy/<span class="keyword">go</span>/bin/exampleProject</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><ul><li>函数多返回值</li><li><a href="https://studygolang.com/articles/13875" target="_blank" rel="noopener">并发编程</a></li><li><a href="http://www.runoob.com/go/go-error-handling.html" target="_blank" rel="noopener">错误处理</a></li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://go-zh.org/doc/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://cyent.github.io/golang/method/overview/" target="_blank" rel="noopener">Go语言学习 - cyent笔记</a></li><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go 入门指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      JavaScript 才不是最好的语言呢哼
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Github + CircleCI + GKE 部署应用</title>
    <link href="http://jalan.space/2019/01/26/2019/use-circleci-to-deploy/"/>
    <id>http://jalan.space/2019/01/26/2019/use-circleci-to-deploy/</id>
    <published>2019-01-26T08:04:00.000Z</published>
    <updated>2019-03-05T17:56:25.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/devops.png" alt=""></p><p>我的 <a href="https://github.com/GGGanon/dont-forget-me-service" target="_blank" rel="noopener">Venceremos</a> 完成三分之一了，客户端同学 Csming 催着要接口，于是开始着手测试环境的部署。</p><p>由于去年在 GCP 开了账户，之前也有了 GKE 的一些使用经验，打算这次也直接在 GKE 完成应用的部署。但是每次都自己打镜像，自己修改配置文件也太蠢了吧，那就顺便加上 CI 试试。</p><h1 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h1><p>持续集成（Continuous Integration）通常缩写为 CI，指的是当代码有变更时，立即进行构建和测试，反馈运行结果，我们可以根据测试结果，确定新代码是否可以和原有代码正确的集成在一起。</p><p>由于在这篇文章里还没涉及到测试部分，只是单纯的构建部署，因此还不能称作真正意义上的 CI。</p><h1 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h1><p>公司使用的持续集成工具是 Jenkins，也写过部署相关的 pipeline，但用 CircleCI 还是头一回。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CircleCI 是一个持续集成/持续部署的服务，开源项目可以免费使用，他的价格取决于你需要并发构建实例的数量，单个实例是免费的。</p><p>它能做到：</p><ul><li>关联你的 Github/BitBucket 项目</li><li>当代码有更新时自动抓取</li><li>执行工作流中的构建、测试、部署等步骤</li></ul><h2 id="关联-Github"><a href="#关联-Github" class="headerlink" title="关联 Github"></a>关联 Github</h2><p>可以在 <a href="https://github.com/marketplace" target="_blank" rel="noopener">Github MarketPlace</a> 中找到 <a href="https://github.com/marketplace/circleci" target="_blank" rel="noopener">CircleCI</a>，关联后即可使用。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>要让持续集成工具明白你的用意，首先要定义好你的工作流。</p><p>在项目的根目录下创建 <code>.circleci</code> 文件夹，并在文件夹中创建工作流配置文件 <code>config.yml</code>，CircleCI 将会根据 <code>config.yml</code> 中的内容执行相关操作。</p><p>一个简单的 <code>config.yaml</code> 配置格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="number">2</span></span><br><span class="line"><span class="attribute">jobs</span>:</span><br><span class="line">  <span class="attribute">build</span>:</span><br><span class="line">    <span class="attribute">docker</span>:</span><br><span class="line">      - <span class="attribute">image</span>: circleci/<span class="attribute">ruby</span>:<span class="number">2.4</span>.<span class="number">1</span></span><br><span class="line">    <span class="attribute">steps</span>:</span><br><span class="line">      - checkout</span><br><span class="line">      - <span class="attribute">run</span>: echo <span class="string">"A first hello"</span></span><br></pre></td></tr></table></figure><p>具体语法不多介绍了，详见官方文档：<a href="https://circleci.com/docs/" target="_blank" rel="noopener">Welcome to CircleCI Documentation</a>。</p><h2 id="我的工作流"><a href="#我的工作流" class="headerlink" title="我的工作流"></a>我的工作流</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>构建步骤要完成的几件事：</p><ul><li>拉取代码</li><li>构建镜像</li><li>将镜像推送至镜像仓库</li></ul><h4 id="代码拉取"><a href="#代码拉取" class="headerlink" title="代码拉取"></a>代码拉取</h4><p>非常简单，在 <code>steps</code> 中定义 <code>checkout</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    steps:</span></span><br><span class="line">      - checkout</span><br></pre></td></tr></table></figure><p><code>checkout</code> 会把项目源码拉取至当前工作目录。</p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>我采用的是根据 <code>Dockerfile</code> 完成镜像构建的。</p><p>项目是基于 nodeJS 开发的，首先要编写一个 <code>Dockerfile</code> 文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /workspace</span></span><br><span class="line"><span class="bash">WORKDIR /workspace</span></span><br><span class="line"><span class="bash">RUN npm install</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 8088</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>工作流：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    steps:</span></span><br><span class="line">      ......</span><br><span class="line">      - run:</span><br><span class="line"><span class="symbol">          name:</span> Build image</span><br><span class="line"><span class="symbol">          command:</span> |</span><br><span class="line">            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)</span><br><span class="line">            <span class="meta"># 构建镜像</span></span><br><span class="line">            docker build -t $FULL_DOCKER_IMAGE_NAME .</span><br></pre></td></tr></table></figure><p>这里的 <code>$FULL_DOCKER_IMAGE_NAME</code> 可以根据项目的具体需求来赋值。</p><h4 id="镜像推送"><a href="#镜像推送" class="headerlink" title="镜像推送"></a>镜像推送</h4><p>因为使用的是 GCP 的镜像仓库，因此这一步还包含了 GCP 的授权登录。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    steps:</span><br><span class="line">      <span class="string">......</span></span><br><span class="line">      - run:</span><br><span class="line">          name: Push image</span><br><span class="line">          <span class="keyword">command</span>: |</span><br><span class="line">            FULL_DOCKER_IMAGE_NAME=$<span class="params">(cat full_docker_image_name)</span></span><br><span class="line">            <span class="keyword">echo</span> $GCLOUD_SERVICE_KEY | base64 <span class="params">--decode</span> <span class="params">--ignore-garbage</span> &gt; gcloud-service-key.json</span><br><span class="line">            gcloud auth activate-service-account <span class="params">--key-file</span> gcloud-service-key.json</span><br><span class="line">            gcloud <span class="params">--quiet</span> auth configure-docker</span><br><span class="line">            docker push $FULL_DOCKER_IMAGE_NAME</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">  deploy:</span><br><span class="line">    steps:</span><br><span class="line">      <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">      - run:</span><br><span class="line">          name: Deploy</span><br><span class="line">          command: |</span><br><span class="line">            # 获取授权信息</span><br><span class="line">            echo <span class="variable">$GCLOUD_SERVICE_KEY</span> | base64 --decode --ignore-garbage &gt; gcloud-service-key.json</span><br><span class="line">            <span class="builtin-name">set</span> -x</span><br><span class="line">            # 授权登录</span><br><span class="line">            gcloud auth activate-service-account --key-file gcloud-service-key.json</span><br><span class="line">            gcloud --quiet<span class="built_in"> config </span><span class="builtin-name">set</span> project <span class="variable">$GOOGLE_PROJECT_ID</span></span><br><span class="line">            gcloud --quiet<span class="built_in"> config </span><span class="builtin-name">set</span> compute/zone <span class="variable">$GOOGLE_COMPUTE_ZONE</span></span><br><span class="line">            <span class="attribute">EXISTING_CLUSTER</span>=$(gcloud container clusters list <span class="attribute">--format</span>=<span class="string">"value(name)"</span> <span class="attribute">--filter</span>=<span class="string">"name=<span class="variable">$GOOGLE_CLUSTER_NAME</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;EXISTING_CLUSTER&#125;</span>"</span> != <span class="variable">$GOOGLE_CLUSTER_NAME</span> ]</span><br><span class="line">            then</span><br><span class="line">              gcloud --quiet container clusters create <span class="variable">$GOOGLE_CLUSTER_NAME</span> <span class="attribute">--num-nodes</span>=1</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              gcloud --quiet container clusters get-credentials <span class="variable">$GOOGLE_CLUSTER_NAME</span></span><br><span class="line">            fi</span><br><span class="line">            <span class="attribute">FULL_DOCKER_IMAGE_NAME</span>=$(cat workspace/full_docker_image_name)</span><br><span class="line">            # 滚动更新</span><br><span class="line">            kubectl <span class="attribute">--namespace</span>=default <span class="builtin-name">set</span> image deployment/venceremos <span class="attribute">dont-forget-service</span>=<span class="variable">$FULL_DOCKER_IMAGE_NAME</span> --record</span><br></pre></td></tr></table></figure><h3 id="定义执行流程"><a href="#定义执行流程" class="headerlink" title="定义执行流程"></a>定义执行流程</h3><p>之前的步骤都只是定义了工作流的模板，具体模板的执行顺序、依赖等还要使用 <code>workflow</code> 关键字进行最后的定义。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workflows</span>:</span><br><span class="line">  <span class="attribute">version</span>: <span class="number">2</span></span><br><span class="line">  <span class="attribute">build-deploy</span>:</span><br><span class="line">    <span class="attribute">jobs</span>:</span><br><span class="line">      - build</span><br><span class="line">      - <span class="attribute">deploy</span>:</span><br><span class="line">          <span class="attribute">requires</span>:</span><br><span class="line">            - build</span><br></pre></td></tr></table></figure><p>附上 <code>config.yaml</code> 文件：<a href="https://github.com/GGGanon/dont-forget-me-service/blob/develop/.circleci/config.yml" target="_blank" rel="noopener">config.yaml</a>，后续会根据不同分支来部署不同的环境，也会加上单元测试的步骤，持续更新。</p><h1 id="GCP"><a href="#GCP" class="headerlink" title="GCP"></a>GCP</h1><p>由于是在 GCP 上部署，在 CircleCI 中配置了 google-cloud-sdk 镜像：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">defaults</span>: &amp;defaults</span><br><span class="line">  <span class="attribute">docker</span>:</span><br><span class="line">    - <span class="attribute">image</span>: google/cloud-sdk<span class="variable">@sha256</span>:<span class="number">126</span>a49cfa2aa6e20d561fa14999bf657bc341efeba04939bd2f612bf843d12a6</span><br></pre></td></tr></table></figure><p>其他要注意的地方估计只有授权登录了，获取授权配置见：<a href="https://cloud.google.com/docs/authentication/getting-started" target="_blank" rel="noopener">Getting Started with Authentication</a></p><p>项目使用了两种 GCP 资源：</p><ul><li>Google Kubernetes Engine - Google k8s 引擎</li><li>Google Container Registry - Google 镜像仓库</li></ul><h2 id="GKE"><a href="#GKE" class="headerlink" title="GKE"></a>GKE</h2><p>因为使用的是 Google 自己的镜像仓库，也不需要仓库授权的麻烦步骤了。</p><p>官方文档：<a href="https://cloud.google.com/kubernetes-engine/docs/" target="_blank" rel="noopener">Google Kubernetes Engine Documentation</a></p><h2 id="Container-Registry"><a href="#Container-Registry" class="headerlink" title="Container Registry"></a>Container Registry</h2><p>Google 的镜像仓库，会根据 Storage 的具体流量进行收费。在国内使用很不友好，已被 qiang。</p><p>使用方法详见官方文档：<a href="https://cloud.google.com/container-registry/docs/" target="_blank" rel="noopener">Container Registry Documentation</a></p><hr><p>最后纪念一下调了半死终于跑起来的样子：</p><p><img src="/img/circle-ci-test.png" alt="(◔౪◔)"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.jianshu.com/p/36af6af74dfc" target="_blank" rel="noopener">使用 CircleCI 2.0 进行持续集成/持续部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      人生很短，部署流程很长
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="Kubernetes" scheme="http://jalan.space/tags/Kubernetes/"/>
    
      <category term="GCP" scheme="http://jalan.space/tags/GCP/"/>
    
      <category term="NodeJS" scheme="http://jalan.space/tags/NodeJS/"/>
    
      <category term="DevOps" scheme="http://jalan.space/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 入门笔记</title>
    <link href="http://jalan.space/2019/01/16/2019/begin-nodejs/"/>
    <id>http://jalan.space/2019/01/16/2019/begin-nodejs/</id>
    <published>2019-01-16T15:33:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>打算用 NodeJS 来撸一个小应用，走起！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Node.js 就是运行在服务端的 JavaScript。</p><ul><li>基于 Chrome V8 引擎的 JavaScript 运行环境</li><li>事件驱动</li><li>非阻塞式 I/O 的模型</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>macOS：</p><ol><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a> 下载包安装</li><li><code>brew install node</code></li></ol><p><code>node -v</code> 查看是否安装成功。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world"></a>Hello, world</h2><p>创建一个 <code>hello.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, world!"</span>);</span><br></pre></td></tr></table></figure><p>在终端运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">node</span> <span class="title">hello</span>.js</span><br></pre></td></tr></table></figure><h2 id="Restify"><a href="#Restify" class="headerlink" title="Restify"></a>Restify</h2><p>Restify 是一个基于 NodeJS 的 REST 应用框架，支持服务器端和客户端。Restify 比起 Express 更专注于 REST 服务。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> restify</span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>创建 <code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义响应方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello'</span> + req.params.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = restify.createServer();</span><br><span class="line">server.get(<span class="string">'/hello/:name'</span>, respond);</span><br><span class="line">server.head(<span class="string">'/hello/:name'</span>, respond);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 3900 接口</span></span><br><span class="line">server.listen(<span class="number">3900</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s listening at %s'</span>, server.name, server.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行应用</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ node app.js</span><br><span class="line">restify listening at <span class="link">http://</span>[<span class="string">::</span>]:3900</span><br></pre></td></tr></table></figure><p>访问接口</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▶ curl <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">3900</span>/hello/world</span><br><span class="line"><span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>Github：<a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken</a></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p><code>sign</code> 方法报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error: </span>Expected "payload" to be a plain object.</span><br></pre></td></tr></table></figure><p>原因：直接将 mongoDB 查询结果对象 mongoosejs Object 作为参数传递，mongoosejs Object 并非序列化参数，需要使用 <code>toJSON()</code> 进行转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 token 并设置用户 token 缓存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// token 生成</span></span><br><span class="line">    <span class="keyword">var</span> accessToken = jwt.sign(user.toJSON(), config.secret, &#123;</span><br><span class="line">        expiresIn: <span class="number">1200</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> accessToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://blog.fens.me/nodejs-restify/" target="_blank" rel="noopener">restify构建REST服务</a></li><li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js 教程</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-use-restify-develop-rest-api/index.html?ca=drs-&amp;utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">1</a></li></ul>]]></content>
    
    <summary type="html">
    
      PHP 才不是最好的语言呢哼
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="NodeJS" scheme="http://jalan.space/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>B-Tree 与 B+Tree</title>
    <link href="http://jalan.space/2019/01/05/2019/b-tree-and-b-plus-tree/"/>
    <id>http://jalan.space/2019/01/05/2019/b-tree-and-b-plus-tree/</id>
    <published>2019-01-05T02:38:00.000Z</published>
    <updated>2019-03-05T17:56:25.096Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 MySQL 的相关书籍，在此复盘一下索引相关的数据结构 B-Tree 和 B+Tree。</p><h2 id="诞生原因"><a href="#诞生原因" class="headerlink" title="诞生原因"></a>诞生原因</h2><p>二叉查找树的时间复杂度已经是 O(logN) 了，为什么还要使用 B-Tree 和 B+Tree 呢？</p><h3 id="磁盘-IO-问题"><a href="#磁盘-IO-问题" class="headerlink" title="磁盘 IO 问题"></a>磁盘 IO 问题</h3><p>平衡二叉树由于树深度过高而造成磁盘 IO 读写过于频繁，从而效率低下。为了减少磁盘 IO 的次数：</p><ul><li>每个节点存储多个元素</li><li>摒弃二叉树，采用多叉树</li></ul><p>从而诞生了多路查找树。</p><h3 id="不平衡问题"><a href="#不平衡问题" class="headerlink" title="不平衡问题"></a>不平衡问题</h3><p>二叉查找树存在的极端情况：所有节点都位于同一侧。</p><p>这种情况下查找效率就十分低下了，因此需要对二叉树左右子树的高度进行平衡化处理，于是就有了平衡二叉树（Balanced Binary Tree）。</p><p>平衡的概念：</p><ul><li>各个分支的高度是均匀的</li><li>左右子树的高度之差绝对值小于 1</li></ul><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h2><p><img src="/img/in-post/b-tree.png" alt="B-Tree"></p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>m 阶 B-Tree 特征：</p><ul><li>每个节点最多可以拥有 m 棵子树</li><li>根节点：至少有 2 个节点</li><li>非根非叶节点：至少有 <code>ceil(m/2)</code> 个子树</li><li>非叶节点中的信息：<code>[n, A0, K1, A1, K2, A2, ..., Kn, An]</code><ul><li>n：节点中保存的关键字个数（<code>ceil(m/2) - 1 &lt;= n &lt;= m-1</code>）</li><li>K：关键字，有序，<code>Kn &lt; k(n+1)</code></li><li>A：指向子树根节点的指针</li></ul></li><li>从根到叶子的每一条路径都有相同的长度（叶子节点都在相同层）</li></ul><h2 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h2><p><img src="/img/in-post/b+tree.png" alt="B+Tree"></p><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><ul><li>有 k 个子树的中间节点包含有 k 个元素（B-Tree 中是 k-1 个元素）</li><li>非叶子节点中每个元素不保存数据，仅用来索引。节点中仅含有其子树（根节点）中的最大（或最小）关键字</li><li>所有叶子节点中包含了全部元素的信息（无论查找成功与否，每次查找都走了一条从根到叶子节点的路径）</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>单一节点存储更多元素，磁盘 IO 次数更少</li><li>所有查询都要查找到叶子节点，查询性能稳定</li><li>所有叶子节点形成有序链表，便于范围查找（B-Tree 的范围查找需要通过中序遍历实现）</li></ul><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>MySQL 中的索引可以以一定顺序引用多个列，这种索引叫做复合（联合）索引，一般的，一个联合索引是一个有序元组 <code>&lt;a1, a2, …, an&gt;</code>，其中各个元素均为数据表的一列。</p><p>联合索引对多个值进行排序的依据是 <code>CREATE TABLE</code> 语句中定义索引时列的顺序。</p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`name_cid_INX`</span> (<span class="string">`name`</span>,<span class="string">`cid`</span>),</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">8</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>这里使用了联合索引，索引列的顺序为 <code>&lt;name, cid&gt;</code>。所以现根据 <code>name</code> 排序，再根据 <code>cid</code> 排序。排序后的数据可能是这样的：</p><table><thead><tr><th>name</th><th>cid</th></tr></thead><tbody><tr><td>a</td><td>6</td></tr><tr><td>c</td><td>4</td></tr><tr><td>c</td><td>5</td></tr><tr><td>h</td><td>1</td></tr><tr><td>z</td><td>9</td></tr></tbody></table><p>由排序结果可以观察出：</p><ul><li><code>name</code> 一定是有序的，<code>cid</code> 是无序的（<strong>直接使用第二个cid字段进行条件判断是用不到索引的</strong>）</li><li>若要 <code>cid</code> 有序，<code>name</code> 需等值匹配（<strong>要想使用第二个索引，必须先使用第一个索引的原因</strong>）</li></ul><p>这样看来，一系列多列索引的有效查询条件就很好解释了。</p><h4 id="联合索引的有效查询条件"><a href="#联合索引的有效查询条件" class="headerlink" title="联合索引的有效查询条件"></a>联合索引的有效查询条件</h4><ul><li>全值匹配：和索引中的所有列进行匹配</li><li>匹配最左前缀：只使用索引第一列</li><li>匹配列前缀：可以只匹配某一列的值的开头部分</li><li>匹配范围值：只匹配第一列的范围值</li><li>精确匹配某一列并范围匹配另一列：前缀精确匹配，后续跟一列范围匹配</li></ul><h5 id="灵魂拷问"><a href="#灵魂拷问" class="headerlink" title="灵魂拷问"></a>灵魂拷问</h5><p>如果使用 <code>cid=1 AND name=&#39;小红&#39;</code> 顺序设置 <code>WHERE</code> 是否还会使用索引呢？</p><p><strong>答案是会的</strong>。</p><p>MySQL 查询优化器会判断纠正这条 SQL 语句该以什么样的顺序执行效率最高，最后才生成真正的执行计划。所以 <code>WHERE</code> 中 <code>AND</code> 条件的先后顺序对如何选择索引是无关的，优化器会去分析判断选用哪个索引。</p><h2 id="搜索时间复杂度"><a href="#搜索时间复杂度" class="headerlink" title="搜索时间复杂度"></a>搜索时间复杂度</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>一个有 n 个节点的二叉树，它的最小深度为 <code>log(n)</code>（log 底为2），最大深度为 <code>n</code>（所有节点都在树的同一边）。</p><p>二叉搜索树的深度越小，那么搜索所需要的运算时间越小。一个深度为 <code>log(n)</code> 的二叉搜索树，搜索算法的时间复杂度也是 <code>O(log n)</code>。</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>同样，一棵平衡二叉树的搜索时间复杂度为 <code>O(log n)</code>，n 是节点数，底数是树的分叉数。</p><p><img src="https://images2015.cnblogs.com/blog/303980/201703/303980-20170331183940836-1426600354.png" alt="平衡二叉树高度计算"></p><h2 id="在-MySQL-中的使用"><a href="#在-MySQL-中的使用" class="headerlink" title="在 MySQL 中的使用"></a>在 MySQL 中的使用</h2><h3 id="InnoDB-索引机制"><a href="#InnoDB-索引机制" class="headerlink" title="InnoDB 索引机制"></a>InnoDB 索引机制</h3><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`zodiac`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_name`</span> (<span class="string">`name`</span>)</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'鼠'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'牛'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'虎'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'兔'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'龙'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'蛇'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'马'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'羊'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'猴'</span>);</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">'鸡'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">'狗'</span>); &amp;nbsp;</span><br><span class="line"><span class="keyword">insert</span> zodiac(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">'猪'</span>);</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/innodb-index.png" alt="InnoDB 主索引"></p><ul><li>B+Tree 每个节点的关键字是表的主键</li><li>叶子页（leaf page）包含了数据记录，非叶子节点只包含主键<ul><li>“聚簇”：表示数据行和相邻的键值紧凑地存储在一起，因为索引和数据是保存在同一棵B树之中，从聚簇索引中获取数据通常比在非聚簇索引中要来得快</li></ul></li><li>InnoDB 的数据文件是依靠主键组织起来的，在 InnoDB 下创建表必须指定主键，如果没有显式指定，依然会对该表隐式地定义一个主键作为聚簇索引</li></ul><h3 id="MyISAM-索引机制"><a href="#MyISAM-索引机制" class="headerlink" title="MyISAM 索引机制"></a>MyISAM 索引机制</h3><p><img src="/img/in-post/mysiam-index.png" alt="InnoDB 主索引"></p><ul><li>B+Tree 叶子节点中包含的是数据记录的地址（可以理解为”行号”）</li></ul><h3 id="两者差异对比"><a href="#两者差异对比" class="headerlink" title="两者差异对比"></a>两者差异对比</h3><p><img src="/img/in-post/innodb-mysiam-compare.png" alt="差异对比"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《高性能 MySQL》</li><li><a href="https://blog.csdn.net/z_ryan/article/details/79685072" target="_blank" rel="noopener">简单剖析B树（B-Tree）与Ｂ+树</a></li><li><a href="https://www.cnblogs.com/xiaoxi/p/6868087.html" target="_blank" rel="noopener">MySQL和B树的那些事</a></li><li><a href="https://www.cnblogs.com/vincently/p/4526560.html" target="_blank" rel="noopener">【经典数据结构】B树与B+树</a></li><li><a href="https://www.zhihu.com/question/36996520" target="_blank" rel="noopener">mysql索引最左匹配原则的理解?</a></li></ul>]]></content>
    
    <summary type="html">
    
      MySQL 索引复盘
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="MySQL" scheme="http://jalan.space/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 上传文件到 Google Cloud Storage</title>
    <link href="http://jalan.space/2018/12/27/2018/upload-file-to-gcp-storage-from-python3/"/>
    <id>http://jalan.space/2018/12/27/2018/upload-file-to-gcp-storage-from-python3/</id>
    <published>2018-12-27T15:46:00.000Z</published>
    <updated>2019-03-05T17:56:25.095Z</updated>
    
    <content type="html"><![CDATA[<p>需要上传生成的文本文件到 GCP 的 Storage 中，使用 Python 实现。</p><h2 id="安装-gcloud"><a href="#安装-gcloud" class="headerlink" title="安装 gcloud"></a>安装 gcloud</h2><p>首先，需要安装 Python 的 gcloud 库，<a href="https://googleapis.github.io/google-cloud-python/" target="_blank" rel="noopener">google-cloud-python</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gcloud</span><br><span class="line">pip <span class="keyword">install</span> google-cloud-<span class="keyword">storage</span></span><br></pre></td></tr></table></figure><h2 id="获取凭证文件"><a href="#获取凭证文件" class="headerlink" title="获取凭证文件"></a>获取凭证文件</h2><p><a href="https://cloud.google.com/storage/docs/reference/libraries?authuser=1#client-libraries-install-python" target="_blank" rel="noopener">点击前往</a></p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gcloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line">storage_client = storage.Client.from_service_account_json(<span class="string">'creds.json'</span>) <span class="comment"># 指定凭证文件</span></span><br><span class="line">bucket = self.storage_client.get_bucket(<span class="string">'bucket-name'</span>) <span class="comment"># 设置 bucket 名称</span></span><br><span class="line">blob = bucket.blob(blob_name) <span class="comment"># 设置 storage 中的文件名</span></span><br><span class="line">blob.upload_from_filename(path_to_file) <span class="comment"># 设置要上传的源文件路径</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      from gcloud import storage
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
      <category term="GCP" scheme="http://jalan.space/tags/GCP/"/>
    
  </entry>
  
</feed>
