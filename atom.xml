<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘归</title>
  
  <subtitle>愿得朱衣暗点头。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jalan.space/"/>
  <updated>2021-01-19T11:45:01.724Z</updated>
  <id>http://jalan.space/</id>
  
  <author>
    <name>Jalan.江佳扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】给初学者的示例：什么是 WSGI？</title>
    <link href="http://jalan.space/2020/11/19/2020/what-is-wsgi/"/>
    <id>http://jalan.space/2020/11/19/2020/what-is-wsgi/</id>
    <published>2020-11-19T12:37:00.000Z</published>
    <updated>2021-01-19T11:45:01.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://levelup.gitconnected.com/demoforbeginner-what-is-wsgi-ac3c2a67089" target="_blank" rel="noopener">DemoForBeginner: What is WSGI?</a></li><li>原文作者：<a href="https://medium.com/@zosionlee.chou" target="_blank" rel="noopener">Zosionlee</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2020/demoforbeginner-what-is-wsgi.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/article/2020/demoforbeginner-what-is-wsgi.md</a></li><li>译者：<a href="http://jalan.space/">JalanJiang</a></li><li>校对者：</li></ul></blockquote><h1 id="给初学者的示例-什么是-WSGI？"><a href="#给初学者的示例-什么是-WSGI？" class="headerlink" title="给初学者的示例: 什么是 WSGI？"></a>给初学者的示例: 什么是 WSGI？</h1><p>PEP-3333 详细描述了 WSGI 协议规范。WSGI 是 Python Web Server Gateway Interface（Python 服务器网关协议）的缩写，是一个描述如何在 Web 服务器与 Python 应用之间交互的接口规范。因此，我们将讨论并理解如何以代码的形式实现 WSGI 协议。你可以在我的 GitHub 仓库中获得所有的源码。</p><p><img src="https://cdn-images-1.medium.com/max/3314/1*PHVAYtkTLNcEl-OqhpsUUA.png" alt=""></p><p>让我们一起来探讨应用程序与服务器吧。</p><h4 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h4><ul><li>应用程序是可调用的，它有且仅接收两个参数，例如 <code>application(environ, start_response)</code>。并且这两个参数只能作为位置参数传入。</li><li>应用程序必须被多次调用，因为所有的服务器/网关（除了 CGI）都将发出这种重复的请求。</li><li><code>environ</code> 是一个字典参数，它包含 CGI 风格的环境变量。它必须使用 Python 内置的字典类型，并允许应用程序以任何方式修改它。字典还包括某些 WSGI 变量，它的命名需要符合相应的规范，例如：</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">environ = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> os.environ.items()&#125;</span><br><span class="line">environ[<span class="string">'wsgi.input'</span>] = self.rfile</span><br><span class="line">environ[<span class="string">'wsgi.errors'</span>] = sys.stderr</span><br><span class="line">environ[<span class="string">'wsgi.version'</span>] = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">environ[<span class="string">'wsgi.multithread'</span>] = <span class="keyword">False</span></span><br><span class="line">environ[<span class="string">'wsgi.multiprocess'</span>] = <span class="keyword">True</span></span><br><span class="line">environ[<span class="string">'wsgi.run_once'</span>] = <span class="keyword">True</span></span><br><span class="line">environ[<span class="string">'wsgi.url_scheme'</span>] = <span class="string">'http'</span></span><br></pre></td></tr></table></figure><ul><li><code>start_response</code> 参数也是一个可调用参数，它接收两个必须的未知的参数（<code>status</code> 和 <code>response_header</code>）和一个可选参数（<code>exc_info=None</code>）。<code>status</code> 是一个 HTTP 状态字符串，<code>response_headers</code> 是一个描述了 HTTP 响应头部（<code>header_name</code>，<code>header_value</code>）的元组列表。</li><li><code>start_response</code> 必须返回一个 callable，这个 callable 需要一个位置参数：一个二进制字符串作为 HTTP 响应的主体。</li><li>如果应用程序返回的迭代对象拥有一个关闭方法，则无论请求是否正常完成，服务器必须在当前请求结束后调用该方法。</li></ul><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li>接收 HTTP 请求并返回 HTTP 响应。</li><li>提供 <code>environ</code> 数据并执行回调函数 <code>start_response</code>。</li><li>调用 WSGI 应用程序并传递 <code>environ</code> 和 <code>start_response</code> 参数。</li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>对于某些应用程序，单个对象可能扮演着服务器的角色，同时也可以作为某些服务器相关的应用程序。WSGI 应用程序相当于 WSGI 服务器，WSGI 服务器又等效于 WSGI 应用程序。</p><h4 id="让我们手写一个示例代码"><a href="#让我们手写一个示例代码" class="headerlink" title="让我们手写一个示例代码"></a>让我们手写一个示例代码</h4><p>所有手写代码都在我的 <a href="https://github.com/ZosionLee/DemoForBeginner/blob/develop/wsgi/wsgi_handwrite.py" target="_blank" rel="noopener">GitHub 仓库</a> 中，代码如下所示：</p><h4 id="应用程序-1"><a href="#应用程序-1" class="headerlink" title="应用程序"></a>应用程序</h4><p>以下列出执行应用程序的三种方式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">'''通过定义函数实现应用程序'''</span></span><br><span class="line"></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'hello,world\n'</span>.encode(<span class="string">'utf-8'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IterSimpleApp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''可迭代类'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.start_response = start_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        status = <span class="string">'200 OK'</span></span><br><span class="line">        response_headers = [</span><br><span class="line">            (<span class="string">'Content-type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">        ]</span><br><span class="line">        self.start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'hello,world\n'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstSimpleApp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''可调用实例'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        status = <span class="string">'200 OK'</span></span><br><span class="line">        response_headers = [</span><br><span class="line">            (<span class="string">'Content-type'</span>, <span class="string">'text/plain; charset=utf-8'</span>),</span><br><span class="line">        ]</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'hello,world\n'</span>.encode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><h4 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h4><p>一个用于认证的中间件示例代码如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''用于认证过滤的中间件示例'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,app)</span>:</span></span><br><span class="line">        self.app=app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,environ,start_response)</span>:</span></span><br><span class="line">        auth = environ.get(<span class="string">'wsgi.authentication'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> auth != <span class="string">'zosionlee'</span>:</span><br><span class="line">            start_response(</span><br><span class="line">                <span class="string">'403 Forbidden'</span>,</span><br><span class="line">                [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)]</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'No authentication, forbidden.\n'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">return</span> self.app(environ, start_response)</span><br></pre></td></tr></table></figure><h4 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h4><p>自定义服务器模块比较复杂，主要使用了下列 Python 原生库：</p><ul><li>使用 <code>os</code> 模块获取 <code>environ</code>。</li><li>使用 <code>sys</code> 来设置错误输出。</li><li>通过事件循环实现 IO 多路复用的选择器。</li><li>使用 socket 通信。</li></ul><p><img src="https://cdn-images-1.medium.com/max/3702/1*wKZbKXmlXr-dx9QaXgI20w.png" alt=""></p><p>关于定制服务器，实际上 Python 实现了一个 WSGI 协议库，用于在开发环境中使用，例如 wsgiref。我在这里阐述服务器只是为了方便你更好地理解 WSGI 服务器是如何实现的。</p><h4 id="让我们来看看-wsgiref"><a href="#让我们来看看-wsgiref" class="headerlink" title="让我们来看看 wsgiref"></a>让我们来看看 wsgiref</h4><p>wsgiref 基于 <strong>socketserver</strong> 库，所以让我们先来看看 socketserver。</p><p>socketserver 的类图如下：</p><p><img src="https://cdn-images-1.medium.com/max/3726/1*ZeEVOdTcTBdMtF7huJydow.png" alt=""></p><p>基于对 socketserver 的分析和理解，wsgiref 是这样实现 WSGI 协议的： </p><p><img src="https://cdn-images-1.medium.com/max/3776/1*kI7Xtyw0pzpv6BjpVEsNHg.png" alt=""></p><h4 id="让我们总结一下"><a href="#让我们总结一下" class="headerlink" title="让我们总结一下"></a>让我们总结一下</h4><ul><li>PEP-3333 详细描述了 WSGI。</li><li>我们已经讨论了 WSGI 服务器与应用程序。</li><li>我们大致地看了 wsgiref，并了解了 WSGIServer 和 WSGIRequestHandler 的交互过程。</li><li>根据 WSGI 协议的描述，我们手写代码实现了应用程序与服务器。</li></ul><p>这就是文章的所有内容，希望它对你有所帮助。如果你喜欢这篇原创文章，请点击 claps。欢迎留言。谢谢。</p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      WSGI 协议规范
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="网络" scheme="http://jalan.space/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序自定义 tabBar 踩坑实践</title>
    <link href="http://jalan.space/2020/10/30/2020/wx-miniprogram-tabbar/"/>
    <id>http://jalan.space/2020/10/30/2020/wx-miniprogram-tabbar/</id>
    <published>2020-10-30T12:37:00.000Z</published>
    <updated>2021-01-19T11:42:41.056Z</updated>
    
    <content type="html"><![CDATA[<p>微信<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html?search-key=%E8%87%AA%E5%AE%9A%E4%B9%89tabbar" target="_blank" rel="noopener">官方文档</a>对自定义 tabBar 的阐述较为潦草，在开发自定义 tabBar 过程中我踩了很多坑，因此在此处做个总结。</p><p>我使用 <a href="https://vant-contrib.gitee.io/vant-weapp/#/intro" target="_blank" rel="noopener">Vant Weapp</a> 作为 UI 组件库，下面以此组件库为例。</p><h2 id="定义-tabBar"><a href="#定义-tabBar" class="headerlink" title="定义 tabBar"></a>定义 tabBar</h2><h3 id="创建自定义-tabBar-文件"><a href="#创建自定义-tabBar-文件" class="headerlink" title="创建自定义 tabBar 文件"></a>创建自定义 tabBar 文件</h3><p>创建一个与 <em>/pages</em> 的<strong>同级</strong>目录，命名为  <em>/custom-tab-bar</em>，注意目录层级与目录命名问题，不可用其他名称命名。</p><p>在 <em>/custom-tab-bar</em> 下创建四个文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.js</span><br><span class="line">index.json</span><br><span class="line">index.wxml</span><br><span class="line">index.wxss</span><br></pre></td></tr></table></figure><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>在 <em>index.js</em> 中我们定义相关数据：</p><ul><li><code>active</code>：当前被点击 tab 的索引</li><li><code>list</code>：tab 列表</li></ul><p>以及一个切换 tab 时触发的方法：</p><ul><li><code>function onChange(event)</code>：标签切换时触发，修改 <code>active</code> 值，点亮被点击的 tab 并进行页面跳转</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// 选中的 tab </span></span><br><span class="line">    active: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 菜单列表</span></span><br><span class="line">    list: [</span><br><span class="line">      &#123;</span><br><span class="line">        pagePath: <span class="string">'/pages/subscriptions/subscriptions'</span>,</span><br><span class="line">        text: <span class="string">'订阅'</span>,</span><br><span class="line">        name: <span class="string">'subscriptions'</span>,</span><br><span class="line">        icon: <span class="string">'bullhorn-o'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        pagePath: <span class="string">'/pages/profile/profile'</span>,</span><br><span class="line">        text: <span class="string">'我的'</span>,</span><br><span class="line">        name: <span class="string">'profile'</span>,</span><br><span class="line">        icon: <span class="string">'user-o'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 标签切换</span></span><br><span class="line">    onChange: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123; <span class="attr">active</span>: event.detail &#125;)</span><br><span class="line">      wx.switchTab(&#123;</span><br><span class="line">        url: <span class="keyword">this</span>.data.list[event.detail].pagePath,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="index-json"><a href="#index-json" class="headerlink" title="index.json"></a>index.json</h4><p>在 <em>index.json</em> 中，将 <code>component</code> 参数值设为 <code>true</code>，代表这是一个自定义组件：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"component"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我使用了 <a href="https://vant-contrib.gitee.io/vant-weapp/#/intro" target="_blank" rel="noopener">Vant Weapp</a> 的 <a href="https://vant-contrib.gitee.io/vant-weapp/#/tabbar" target="_blank" rel="noopener">tabBar 标签栏</a>，所以还需引入额外组件：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"component"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="attr">"van-tabbar"</span>: <span class="string">"@vant/weapp/tabbar/index"</span>,</span><br><span class="line">    <span class="attr">"van-tabbar-item"</span>: <span class="string">"@vant/weapp/tabbar-item/index"</span>,</span><br><span class="line">    <span class="attr">"van-icon"</span>: <span class="string">"@vant/weapp/icon/index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-wxml"><a href="#index-wxml" class="headerlink" title="index.wxml"></a>index.wxml</h4><p>在 <em>index.wxml</em> 中定义组件形态，我在此处使用 <a href="https://vant-contrib.gitee.io/vant-weapp/#/intro" target="_blank" rel="noopener">Vant Weapp</a> 的 <a href="https://vant-contrib.gitee.io/vant-weapp/#/tabbar" target="_blank" rel="noopener">tabBar 标签栏</a>，详见代码，不再赘述。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-tabbar</span> <span class="attr">active</span>=<span class="string">"&#123;&#123; active &#125;&#125;"</span> <span class="attr">bind:change</span>=<span class="string">"onChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-tabbar-item</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">wx:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">icon</span>=<span class="string">"&#123;&#123;item.icon&#125;&#125;"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-path</span>=<span class="string">"&#123;&#123;item.pagePath&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-tabbar</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-app-json"><a href="#配置-app-json" class="headerlink" title="配置 app.json"></a>配置 app.json</h3><p>在 <em>app.json</em> 中配置如下参数：</p><ul><li><code>usingComponents</code>：仅声明即可</li><li><code>tabBar</code>：tabBar 组件的具体配置<ul><li><code>custom</code>：设为 <code>true</code>，表示使用自定义组件</li><li><code>list</code>：tab 页列表，在列表中的页面将被设置为 tab 页，自动加载 tabBar</li></ul></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"usingComponents"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tabBar"</span>:&#123;</span><br><span class="line">        <span class="attr">"custom"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"color"</span>:<span class="string">"#000000"</span>,</span><br><span class="line">        <span class="attr">"selectedColor"</span>:<span class="string">"#000000"</span>,</span><br><span class="line">        <span class="attr">"backgroundColor"</span>:<span class="string">"#000000"</span>,</span><br><span class="line">        <span class="attr">"list"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"pagePath"</span>:<span class="string">"pages/subscriptions/subscriptions"</span>,</span><br><span class="line">                <span class="attr">"text"</span>:<span class="string">"订阅列表"</span>,</span><br><span class="line">                <span class="attr">"iconPath"</span>:<span class="string">""</span>,</span><br><span class="line">                <span class="attr">"selectedIconPath"</span>:<span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"pagePath"</span>:<span class="string">"pages/profile/profile"</span>,</span><br><span class="line">                <span class="attr">"text"</span>:<span class="string">"关于我"</span>,</span><br><span class="line">                <span class="attr">"iconPath"</span>:<span class="string">""</span>,</span><br><span class="line">                <span class="attr">"selectedIconPath"</span>:<span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-tabBar-选中态"><a href="#实现-tabBar-选中态" class="headerlink" title="实现 tabBar 选中态"></a>实现 tabBar 选中态</h3><p>根据微信官方文档描述，每个 tab 页面 tabBar 的实例是不同的：</p><blockquote><p>每个 tab 页下的自定义 tabBar 组件实例是不同的，可通过自定义组件下的 getTabBar 接口，获取当前页面的自定义 tabBar 组件实例。</p></blockquote><p>显而易见，每当切换 tab 页时，我们都需要更新 tabBar 的选中态。关于选中态的实现，官方文档描述如下：</p><blockquote><p>注意：如需实现 tab 选中态，要在当前页面下，通过 getTabBar 接口获取组件实例，并调用 setData 更新选中态。</p></blockquote><p>我们可以在使用到 tabBar 的页面中这样实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getTabBar === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.getTabBar()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getTabBar().setData(&#123;</span><br><span class="line">        <span class="comment">// 当前页面的 tabBar 索引</span></span><br><span class="line">        active: <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p>至此，一个自定义 tabBar 的实现已全部完成。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="getTabBar-方法缺失"><a href="#getTabBar-方法缺失" class="headerlink" title="getTabBar() 方法缺失"></a>getTabBar() 方法缺失</h3><p>在实现 tabBar 选中态时遇到 <code>getTabBar()</code> 方法缺失的问题。在小程序开发工具中跳转到 <code>getTabBar()</code> 方法的定义，我们可以看到：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前页面的 custom-tab-bar 的组件实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最低基础库版本：[`2.6.2`](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">getTabBar(): TrivialInstance</span><br></pre></td></tr></table></figure><p>该方法的最低基础版本库为 2.6.2，我们修改 <em>project.config.json</em> 文件中的 <code>libVersion</code> 字段，升级到指定版本库即可。</p><h3 id="升级版本库后-tabBar-组件报错"><a href="#升级版本库后-tabBar-组件报错" class="headerlink" title="升级版本库后 tabBar 组件报错"></a>升级版本库后 tabBar 组件报错</h3><p>报错内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Component is not found in path &quot;custom-tab-bar/index&quot;</span><br></pre></td></tr></table></figure><p>该原因是由于 tabBar 组件目录放置错误导致的，需要注意以下几点：</p><ol><li>目录需与 <em>/pages</em> 同级</li><li>目录名称是 <em>custom-tab-bar</em></li><li>目录下所包含的文件名为 <em>index.后缀</em></li><li>在 <em>app.json</em> 配置中，<code>tabBar</code> 下的 <code>custom</code> 字段需设置为 <code>true</code></li></ol><h3 id="getTabBar-始终返回-null"><a href="#getTabBar-始终返回-null" class="headerlink" title="getTabBar() 始终返回 null"></a>getTabBar() 始终返回 null</h3><p>依旧是目录放置与文件命名问题，处理方法同上。</p><p>另外，不需要在 <em>app.json</em> 的 <code>usingComponents</code> 引入 tabBar 组件，如果你放置目录与命名正确，小程序会自动引入。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html?search-key=%E8%87%AA%E5%AE%9A%E4%B9%89tabbar" target="_blank" rel="noopener">小程序官方文档：自定义 tabBar</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000c8a90478030226cf98ea3751013" target="_blank" rel="noopener">官方自定义 tabbar 的显示和隐藏</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000cc43f5d03a831686af950a51400?_at=tdjfeehau" target="_blank" rel="noopener">使用自定义 tabbar,在 tab 页中使用 this.getTabBar() 一直返回 null，什么原因？</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000c0a0ea183404283481066e5b400" target="_blank" rel="noopener">getTabBar 无法调用 接口相关说明在哪里？</a></li></ul><hr><blockquote><p>欢迎关注公众号「<strong>编程拯救世界</strong>」，来技术世界一起冒险成长~</p></blockquote>]]></content>
    
    <summary type="html">
    
      开发自定义 tabBar 的踩坑总结
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="前端" scheme="http://jalan.space/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://jalan.space/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Golang 切片综合指南</title>
    <link href="http://jalan.space/2020/10/14/2020/a-comprehensive-guide-to-slices-in-golang/"/>
    <id>http://jalan.space/2020/10/14/2020/a-comprehensive-guide-to-slices-in-golang/</id>
    <published>2020-10-14T12:37:00.000Z</published>
    <updated>2021-01-19T11:39:21.933Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://codeburst.io/a-comprehensive-guide-to-slices-in-golang-bacebfe46669" target="_blank" rel="noopener">A Comprehensive Guide to Slices in Golang</a></li><li>原文作者：<a href="https://medium.com/@rksurwase" target="_blank" rel="noopener">Radhakishan Surwase</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2020/a-comprehensive-guide-to-slices-in-golang.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/article/2020/a-comprehensive-guide-to-slices-in-golang.md</a></li><li>译者：<a href="http://jalan.space/">JalanJiang</a></li><li>校对者：<a href="https://github.com/Eminlin" target="_blank" rel="noopener">Emin</a>，<a href="https://github.com/suhanyujie" target="_blank" rel="noopener">Samuel Jie</a></li></ul></blockquote><h1 id="Golang-切片综合指南"><a href="#Golang-切片综合指南" class="headerlink" title="Golang 切片综合指南"></a>Golang 切片综合指南</h1><p><img src="https://cdn-images-1.medium.com/max/12000/1*i7lsjZyVnJxDEIg8Qibdlw.jpeg" alt="由于 [Paweł Czerwiński](https://unsplash.com/@pawel_czerwinski) 拍摄于 [Unsplash](https://unsplash.com/s/photos/array)"></p><p>在这篇文章中，我们将复习「切片」的概念，它是 Golang 中一个重要的数据结构，这一数据结构为你提供了处理与管理数据集合的方法。切片是围绕着动态数组的概念构建的，它与动态数组相似，可以根据你的需要而伸缩。</p><ul><li>就增长而言，切片是<strong>动态</strong>的，因为它们有自己的内置函数 <strong>append</strong>，可以快速高效地增长切片。</li><li>你还可以通过切割底层内存来减少切片的大小。</li><li>在底层内存中切片是在连续的块上分配的，因此切片为你提供的便利之处包括：索引、迭代与垃圾回收优化。</li></ul><h4 id="切片的表示"><a href="#切片的表示" class="headerlink" title="切片的表示"></a>切片的表示</h4><ul><li>切片不存储任何数据，它仅描述底层数组的一部分。</li><li>切片使用一个包含三个字段的结构表示：指向底层数组的指针（pointer）、长度（length）与容量（capacity）。</li><li>这个数据结构类似于切片的描述符。</li></ul><p><img src="https://cdn-images-1.medium.com/max/2000/1*PW4Y8P0_gTspgYwcxfDrtQ.png" alt="图 1：切片的表示"></p><ul><li><strong>指针（Pointer）：</strong>指针用于指向数组的第一个元素，这个元素可以通过切片进行访问。在这里，指向的元素不必是数组的第一个元素。</li><li><strong>长度（Length）：</strong>长度代表数组中所有元素的总数。</li><li><strong>容量（Capacity）：</strong>容量表示切片可扩展的最大大小。 </li></ul><h4 id="使用长度声明一个切片"><a href="#使用长度声明一个切片" class="headerlink" title="使用长度声明一个切片"></a>使用长度声明一个切片</h4><p>在声明切片过程中，当你仅指定长度（Length）时，容量（Capacity）值与长度（Length）值相同。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*5ssbGNTliiFWF_rcxN6RRg.png" alt="图 2：使用长度声明一个切片。"></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用长度声明一个切片。创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 5。</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 打印结果 5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 打印结果 5</span></span><br></pre></td></tr></table></figure><h4 id="使用长度和容量声明一个切片"><a href="#使用长度和容量声明一个切片" class="headerlink" title="使用长度和容量声明一个切片"></a>使用长度和容量声明一个切片</h4><p>在声明切片过程中，当你分别指定长度（Length）和容量（Capacity）时，这将初始化一段无法访问的底层数组来创建一个具有可用容量的切片。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 使用长度和容量声明一个切片</span></span><br><span class="line"><span class="comment"> 创建一个整型切片。</span></span><br><span class="line"><span class="comment"> 长度为 3，容量为 5 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 打印结果 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 打印结果 5</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*6OLPqO2Z2x-QKPU_9EDA2A.png" alt="图 3：使用长度和容量声明一个切片。"></p><p>但请注意，尝试创建容量小于长度的切片是不允许的。</p><h4 id="使用切片字面量创建切片"><a href="#使用切片字面量创建切片" class="headerlink" title="使用切片字面量创建切片"></a>使用切片字面量创建切片</h4><p>创建<strong>切片</strong>的惯用方法是使用<strong>切片字面量</strong>。它与创建数组相似，只是它不需要在 [ ] 操作符中指定值。你初始化切片时所用元素的数量将决定切片的初始长度与容量。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建字符串类型切片。</span></span><br><span class="line"><span class="comment">// 长度与容量均为 5。</span></span><br><span class="line">slice := []<span class="keyword">string</span>&#123;<span class="string">"Red"</span>, <span class="string">"Blue"</span>, <span class="string">"Green"</span>, <span class="string">"Yellow"</span>, <span class="string">"Pink"</span>&#125; </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 打印结果 5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 打印结果 5</span></span><br><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度与容量均为 3。</span></span><br><span class="line">intSlice:= []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(intSlice)) <span class="comment">// 打印结果 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(intSlice)) <span class="comment">// 打印结果 3</span></span><br></pre></td></tr></table></figure><h4 id="声明一个带有索引位置的切片"><a href="#声明一个带有索引位置的切片" class="headerlink" title="声明一个带有索引位置的切片"></a>声明一个带有索引位置的切片</h4><p>当使用切片<strong>字面量</strong>时，你可以初始化切片的<strong>长度</strong>与<strong>容量</strong>。你所需要做的就是初始化表示所需长度和容量的<strong>索引</strong>。下面的语法将创建一个长度和容量均为 100 的切片。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建字符串类型切片。</span></span><br><span class="line"><span class="comment">// 用空字符串初始化第 100 个元素。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">99</span>: <span class="number">88</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) </span><br><span class="line"><span class="comment">// 打印结果 100</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) </span><br><span class="line"><span class="comment">// 打印结果 100</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*nG722TP5WDx3hZOHBpcFyQ.png" alt="图 4: 声明一个带有索引位置的切片。"></p><h4 id="声明数组与切片的区别"><a href="#声明数组与切片的区别" class="headerlink" title="声明数组与切片的区别"></a>声明数组与切片的区别</h4><ul><li>如果你使用 [ ] 操作符中指定一个值，那么你在创建一个数组。</li><li>如果你不在 [ ] 中指定值，则创建一个切片。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含 3 个整数的数组。</span></span><br><span class="line">array := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度和容量均为 3 的整型切片。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="声明一个-nil-切片"><a href="#声明一个-nil-切片" class="headerlink" title="声明一个 nil 切片"></a>声明一个 nil 切片</h4><ul><li>切片用 <code>nil</code> 代表零值。</li><li>一个 nil 切片的长度和容量等于 0，且没有底层数组。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型 nil 切片。</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int32</span></span><br><span class="line">fmt.Println(slice == <span class="literal">nil</span>) </span><br><span class="line"><span class="comment">// 此行将打印 true</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))   </span><br><span class="line"><span class="comment">// 此行将打印 0</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line"><span class="comment">// 此行将打印 0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*2KWa4gM4_M_47eBcKISK9w.png" alt="图 5：声明 nil 切片。"></p><h4 id="声明一个空切片"><a href="#声明一个空切片" class="headerlink" title="声明一个空切片"></a>声明一个空切片</h4><p>还可以通过初始化声明切片创建一个空切片。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 make 来创建一个整型空切片。</span></span><br><span class="line">sliceOne := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 使用切片字面量创建一个整型空切片。</span></span><br><span class="line">sliceTwo := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Println(sliceOne == <span class="literal">nil</span>) <span class="comment">// 这将打印 false</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(sliceOne))   <span class="comment">// 这将打印 0 </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(sliceOne))   <span class="comment">// 这将打印 0</span></span><br><span class="line">fmt.Println(sliceTwo == <span class="literal">nil</span>) <span class="comment">// 这将打印 false</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(sliceTwo))   <span class="comment">// 这将打印 0</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(sliceTwo))   <span class="comment">// 这将打印 0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*x3dfcqD71X5M0G2F4D7QoQ.png" alt="图 6：声明一个空切片。"></p><h4 id="为任何特定索引赋值"><a href="#为任何特定索引赋值" class="headerlink" title="为任何特定索引赋值"></a>为任何特定索引赋值</h4><p>要修改单个元素的值，请使用 [ ] 操作符。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 包含 4 个元素的长度和容量。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">fmt.Println(slice) <span class="comment">// 这将打印 [10 20 30 40]</span></span><br><span class="line">slice[<span class="number">1</span>] = <span class="number">25</span> <span class="comment">// 改变索引 1 的值。</span></span><br><span class="line">fmt.Println(slice) <span class="comment">// 这将打印 [10 25 30 40]</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*E-LTi2XYMjW0m5RGwzfktQ.png" alt="图 7：为任何特定索引赋值。"></p><h4 id="对切片进行切片"><a href="#对切片进行切片" class="headerlink" title="对切片进行切片"></a>对切片进行切片</h4><p>我们之所以称呼切片为切片，是因为你可以通过对底层数组的一部分进行切片来创建一个新的切片。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个整型切片。</span></span><br><span class="line"><span class="comment">长度和容量均为 5。*/</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">fmt.Println(slice)  <span class="comment">// 打印 [10 20 30 40 50]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 打印 5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 打印 5</span></span><br><span class="line"><span class="comment">/* 创建一个新切片。</span></span><br><span class="line"><span class="comment">长度为 2，容量为 4。*/</span></span><br><span class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice)  <span class="comment">// 打印 [10 20 30 40 50]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(newSlice))  <span class="comment">// 打印 2</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(newSlice))  <span class="comment">// 打印 4</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*7g5CJ002CXIEo9iQn-Dp6A.png" alt="图 8：对切片进行切片。"></p><p>在执行切片操作之后，我们拥有两个共享同一底层数组的切片。然而，这两个切片以不同的方式查看底层数组。原始切片认为底层数组的容量为 5，但 newSlice 与之不同，对 newSlice 而言，底层数组的容量为 4。newSlice 无法访问位于其指针之前的底层数组元素。就 newSlice 而言，这些元素甚至并不存在。使用下面的方式可以为任意切片后的 newSlice 计算长度和容量。</p><h4 id="切片的长度与容量如何计算？"><a href="#切片的长度与容量如何计算？" class="headerlink" title="切片的长度与容量如何计算？"></a>切片的长度与容量如何计算？</h4><blockquote><p>切片 <strong>slice[i:j]</strong> 的<strong>底层数组容量为 k</strong><br>长度（Length）：j - i<br>容量（Capacity）：k - i</p></blockquote><p><strong>计算新的长度和容量</strong></p><blockquote><p>切片 <strong>slice[1:3]</strong> 的<strong>底层数组容量为 5</strong><br>长度（Length）：3 - 1 = 2<br>容量（Capacity）：5 - 1 = 4</p></blockquote><h4 id="对一个切片进行更改的结果"><a href="#对一个切片进行更改的结果" class="headerlink" title="对一个切片进行更改的结果"></a>对一个切片进行更改的结果</h4><p>一个切片对底层数组的共享部分所做的更改可以被另一个切片看到。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 5。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个新的切片。</span></span><br><span class="line"><span class="comment">// 长度为 2，容量为 4。</span></span><br><span class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 变更新切片索引 1 位置的元素。</span></span><br><span class="line"><span class="comment">// 改变了原切片索引 2 位置的元素。</span></span><br><span class="line">newSlice[<span class="number">1</span>] = <span class="number">35</span></span><br></pre></td></tr></table></figure><p>将数值 35 分配给 newSlice 的第二个元素后，该更改也可以在原始切片的元素中被看到。</p><h4 id="运行时错误显示索引超出范围"><a href="#运行时错误显示索引超出范围" class="headerlink" title="运行时错误显示索引超出范围"></a>运行时错误显示索引超出范围</h4><p>一个切片只能访问它长度以内的索引位。尝试访问超出长度的索引位元素将引发一个运行时错误。与切片容量相关联的元素只能用于切片增长。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 5。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个新的切片。</span></span><br><span class="line"><span class="comment">// 长度为 2，容量为 4。</span></span><br><span class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 变更 newSlice 索引 3 位置的元素。</span></span><br><span class="line"><span class="comment">// 对于 newSlice 而言，该元素不存在。</span></span><br><span class="line">newSlice[<span class="number">3</span>] = <span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runtime Exception:</span></span><br><span class="line"><span class="comment">panic: runtime error: index out of range</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="切片增长"><a href="#切片增长" class="headerlink" title="切片增长"></a>切片增长</h4><p>与使用数组相比，使用切片的优势之一是：你可以根据需要增加切片的容量。当你使用内置函数 「append」 时，Golang 会负责处理所有操作细节。</p><ul><li>使用 append 前，你需要一个源<strong>切片</strong>和一个要追加的值。</li><li>当你的 append 调用并返回时，它将为你提供一个更改后的新切片。 </li><li><strong>append</strong> 函数总会增加新切片的长度。</li><li>另一方面，容量可能会受到影响，也可能不会受到影响，这取决于源切片的可用容量。</li></ul><h4 id="使用-append-向切片追加元素"><a href="#使用-append-向切片追加元素" class="headerlink" title="使用 append 向切片追加元素"></a>使用 append 向切片追加元素</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个整型切片。</span></span><br><span class="line"><span class="comment"> 长度和容量均为 5。 */</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建一个新切片。</span></span><br><span class="line"><span class="comment"> 长度为 2，容量为 4。*/</span></span><br><span class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(newSlice)) <span class="comment">// 打印 2</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(newSlice)) <span class="comment">// 打印 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向容量空间分配新元素。</span></span><br><span class="line"><span class="comment"> 将值 60 分配给新元素。 */</span></span><br><span class="line">newSlice = <span class="built_in">append</span>(newSlice, <span class="number">60</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(newSlice)) <span class="comment">// 打印 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(newSlice)) <span class="comment">// 打印 4</span></span><br></pre></td></tr></table></figure><p>当切片的底层数组没有可用容量时，append 函数将创建一个新的底层数组，拷贝正在引用的现有值，然后再分配新值。</p><h4 id="使用-append-增加切片的长度和容量"><a href="#使用-append-增加切片的长度和容量" class="headerlink" title="使用 append 增加切片的长度和容量"></a>使用 append 增加切片的长度和容量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 4。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 打印 4</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 打印 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片追加新元素。</span></span><br><span class="line"><span class="comment">// 将值 50 分配给新元素。</span></span><br><span class="line">newSlice= <span class="built_in">append</span>(slice, <span class="number">50</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(newSlice)) <span class="comment">// 打印 5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(newSlice)) <span class="comment">// 打印 8</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*GeiklLBspOlv_qxzw5GCVA.png" alt="图 9：增加切片的长度和容量"></p><p>在 append 操作后，newSlice 被给予一个自有的底层数组，该底层数组的容量是原底层数组容量的两倍。在增加底层数组容量时，append 操作十分聪明。举个例子，当切片的容量低于 1,000 个元素时，容量增长总是翻倍的。一旦元素的数量超过 1,000 个，容量就会增长 1.25 倍，即 25%。随着时间的推移，这种增长算法可能会在 Golang 中发生变化。</p><p>更改新切片不会对旧切片产生任何影响，因为新切片现在有一个不同的底层数组，它的指针指向一个新分配的数组。</p><h4 id="将一个切片追加到另一个切片中"><a href="#将一个切片追加到另一个切片中" class="headerlink" title="将一个切片追加到另一个切片中"></a>将一个切片追加到另一个切片中</h4><p>内置函数 <strong>append</strong> 还是一个 <strong>可变参数</strong> 函数。这意味着你可以传递多个值来追加到单个切片中。如果你使用 … 运算符，可以将一个切片的所有元素追加到另一个切片中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建两个切片，使用两个整型元素初始化每个切片。</span></span><br><span class="line">slice1:= []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">slice2 := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">// 合并两个切片并打印结果。</span></span><br><span class="line">fmt.Println(<span class="built_in">append</span>(slice1, slice2...))</span><br><span class="line"><span class="comment">// 输出：[1 2 3 4]</span></span><br></pre></td></tr></table></figure><h4 id="对切片执行索引"><a href="#对切片执行索引" class="headerlink" title="对切片执行索引"></a>对切片执行索引</h4><ul><li>通过指定一个下限和一个上限来形成切片，例如：<code>a[low:high]</code>。这将选择一个半开范围，其中包含切片的第一个元素，但不包含切片的最后一个元素。</li><li>你可以省略上限或下限，这将使用它们的默认值。下限的默认值是 0，上限的默认值是切片的长度。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; </span><br><span class="line"><span class="comment">// 一个数组</span></span><br><span class="line">s := a[<span class="number">1</span>:<span class="number">3</span>]               </span><br><span class="line"><span class="comment">// s == []int&#123;1, 2&#125;        </span></span><br><span class="line"><span class="comment">// cap(s) == 3</span></span><br><span class="line">s = a[:<span class="number">2</span>]                 </span><br><span class="line"><span class="comment">// s == []int&#123;0, 1&#125;        </span></span><br><span class="line"><span class="comment">// cap(s) == 4</span></span><br><span class="line">s = a[<span class="number">2</span>:]                 </span><br><span class="line"><span class="comment">// s == []int&#123;2, 3&#125;        </span></span><br><span class="line"><span class="comment">// cap(s) == 2</span></span><br><span class="line">s = a[:]                  </span><br><span class="line"><span class="comment">// s == []int&#123;0, 1, 2, 3&#125;  </span></span><br><span class="line"><span class="comment">// cap(s) == 4</span></span><br></pre></td></tr></table></figure><h4 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h4><p>Go 有一个特殊的关键字 <strong>range</strong>，你可以使用该关键字对切片进行遍历。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 4。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line"><span class="comment">// 遍历每个元素并打印值。</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"Index: %d Value: %d\n"</span>, index, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Index: 0 Value: 10</span></span><br><span class="line"><span class="comment">Index: 1 Value: 20</span></span><br><span class="line"><span class="comment">Index: 2 Value: 30</span></span><br><span class="line"><span class="comment">Index: 3 Value: 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>在遍历切片时，关键字 range 将返回两个值。</li><li>第一个值是索引下标，第二个值是索引位中值的副本。</li><li>一定要知道 range 是在复制值，而不是返回值的引用。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 创建一个整型切片。</span></span><br><span class="line"><span class="comment"> 长度与容量均为 4。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 遍历每个元素并打印</span></span><br><span class="line"><span class="comment"> 元素的值和地址。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"Value: %d Value-Addr: %X ElemAddr: %X\n"</span>,</span><br><span class="line">   value, &amp;value, &amp;slice[index])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">Value: 10 Value-Addr: 10500168 ElemAddr: 1052E100</span></span><br><span class="line"><span class="comment">Value: 20 Value-Addr: 10500168 ElemAddr: 1052E104</span></span><br><span class="line"><span class="comment">Value: 30 Value-Addr: 10500168 ElemAddr: 1052E108</span></span><br><span class="line"><span class="comment">Value: 40 Value-Addr: 10500168 ElemAddr: 1052E10C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>range</strong> 关键字提供元素的拷贝。</p><p>如果你不需要下标值，你可以使用下划线字符丢弃该值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a slice of integers.</span></span><br><span class="line"><span class="comment">// Contains a length and capacity of 4 elements.</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line"><span class="comment">// Iterate over each element and display each value.</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"Value: %d\n"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">Value: 10</span></span><br><span class="line"><span class="comment">Value: 20</span></span><br><span class="line"><span class="comment">Value: 30</span></span><br><span class="line"><span class="comment">Value: 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关键字 <strong>range</strong> 总是从开始处遍历一个切片。如果你需要对切片的迭代进行更多的控制，你可以使用传统的 <strong>for</strong> 循环。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型切片。</span></span><br><span class="line"><span class="comment">// 长度和容量均为 4。</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line"><span class="comment">// 从元素 30 开始遍历每个元素。</span></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">2</span>; index &lt; <span class="built_in">len</span>(slice); index++ &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"Index: %d Value: %d\n"</span>, index, slice[index])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Index: 2 Value: 30</span></span><br><span class="line"><span class="comment">Index: 3 Value: 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在本文中，我们深入探讨了切片的概念。我们了解到，切片并不存储任何数据，而是描述了底层数组的一部分。我们还看到，切片可以在底层数组的范围内增长和收缩，并配合索引可作为数组使用；切片的零值是 nil；函数 <strong>len</strong>、<strong>cap</strong> 和 <strong>append</strong> 都将 <strong>nil</strong> 看作一个长度和容量都为 0 的<strong>空切片</strong>；你可以通过<strong>切片字面量</strong>或调用 <strong>make</strong> 函数（将长度和容量作为参数）来创建切片。希望这些对你有所帮助！</p><p><strong>免责声明</strong></p><p>我参考了各种博客、书籍和媒体故事来撰写这篇文章。如有任何疑问，请在评论中与我联系。</p><p><strong>到此为止……开心编码……快乐学习😃</strong></p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      这一数据结构为你提供了处理与管理数据集合的方法
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计模式" scheme="http://jalan.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 覆盖索引与延迟关联</title>
    <link href="http://jalan.space/2020/09/01/2020/mysql-using-index/"/>
    <id>http://jalan.space/2020/09/01/2020/mysql-using-index/</id>
    <published>2020-09-01T12:35:00.000Z</published>
    <updated>2020-09-12T14:35:54.292Z</updated>
    
    <content type="html"><![CDATA[<p>在了解覆盖索引与延迟关联前，我们先简单建立一个订单表 Orders 用于举例说明。表中共包含 3 个字段：</p><ul><li><code>id</code>：订单 ID，<code>int</code> 类型，主键自增长</li><li><code>product_id</code>：商品 ID，在此列上建立索引</li><li><code>name</code>：订单名称</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orders`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单 ID'</span>,</span><br><span class="line">  <span class="string">`product_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品 ID'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单名称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`product_idx`</span> (<span class="string">`product_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br></pre></td></tr></table></figure><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><h3 id="什么是覆盖索引？"><a href="#什么是覆盖索引？" class="headerlink" title="什么是覆盖索引？"></a>什么是覆盖索引？</h3><p>我们知道，如果 MySQL <strong>根据索引</strong>查找到数据，但索引的叶子结点中并<strong>不包含</strong>我们所需要的数据字段，那么仍然需要进行回表查询。</p><p>如果一个索引包含（覆盖）我们所需要查询的所有字段值，我们就称之为「<strong>覆盖索引</strong>」。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>当使用  MyISAM 存储引擎时，由于我们在 <code>product_id</code> 建立了索引，所以 <code>SELECT product_id FROM orders</code> 将使用覆盖索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT product_id FROM orders;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | orders | NULL       | index | NULL          | product_idx | 5       | NULL |    2 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果我们在查询字段中加入 <code>id</code> 列，即执行 <code>SELECT id, product_id FROM orders WHERE product_id = 1</code>，查询轨迹如下：</p><ol><li>在 <code>product_id</code> 索引树中找到 <code>product_id = 1</code> 子结点</li><li>通过该子结点指针读取磁盘上的数据行</li><li>取出数据行中的 <code>id</code> 字段</li></ol><p>由于 MyISAM 的叶子结点存储着指向数据行的指针，该查询多了一步回表操作，无法使用覆盖索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT id, product_id FROM orders WHERE product_id = 1;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | orders | NULL       | ref  | product_idx   | product_idx | 5       | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bd49ad003d84c65b67395f7bbd1c592~tplv-k3u1fbpfcp-zoom-1.image" alt="MyISAM 索引结构"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 与 MyISAM 的不同之处在于，InnoDB 的主键使用聚簇索引，而其<strong>二级索引的叶子结点保存着行的主键值</strong>。也就是说，二级索引不仅能覆盖其本身，也能覆盖到该行的主键值。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1e97a9099e1465ab51eed47171fb15d~tplv-k3u1fbpfcp-zoom-1.image" alt="InnoDB 二级索引的叶子结点包含行主键值"></p><p>由于 InnoDB 不同的数据存储方式，若使用 InnoDB 作为存储引擎，我们执行 <code>SELECT id, product_id FROM orders WHERE product_id = 1</code> 将得到如下结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT id, product_id FROM orders WHERE product_id = 1;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | orders | NULL       | ref  | product_idx   | product_idx | 5       | const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+-------------+---------+-------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到 <code>Extra</code> 显示 <code>Using index</code>，表示该查询使用了覆盖索引。该查询语句的查询轨迹如下：</p><ol><li>在二级索引 <code>product_id</code> 的索引树中找到 <code>product_id = 1</code> 的叶子结点</li><li>取出该叶子结点的行主键值 <code>id</code> 一并返回</li></ol><p>查询轨迹并未进行回表取值。</p><h3 id="覆盖索引的好处"><a href="#覆盖索引的好处" class="headerlink" title="覆盖索引的好处"></a>覆盖索引的好处</h3><h2 id="延迟关联"><a href="#延迟关联" class="headerlink" title="延迟关联"></a>延迟关联</h2><p>延迟关联（deferred join）指「延迟了对列的访问」，不直接获取所有需要的列。</p><p>在查询的第一阶段 MySQL 使用覆盖索引，再通过该覆盖索引查询到的结果到外层查询匹配锁需要的所有列值。</p><p>这样说有些抽象，我们来看看下面的例子。</p><h3 id="用延迟关联优化分页（LIMIT）"><a href="#用延迟关联优化分页（LIMIT）" class="headerlink" title="用延迟关联优化分页（LIMIT）"></a>用延迟关联优化分页（LIMIT）</h3><p>当使用 <code>LIMIT</code> 碰上较大偏移量时，例如 <code>LIMIT 10000, 20</code> 这样的查询，MySQL 需要查询 <code>10020</code> 条记录然后再返回最后的 20 条。前面的 10000 最终都会被抛弃，这样的代价非常高。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM orders LIMIT 10000, 20;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | orders | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br></pre></td></tr></table></figure><p>优化此类分页查询的一个最简单的办法就是<strong>尽可能使用索引覆盖扫描，而不是查询所有列</strong>。然后根据需要再做一次关联，返回所需要的列。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM orders AS o1 JOIN (SELECT id FROM orders LIMIT 10000, 20) AS o2 ON o1.id = o2.id;</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table      | partitions | type  | possible_keys | key         | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | o1         | NULL       | ALL   | PRIMARY       | NULL        | NULL    | NULL       |    2 |   100.00 | NULL        |</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | NULL       | ref   | &lt;auto_key0&gt;   | &lt;auto_key0&gt; | 4       | test.o1.id |    2 |   100.00 | Using index |</span><br><span class="line">|  2 | DERIVED     | orders     | NULL       | index | NULL          | PRIMARY     | 4       | NULL       |    2 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+------------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>这样一来，MySQL 在 SQL 语句的「内层」进行扫描时使用了覆盖索引，「外层」再通过索引树找到相关的数据行，直接减少了扫描的数据量。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener">《高性能 MySQL》</a></li></ul>]]></content>
    
    <summary type="html">
    
      如何使用覆盖索引优化查询
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="MySQL" scheme="http://jalan.space/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis 中的 variable-precision SWAR 算法</title>
    <link href="http://jalan.space/2020/05/05/2020/variable-percision-swar/"/>
    <id>http://jalan.space/2020/05/05/2020/variable-percision-swar/</id>
    <published>2020-05-05T15:06:00.000Z</published>
    <updated>2020-05-06T13:42:17.811Z</updated>
    
    <content type="html"><![CDATA[<p>今天在看《Redis 设计与实现》中「二进制位数组」一章，书中讲述 <code>BITCOUNT</code> 命令时提及了「计算汉明重量（<em>Hamming Weight</em>）」，「汉明重量」是一串符号中<strong>非零符号</strong>的个数。</p><p>二进制位统计的常见算法有遍历算法、查表算法，在 <a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode 191. 位1的个数</a> 一题中我也写过 <a href="https://leetcode-cn.com/problems/number-of-1-bits/solution/python-de-si-chong-xie-fa-by-jalan/" target="_blank" rel="noopener">相关题解</a>。Redis 在实现 <code>BITCOUNT</code> 命令时则使用了查表和 variable-precision SWAR 两种算法，本文将主要介绍 variable-precision SWAR 算法的实现原理。</p><h2 id="算法实现原理"><a href="#算法实现原理" class="headerlink" title="算法实现原理"></a>算法实现原理</h2><p>以计算 32 位二进制的汉明重量为例。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算 32 位二进制的汉明重量</span></span><br><span class="line"><span class="keyword">uint32_t</span> swar(<span class="keyword">uint32_t</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 步骤1</span></span><br><span class="line">i = (i &amp; <span class="number">0x55555555</span>) + ((i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2</span></span><br><span class="line">i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3</span></span><br><span class="line">i = (i &amp; <span class="number">0x0F0F0F0F</span>) + ((i &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤4</span></span><br><span class="line">i = (i * (<span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面拆分步骤进行分析。</p><h3 id="步骤一：-i-amp-0x55555555-i-gt-gt-1-amp-0x55555555"><a href="#步骤一：-i-amp-0x55555555-i-gt-gt-1-amp-0x55555555" class="headerlink" title="步骤一：(i &amp; 0x55555555) + ((i &gt;&gt; 1) &amp; 0x55555555)"></a>步骤一：(i &amp; 0x55555555) + ((i &gt;&gt; 1) &amp; 0x55555555)</h3><p><code>0x55555555</code> 的二进制表示为 <code>01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01</code>。</p><h4 id="i-amp-0x55555555"><a href="#i-amp-0x55555555" class="headerlink" title="i &amp; 0x55555555"></a>i &amp; 0x55555555</h4><p><code>i</code> 和 <code>0x55555555</code> 相与的结果偶数位全部置 0，奇数位与 <code>i</code> 保持一致。</p><h4 id="i-gt-gt-1"><a href="#i-gt-gt-1" class="headerlink" title="i &gt;&gt; 1"></a>i &gt;&gt; 1</h4><p>将 <code>i</code> 右移 1 位，丢弃最右边的奇数位，因此 <code>i</code> 中原奇数位变为偶数位，原偶数位变为奇数位。</p><h4 id="i-gt-gt-1-amp-0x55555555"><a href="#i-gt-gt-1-amp-0x55555555" class="headerlink" title="(i &gt;&gt; 1) &amp; 0x55555555"></a>(i &gt;&gt; 1) &amp; 0x55555555</h4><p>令 <code>i &gt;&gt; 1</code> 的结果为 <code>x</code>，则 <code>x &amp; 0x55555555</code> 的结果偶数位全部置 0，奇数位与 <code>x</code> 中奇数位保持一致。而 <code>x</code> 中的奇数位是 <code>i</code> 中的偶数位。</p><h4 id="i-amp-0x55555555-i-gt-gt-1-amp-0x55555555"><a href="#i-amp-0x55555555-i-gt-gt-1-amp-0x55555555" class="headerlink" title="(i &amp; 0x55555555) + ((i &gt;&gt; 1) &amp; 0x55555555)"></a>(i &amp; 0x55555555) + ((i &gt;&gt; 1) &amp; 0x55555555)</h4><p><code>(i &amp; 0x55555555) + ((i &gt;&gt; 1) &amp; 0x55555555)</code> 中，按每个二进制位为一组进行分组，各组的十进制表示就是该组的汉明重量。</p><hr><h3 id="步骤二：-i-amp-0x33333333-i-gt-gt-2-amp-0x33333333"><a href="#步骤二：-i-amp-0x33333333-i-gt-gt-2-amp-0x33333333" class="headerlink" title="步骤二：(i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333)"></a>步骤二：(i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333)</h3><p><code>0x33333333</code> 的二进制表示为 <code>0011 0011 0011 0011 0011 0011 0011 0011</code></p><h4 id="i-amp-0x33333333"><a href="#i-amp-0x33333333" class="headerlink" title="i &amp; 0x33333333"></a>i &amp; 0x33333333</h4><p><code>i</code> 中每 4 个二进制数为一组，每组中 2 个低位数字保持不变，高位数字置 0。</p><h4 id="i-gt-gt-2"><a href="#i-gt-gt-2" class="headerlink" title="i &gt;&gt; 2"></a>i &gt;&gt; 2</h4><p><code>i</code> 右移动 2 位，丢弃 2 个低位，因此原先一组中的 2 个高位变成低位，2 个低位被右移到右侧分组的高位中。</p><h4 id="i-gt-gt-2-amp-0x33333333"><a href="#i-gt-gt-2-amp-0x33333333" class="headerlink" title="(i &gt;&gt; 2) &amp; 0x33333333"></a>(i &gt;&gt; 2) &amp; 0x33333333</h4><p>令 <code>i &gt;&gt; 2</code> 结果为 <code>x</code>，<code>x</code> 依旧被分为 4 个一组，每组中 2 个高位置 0，2 个低位保持不变。</p><h4 id="i-amp-0x33333333-i-gt-gt-2-amp-0x33333333"><a href="#i-amp-0x33333333-i-gt-gt-2-amp-0x33333333" class="headerlink" title="(i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333)"></a>(i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333)</h4><p><code>(i &amp; 0x33333333) + ((i &gt;&gt; 2) &amp; 0x33333333)</code> 中每 4 个二进制数被分为一组，各组的十进制表示就是该组的汉明重量。</p><hr><h3 id="步骤三：-i-amp-0x0F0F0F0F-i-gt-gt-4-amp-0x0F0F0F0F"><a href="#步骤三：-i-amp-0x0F0F0F0F-i-gt-gt-4-amp-0x0F0F0F0F" class="headerlink" title="步骤三：(i &amp; 0x0F0F0F0F) + ((i &gt;&gt; 4) &amp; 0x0F0F0F0F);"></a>步骤三：(i &amp; 0x0F0F0F0F) + ((i &gt;&gt; 4) &amp; 0x0F0F0F0F);</h3><p><code>0x0F0F0F0F</code> 的二进制表示为 <code>00001111 00001111 00001111 00001111</code>。同上述步骤可知，步骤三 <code>(i &amp; 0x0F0F0F0F) + ((i &gt;&gt; 4) &amp; 0x0F0F0F0F)</code> 将步骤二的结果按每八个二进制位为一组进行分组，各组的十进制表示就是该组的明汉重量。</p><hr><h3 id="步骤四：-i-0x01010101-gt-gt-24"><a href="#步骤四：-i-0x01010101-gt-gt-24" class="headerlink" title="步骤四：(i * (0x01010101) &gt;&gt; 24)"></a>步骤四：(i * (0x01010101) &gt;&gt; 24)</h3><p><code>0x01010101</code> 的二进制表示为 <code>00000001 00000001 00000001 00000001</code>。</p><h4 id="i-0x01010101"><a href="#i-0x01010101" class="headerlink" title="i * (0x01010101)"></a>i * (0x01010101)</h4><p><code>i</code> 已经被分为八个二进制位为一组的分组，假设分组分别为 A、B、C、D（长度为 32 位，所以有 4 个分组），现在我们要求总结果，就要把这 4 个分组的值（即汉明重量）进行相加。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 分组 A</span><br><span class="line">i + </span><br><span class="line">// 分组 B 左移 8 位</span><br><span class="line">(i &lt;&lt; 8) + </span><br><span class="line">// 分组 C 左移 16 位</span><br><span class="line">(i &lt;&lt; 16) + </span><br><span class="line">// 分组 D 左移 24 位</span><br><span class="line">(i &lt;&lt; 24)</span><br><span class="line">= i * (1 + 1 &lt;&lt; 8 + 1 &lt;&lt; 16 + 1 &lt;&lt; 24) </span><br><span class="line">= i * 0x01010101</span><br></pre></td></tr></table></figure><p>因此，<code>i * (0x01010101)</code> 表示：将 <code>i</code> 的汉明重量聚集在二进制的最高八位。</p><h4 id="i-0x01010101-gt-gt-24"><a href="#i-0x01010101-gt-gt-24" class="headerlink" title="i * (0x01010101) &gt;&gt; 24"></a>i * (0x01010101) &gt;&gt; 24</h4><p>将最高八位右移成为最低八位，从而求出最终结果。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F" target="_blank" rel="noopener">汉明重量</a></li><li><a href="https://ivanzz1001.github.io/records/post/data-structure/2018/09/04/ds-variable-precision-SWAR" target="_blank" rel="noopener">variable precision SWAR算法</a></li></ul>]]></content>
    
    <summary type="html">
    
      如何计算汉明重量？
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Redis" scheme="http://jalan.space/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》学习笔记 | 观察者模式</title>
    <link href="http://jalan.space/2020/03/30/2020/design-pattern-observer/"/>
    <id>http://jalan.space/2020/03/30/2020/design-pattern-observer/</id>
    <published>2020-03-30T14:40:00.000Z</published>
    <updated>2020-03-30T14:40:20.435Z</updated>
    
    <content type="html"><![CDATA[<p>往期回顾：</p><ul><li><a href="/2020/03/09/2020/design-pattern-strategy-pattern/">《Head First 设计模式》学习笔记 | 策略模式</a></li></ul><h2 id="设计气象观测站"><a href="#设计气象观测站" class="headerlink" title="设计气象观测站"></a>设计气象观测站</h2><p>以书中的气象监测应用为例：现在有一个气象中心可以监测温度、湿度、气压三种数据，我们需要通过 <code>WeatherData</code> 对象来获取这些数据，然后将这些数据显示在特定的装置上。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/29/1712533a92d605d0?w=978&amp;h=291&amp;f=png&amp;s=39407" alt=""></p><p><code>WeatherData</code> 拥有以下方法：</p><ul><li><code>getTemperature()</code>：获取温度数据</li><li><code>getHumidity()</code>： 获取湿度数据</li><li><code>getPressure()</code>：获取气压数据</li><li><code>measurementsChanged()</code>：一旦气象站更新数据，这个方法会被调用</li></ul><p>这样一看似乎十分简单：我们只要在 <code>measurementsChanged()</code> 中通过一系列 <code>getter</code> 获取到气象台提供的温度、湿度与气压数据，然后再调用显示装置的更新数据方法即可。</p><p>但是，如果我们后续需要增加或减少显示装置应该怎么办呢？每次都要修改 <code>measurementsChanged()</code> 显然不是个好办法。</p><h2 id="出版者与订阅者"><a href="#出版者与订阅者" class="headerlink" title="出版者与订阅者"></a>出版者与订阅者</h2><p>想想在现实生活中我们是怎么享受报纸订阅服务的？</p><ul><li>报社负责出版报纸，可以接受人们的订阅或取消订阅</li><li>如果我们向报社订阅了报纸，一旦有新报纸出版，报社就会送来新的报纸</li><li>如果我们不想看报纸了，就取消订阅，报社就不会再送新报纸上门</li></ul><p>气象站与显示装置之间其实也是这样的关系，气象站为「出版者」，显示装置为「订阅者」：<strong>需要获得气象站数据的显示装置可以向气象站申请「订阅」，这样一旦有气象数据更新，气象站就会通知申请订阅的显示装置；如果显示装置不再需要该气象站提供数据，则可以「取消订阅」，不再接受气象站的通知</strong>。</p><p>上述「出版者」称为「主题」（<em>Subject</em>），「订阅者」称为「观察者」（<em>Observer</em>），两者构成了观察者模式的主要部分。</p><h2 id="定义观察者模式"><a href="#定义观察者模式" class="headerlink" title="定义观察者模式"></a>定义观察者模式</h2><p>观察者模式定义如下：</p><blockquote><p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并且自动更新。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/3/29/171257b0e5ae2438?w=673&amp;h=364&amp;f=png&amp;s=63287" alt="观察者模式类图"></p><p>类图中包含两个接口定义：</p><ul><li>主题接口 <code>Subject</code>：<ul><li><code>registerObserver()</code>：添加订阅者</li><li><code>removeObserver()</code>：移除订阅者</li><li><code>notifyObserver()</code>：通知订阅者</li></ul></li><li>观察者接口 <code>Observer</code>：<ul><li><code>update()</code>：在主题 <code>notifyObserver()</code> 中被调用，用于更新观察者的数据</li></ul></li></ul><h2 id="实现气象站"><a href="#实现气象站" class="headerlink" title="实现气象站"></a>实现气象站</h2><h3 id="设计类图"><a href="#设计类图" class="headerlink" title="设计类图"></a>设计类图</h3><p>根据上述观察者模式定义，我们先为气象站设计「主题」与「观察者」两个接口，除此之外也可以添加一个显示装置接口，专门负责显示装置的具体显示格式。</p><p>接口定义好后，就可以让具体的类来实现这些接口了：</p><ul><li><code>WeatherData</code> 作为具体主题，实现 <code>Subject</code> 主题接口</li><li>各个显示装置作为具体观察者，实现 <code>Observer</code> 观察者接口</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/3/29/1712587d2e56115e?w=911&amp;h=434&amp;f=png&amp;s=110929" alt="气象站类图"></p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerObserver</span><span class="params">($observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeObserver</span><span class="params">($observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($temp, $humidity, $pressure)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示装置显示接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WeatherData 实现主题接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 观察者数组</span></span><br><span class="line">    <span class="keyword">private</span> $observers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 温度</span></span><br><span class="line">    <span class="keyword">private</span> $temperature;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 湿度</span></span><br><span class="line">    <span class="keyword">private</span> $humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 气压</span></span><br><span class="line">    <span class="keyword">private</span> $pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入新的观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerObserver</span><span class="params">($observer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers[] = $observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeObserver</span><span class="params">($observer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $index = array_search($observer, <span class="keyword">$this</span>-&gt;observers);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;observers[$index]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历数组通知观察者</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) &#123;</span><br><span class="line">            $observer-&gt;update(<span class="keyword">$this</span>-&gt;temperature, <span class="keyword">$this</span>-&gt;humidity, <span class="keyword">$this</span>-&gt;pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">measurementsChanged</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 通知订阅者</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 气象站有新数据将调用该函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMeasurements</span><span class="params">($temperature, $humidity, $pressure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;temperature = $temperature;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;humidity    = $humidity;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pressure    = $pressure;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建显示装置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示装置 1: 只显示温度和湿度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 温度</span></span><br><span class="line">    <span class="keyword">private</span> $temperature;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 湿度</span></span><br><span class="line">    <span class="keyword">private</span> $humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**<span class="doctag">@var</span> WeatherData $weatherData */</span></span><br><span class="line">    <span class="keyword">private</span> $weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($weatherData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 WeatherData 实例</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;weatherData = $weatherData;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weatherData-&gt;registerObserver(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($temperature, $humidity, $pressure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;temperature = $temperature;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;humidity    = $humidity;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当前温度：&#123;$this-&gt;temperature&#125;，当前湿度：&#123;$this-&gt;humidity&#125;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示装置 2：只显示气压</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 气压</span></span><br><span class="line">    <span class="keyword">private</span> $pressure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**<span class="doctag">@var</span> WeatherData $weatherData */</span></span><br><span class="line">    <span class="keyword">private</span> $weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($weatherData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 WeatherData 实例</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;weatherData = $weatherData;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weatherData-&gt;registerObserver(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($temperature, $humidity, $pressure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pressure = $pressure;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当前气压：&#123;$this-&gt;pressure&#125;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示装置 3（略）</span></span><br><span class="line"><span class="comment"> * class ThirdDisplay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试调用</span></span><br><span class="line"><span class="comment">// 创建一个 WeatherData 对象</span></span><br><span class="line">$weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"><span class="comment">// 创建显示装置 1，传入 WeatherData 对象</span></span><br><span class="line">$firstDisplay = <span class="keyword">new</span> FirstDisplay($weatherData);</span><br><span class="line"><span class="comment">// 传入模拟气象数据</span></span><br><span class="line">$weatherData-&gt;setMeasurements(<span class="number">80</span>, <span class="number">70</span>, <span class="number">30.4</span>);</span><br><span class="line">$weatherData-&gt;setMeasurements(<span class="number">70</span>, <span class="number">60</span>, <span class="number">29.2</span>);</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">$weatherData-&gt;removeObserver($firstDisplay);</span><br><span class="line"><span class="comment">// 创建显示装置 2，传入 WeatherData 对象</span></span><br><span class="line">$secondDisplay = <span class="keyword">new</span> SecondDisplay($weatherData);</span><br><span class="line">$weatherData-&gt;setMeasurements(<span class="number">90</span>, <span class="number">60</span>, <span class="number">29.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">当前温度：80，当前湿度：70</span></span><br><span class="line"><span class="comment">当前温度：70，当前湿度：60</span></span><br><span class="line"><span class="comment">当前气压：29.2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        主题（出版者）</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._observers = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        添加观察者</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> observer <span class="keyword">not</span> <span class="keyword">in</span> self._observers:</span><br><span class="line">            self._observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        移除观察者</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._observers.remove(observer)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        发送通知给所有观察者</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> self._observers:</span><br><span class="line">            observer.update()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span><span class="params">(Subject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Subject.__init__(self)</span><br><span class="line">        self._temperature = <span class="number">0</span> <span class="comment"># 温度</span></span><br><span class="line">        self._humidity = <span class="number">0</span> <span class="comment"># 湿度</span></span><br><span class="line">        self._pressure = <span class="number">0</span> <span class="comment"># 气压</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_measurements</span><span class="params">(self, temperature, humidity, pressure)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        气象数据发生变动时调用该函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._temperature = temperature</span><br><span class="line">        self._humidity = humidity</span><br><span class="line">        self._pressure = pressure</span><br><span class="line">        self.notify()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">temperature</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._temperature</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">humidity</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._humidity</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pressure</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._pressure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstDisplay</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, weatherData)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        显示装置 1：显示温度和湿度</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._weather_data = weatherData</span><br><span class="line">        self._weather_data.register(self)</span><br><span class="line">        self._temperature = <span class="number">0</span></span><br><span class="line">        self._humidity = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        更新数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._temperature = self._weather_data.temperature</span><br><span class="line">        self._humidity = self._weather_data.humidity</span><br><span class="line">        self.display()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        显示数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"当前温度：%s，当前湿度：%s"</span> % (self._temperature, self._humidity))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondDisplay</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, weatherData)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        显示装置 2：显示气压</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._weather_data = weatherData</span><br><span class="line">        self._weather_data.register(self)</span><br><span class="line">        self._pressure = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        更新数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._pressure = self._weather_data.pressure</span><br><span class="line">        self.display()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"当前气压：%s"</span> % self._pressure)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个 WeatherData 对象</span></span><br><span class="line">    weather_data = WeatherData()</span><br><span class="line">    <span class="comment"># 创建显示装置 1</span></span><br><span class="line">    first_display = FirstDisplay(weather_data)</span><br><span class="line">    <span class="comment"># 传入模拟数据</span></span><br><span class="line">    weather_data.set_measurements(<span class="number">21</span>, <span class="number">50</span>, <span class="number">3</span>)</span><br><span class="line">    weather_data.set_measurements(<span class="number">3</span>, <span class="number">70</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 移除</span></span><br><span class="line">    weather_data.remove(first_display)</span><br><span class="line">    <span class="comment"># 添加装置 2</span></span><br><span class="line">    second_display = SecondDisplay(weather_data)</span><br><span class="line">    weather_data.set_measurements(<span class="number">21</span>, <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">当前温度：21，当前湿度：50</span></span><br><span class="line"><span class="string">当前温度：3，当前湿度：70</span></span><br><span class="line"><span class="string">当前气压：30</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject 主题</span></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">interface</span> &#123;</span><br><span class="line">Register(observer Observer)</span><br><span class="line">Remove(obeserver Observer)</span><br><span class="line">Notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WeatherData 具体主题</span></span><br><span class="line"><span class="keyword">type</span> WeatherData <span class="keyword">struct</span> &#123;</span><br><span class="line">observers   []Observer</span><br><span class="line">temperature <span class="keyword">int</span></span><br><span class="line">humidity    <span class="keyword">int</span></span><br><span class="line">pressure    <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *WeatherData)</span> <span class="title">Register</span><span class="params">(observer Observer)</span></span> &#123;</span><br><span class="line">w.observers = <span class="built_in">append</span>(w.observers, observer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *WeatherData)</span> <span class="title">Remove</span><span class="params">(observer Observer)</span></span> &#123;</span><br><span class="line"><span class="comment">// 双指针法：找到需要取消订阅的对象并覆盖</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, ob := <span class="keyword">range</span> w.observers &#123;</span><br><span class="line"><span class="keyword">if</span> ob != observer &#123;</span><br><span class="line">w.observers[j] = observer</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">w.observers = w.observers[:j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知所有订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *WeatherData)</span> <span class="title">Notify</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, observer := <span class="keyword">range</span> w.observers &#123;</span><br><span class="line">observer.update(w.temperature, w.humidity, w.pressure)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *WeatherData)</span> <span class="title">SetMeasurements</span><span class="params">(temperature <span class="keyword">int</span>, humidity <span class="keyword">int</span>, pressure <span class="keyword">float32</span>)</span></span> &#123;</span><br><span class="line">w.temperature = temperature</span><br><span class="line">w.humidity = humidity</span><br><span class="line">w.pressure = pressure</span><br><span class="line">w.Notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Observer 观察者</span></span><br><span class="line"><span class="keyword">type</span> Observer <span class="keyword">interface</span> &#123;</span><br><span class="line">update(temperature <span class="keyword">int</span>, humidity <span class="keyword">int</span>, pressure <span class="keyword">float32</span>)</span><br><span class="line">display()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FirstDisplay 显示装置 1</span></span><br><span class="line"><span class="keyword">type</span> FirstDisplay <span class="keyword">struct</span> &#123;</span><br><span class="line">temperature <span class="keyword">int</span></span><br><span class="line">humidity    <span class="keyword">int</span></span><br><span class="line">pressure    <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(display *FirstDisplay)</span> <span class="title">update</span><span class="params">(temperature <span class="keyword">int</span>, humidity <span class="keyword">int</span>, pressure <span class="keyword">float32</span>)</span></span> &#123;</span><br><span class="line">display.temperature = temperature</span><br><span class="line">display.humidity = humidity</span><br><span class="line">display.pressure = pressure</span><br><span class="line">display.display()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(display *FirstDisplay)</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"当前温度：%d， 当前湿度：%d\n"</span>, display.temperature, display.humidity)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondDisplay 显示装置 2</span></span><br><span class="line"><span class="keyword">type</span> SecondDisplay <span class="keyword">struct</span> &#123;</span><br><span class="line">temperature <span class="keyword">int</span></span><br><span class="line">humidity    <span class="keyword">int</span></span><br><span class="line">pressure    <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(display *SecondDisplay)</span> <span class="title">update</span><span class="params">(temperature <span class="keyword">int</span>, humidity <span class="keyword">int</span>, pressure <span class="keyword">float32</span>)</span></span> &#123;</span><br><span class="line">display.temperature = temperature</span><br><span class="line">display.humidity = humidity</span><br><span class="line">display.pressure = pressure</span><br><span class="line">display.display()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(display *SecondDisplay)</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"当前气压：%.2f\n"</span>, display.pressure)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">weatherData := WeatherData&#123;&#125;</span><br><span class="line"><span class="comment">// 创建显示装置 1</span></span><br><span class="line">firstDisplay := &amp;FirstDisplay&#123;&#125;</span><br><span class="line">weatherData.Register(firstDisplay)</span><br><span class="line">weatherData.SetMeasurements(<span class="number">23</span>, <span class="number">50</span>, <span class="number">23.1</span>)</span><br><span class="line"><span class="comment">// weatherData.Remove(firstDisplay)</span></span><br><span class="line"><span class="comment">// 创建显示装置 2</span></span><br><span class="line">secondDisplay := &amp;SecondDisplay&#123;&#125;</span><br><span class="line">weatherData.Register(secondDisplay)</span><br><span class="line">weatherData.SetMeasurements(<span class="number">22</span>, <span class="number">70</span>, <span class="number">24.2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>观察者模式定义了对象之间一对多的关系</li><li>主题通过一个共同的接口来更新观察者</li><li>主题和观察者之间用松耦合方式结合，主题不需要知道观察者的细节，具体观察者只需要实现观察者的接口</li></ul>]]></content>
    
    <summary type="html">
    
      松耦合的魅力
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="设计模式" scheme="http://jalan.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】用依赖注入解耦你的代码</title>
    <link href="http://jalan.space/2020/03/29/2020/decouple-your-code-with-dependency-injection/"/>
    <id>http://jalan.space/2020/03/29/2020/decouple-your-code-with-dependency-injection/</id>
    <published>2020-03-29T12:37:00.000Z</published>
    <updated>2021-01-19T11:33:31.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用依赖注入解耦你的代码"><a href="#用依赖注入解耦你的代码" class="headerlink" title="用依赖注入解耦你的代码"></a>用依赖注入解耦你的代码</h1><blockquote><p>无需第三方框架</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/3/29/1712677f078f2350?w=4000&amp;h=2670&amp;f=jpeg&amp;s=985847" alt="[Icons8 团队](https://unsplash.com/@icons8?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) 摄于 [Unsplash](https://unsplash.com/s/photos/ingredients?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)"></p><p>没有多少组件是能够独立存在而不依赖于其它组件的。除了创建紧密耦合的组件，我们还可以利用<strong>依赖注入</strong>（DI）来改善 <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">关注点的分离</a>。</p><p>这篇文章将会脱离第三方框架向你介绍依赖注入的核心概念。所有的示例代码都将使用 Java，但所介绍的一般原则也适用于其它任何语言。</p><hr><h2 id="示例：数据处理器"><a href="#示例：数据处理器" class="headerlink" title="示例：数据处理器"></a>示例：数据处理器</h2><p>为了让如何使用依赖注入更加形象化，我们将从一个简单的类型开始：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DbManager manager = <span class="keyword">new</span> SqliteDbManager(<span class="string">"db.sqlite"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Calculator calculator = <span class="keyword">new</span> HighPrecisionCalculator(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager.processData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">calc</span><span class="params">(BigDecimal input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calculator.expensiveCalculation(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DataProcessor</code> 有两个依赖项：<code>DbManager</code> 和 <code>Calculator</code>。直接在我们的类型中创建它们有几个明显的缺点：</p><ul><li>调用构造函数时可能发生崩溃</li><li>构造函数签名可能会改变</li><li>紧密绑定到显式实现类型</li></ul><p>是时候改进它了！</p><hr><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675" target="_blank" rel="noopener"><strong>《敏捷开发的艺术》</strong></a> 的作者 James Shore <a href="https://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html" target="_blank" rel="noopener">很好地指出</a>：</p><blockquote><p><strong>「依赖注入听起来复杂，实际上它的概念却十分简单。」</strong></p></blockquote><p>依赖注入的概念实际上非常简单：为组件提供完成其工作所需的一切。</p><p>通常，这意味着通过从外部提供组件的依赖关系来解耦组件，而非直接在组件内创建依赖，让组件间过度耦合。</p><p>我们可以通过多种方式为实例提供必要的依赖关系：</p><ul><li>构造函数注入</li><li>属性注入</li><li>方法注入</li></ul><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>构造函数注入，或称基于初始化器的依赖注入，意味着在实例初始化期间提供所有必需的依赖项，将其作为构造函数的参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DbManager manager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataProcessor</span><span class="params">(DbManager manager, Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">        <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这一简单的改变，我们可以弥补大多数最开始的缺点：</p><ul><li>易于替换：<code>DbManager</code> 和 <code>Calculator</code> 不再被具体的实现所束缚，现在可以模拟单元测试了。</li><li>已经初始化并且「准备就绪」：我们不必担心依赖项所需要的任何子依赖项（例如，数据库文件名、<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97" target="_blank" rel="noopener">有效数字（译者注）</a>等），也不必担心它们可在初始化期间发生崩溃的可能性。</li><li>强制要求：调用方确切地知道创建 <code>DataProcessor</code> 的所需内容。</li><li>不变性：依赖关系始终如初。</li></ul><p>尽管构造函数注入是许多依赖注入框架的首选方法，但它也有明显的缺点。其中最大的缺点是：必须在初始化时提供所有依赖项。</p><p>有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。</p><p>但是我们可以使用其它注入类型来缓解这些问题。</p><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><p>有时，我们无法访问类型实际的初始化方法，只能访问一个已经初始化的实例。或者在初始化时，所需要的依赖关系并不像之后那样明确。</p><p>在这些情况下，我们可以使用<strong>属性注入</strong>而不是依赖于构造函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbManager manager = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Calculator calculator = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// WARNING: Possible NPE</span></span><br><span class="line">        <span class="keyword">this</span>.manager.processData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">calc</span><span class="params">(BigDecimal input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// WARNING: Possible NPE</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calculator.expensiveCalculation(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不再需要构造函数了，在初始化后我们可以随时提供依赖项。但这种注入方式也有缺点：<strong>易变性</strong>。</p><p>在初始化后，我们不再保证 <code>DataProcessor</code> 是「随时可用」的。能够随意更改依赖关系可能会给我们带来更大的灵活性，但同时也会带来运行时检查过多的缺点。</p><p>现在，我们必须在访问依赖项时处理出现 <code>NullPointerException</code> 的可能性。</p><h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><p>即使我们将依赖项与构造函数注入与/或属性注入分离，我们也仍然只有一个选择。如果在某些情况下我们需要另一个 <code>Calculator</code> 该怎么办呢？</p><p>我们不想为第二个 <code>Calculator</code> 类添加额外的属性或构造函数参数，因为将来可能会出现第三个这样的类。而且在每次调用 <code>calc(...)</code> 前更改属性也不可行，并且很可能因为使用错误的属性而导致 bug。</p><p>更好的方法是参数化调用方法本身及其依赖项：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">calc</span><span class="params">(Calculator calculator, BigDecimal input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculator.expensiveCalculation(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，<code>calc(...)</code> 的调用者负责提供一个合适的 <code>Calculator</code> 实例，并且 <code>DataProcessor</code> 类与之完全分离。</p><p>通过混合使用不同的注入类型来提供一个默认的 <code>Calculator</code>，这样可以获得更大的灵活性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Calculator defaultCalculator;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataProcessor</span><span class="params">(Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultCalculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">calc</span><span class="params">(Calculator calculator, BigDecimal input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(calculator)</span><br><span class="line">                       .orElse(<span class="keyword">this</span>.calculator)</span><br><span class="line">                       .expensiveCalculation(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者<strong>可以</strong>提供另一种类型的 <code>Calculator</code>，但这不是<strong>必须</strong>的。我们仍然有一个解耦的、随时可用的 <code>DataProcessor</code>，它能够适应特定的场景。</p><h2 id="选择哪种注入方式？"><a href="#选择哪种注入方式？" class="headerlink" title="选择哪种注入方式？"></a>选择哪种注入方式？</h2><p>每种依赖注入类型都有自己的优点，并没有一种「正确的方法」。具体的选择完全取决于你的实际需求和情况。</p><h4 id="构造函数注入-1"><a href="#构造函数注入-1" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>构造函数注入是我的最爱，它也常受依赖注入框架的青睐。</p><p>它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。</p><h4 id="属性注入-1"><a href="#属性注入-1" class="headerlink" title="属性注入"></a>属性注入</h4><p>属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。</p><p>其它编程语言，例如 Swift，大量使用了带属性的 <a href="https://en.wikipedia.org/wiki/Delegation_pattern" target="_blank" rel="noopener">委托模式</a>。因此，使用属性注入将使其它语言的开发人员更熟悉我们的代码。</p><h4 id="方法注入-1"><a href="#方法注入-1" class="headerlink" title="方法注入"></a>方法注入</h4><p>如果在每次调用时依赖项可能不同，那么使用方法注入最好不过了。方法注入进一步解耦组件，它使方法本身持有依赖项，而非整个组件。</p><p>请记住，这不是非此即彼。我们可以根据需要自由组合各种注入类型。</p><h2 id="控制反转容器"><a href="#控制反转容器" class="headerlink" title="控制反转容器"></a>控制反转容器</h2><p>这些简单的依赖注入实现可以覆盖很多用例。依赖注入是很好的解耦工具，但事实上我们仍然需要在某些时候创建依赖项。</p><p>但随着应用程序和代码库的增长，我们可能还需要一个更完整的解决方案来简化依赖注入的创建和组装过程。</p><p><strong>控制反转</strong>（IoC）是 <a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank" rel="noopener">控制流</a> 的抽象原理。依赖注入是控制反转的具体实现之一。</p><p><strong>控制反转容器</strong>是一种特殊类型的对象，它知道如何实例化和配置其它对象，它也知道如何帮助你执行依赖注入。</p><p>有些容器可以通过反射来检测关系，而另一些必须手动配置。有些容器基于运行时，而有些则在编译时生成所需要的所有代码。</p><p>比较所有容器的不同之处超出了本文的讨论范围，但是让我通过一个小示例来更好地理解这个概念。</p><h4 id="示例-Dagger-2"><a href="#示例-Dagger-2" class="headerlink" title="示例: Dagger 2"></a>示例: Dagger 2</h4><p><a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger</a> 是一个轻量级、编译时进行依赖注入的框架。我们需要创建一个 <code>Module</code>，它就知道如何构建我们的依赖项，稍后我们只要添加 <code>@Inject</code> 注释就可以注入这个 <code>Module</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> DbManager <span class="title">provideManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Calculator <span class="title">provideCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HighPrecisionCalculator(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Singleton</code> 确保只能创建一个依赖项的实例。</p><p>要注入依赖项，我们只需要将 <code>@Inject</code> 添加到构造函数、字段或方法中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DbManager manager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些仅仅是一些基础知识，乍一看不可能会给人留下深刻的印象。但是控制反转容器和框架不仅解耦了组件，也让创建依赖关系的灵活性得以最大化。</p><p>由于提供了高级特性，创建过程的可配置性变得更强，并且支持了使用依赖项的新方法。</p><h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><p>这些特性在不同类型的控制反转容器和底层语言之间差异很大，比如：</p><ul><li><a href="https://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="noopener">代理模式</a> 和延迟加载。</li><li>生命周期（例如：单例模式与每个线程一个实例）。</li><li>自动绑定。</li><li>单一类型的多种实现。</li><li>循环依赖。</li></ul><p>这些特性是控制反转容器真正的能力。你可能会认为诸如「循环依赖」这样的特性并非好的主意，确实如此。</p><p>但是，如果由于遗留代码或是过去不可更改的错误设计而需要这种奇怪的代码构造，那么我们现在有能力可以这样做。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们应该根据抽象（例如接口）而不是具体的实现来设计代码，这样可以帮助我们减少代码耦合。</p><p>接口必须提供我们代码所需要的唯一信息，我们不能对实际实现情况做任何假设。</p><blockquote><p><strong>「程序应当依赖抽象，而非具体的实现」</strong><br>—— Robert C. Martin (2000), 《设计原则与设计模式》</p></blockquote><p>依赖注入是通过解耦组件来实现这一点的好办法。它使我们能够编写更简洁明了、更易于维护和重构的代码。</p><p>选择三种依赖注入类型中的哪种很大程度上取决于环境和需求，但是我们也可以混合使用三种类型使收益最大化。</p><p>控制反转容器有时几乎以一种神奇的方式通过简化组件创建过程来提供另一种便利的布局。</p><p>我们应该处处使用它吗？当然不是。</p><p>就像其它模式和概念一样，我们应该在适当的时候应用它们，而不是能用则用。</p><p>永远不要把自己局限在一种做事的方式上。也许 <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" target="_blank" rel="noopener">工厂模式</a> 甚至是广为厌恶的 <a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="noopener">单例模式</a> 是能够满足你需求的更好的解决方案。</p><hr><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.martinfowler.com/articles/injection.html" target="_blank" rel="noopener">控制反转容器与依赖注入模式</a> (Martin Fowler)</li><li><a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank" rel="noopener">依赖反转原则</a>（维基百科）</li><li><a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">控制反转</a>（维基百科）</li></ul><hr><h2 id="控制反转容器-1"><a href="#控制反转容器-1" class="headerlink" title="控制反转容器"></a>控制反转容器</h2><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li><a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-introduction" target="_blank" rel="noopener">Spring</a></li><li><a href="https://tapestry.apache.org/ioc.html" target="_blank" rel="noopener">Tapestry</a></li></ul><h4 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h4><ul><li><a href="https://insert-koin.io/" target="_blank" rel="noopener">Koin</a></li></ul><h4 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h4><ul><li><a href="https://github.com/AliSoftware/Dip" target="_blank" rel="noopener">Dip</a></li><li><a href="https://github.com/Swinject/Swinject" target="_blank" rel="noopener">Swinject</a></li></ul><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><ul><li><a href="https://autofac.org/" target="_blank" rel="noopener">Autofac</a></li><li><a href="http://www.castleproject.org/projects/windsor/" target="_blank" rel="noopener">Castle Windsor</a></li></ul><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      没有多少组件是能够独立存在而不依赖于其它组件的。除了创建紧密耦合的组件，我们还可以利用依赖注入（DI）来改善关注点的分离
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计模式" scheme="http://jalan.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》学习笔记 | 策略模式</title>
    <link href="http://jalan.space/2020/03/09/2020/design-pattern-strategy-pattern/"/>
    <id>http://jalan.space/2020/03/09/2020/design-pattern-strategy-pattern/</id>
    <published>2020-03-09T14:15:00.000Z</published>
    <updated>2020-03-09T14:16:33.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我最近在看大名鼎鼎的《Head First 设计模式》。这本「OO 圣经」用 Java 实现各类设计模式，对于我 —— 一个非 Java 爱好者而言，读起来并不过瘾。</p><p>有人读完这本书可能会误解设计模式就是设计 Interface，而事实并非如此。在知乎的一个问题<a href="https://www.zhihu.com/question/20685467" target="_blank" rel="noopener">《Python 里没有接口，如何写设计模式？》</a>中，<a href="https://www.zhihu.com/people/excited-vczh/activities" target="_blank" rel="noopener">vczh</a> 轮子哥是这样回答的：</p><blockquote><p>设计模式搞了那么多东西就是在告诉你<strong>如何在各种情况下解耦你的代码，让你的代码在运行时可以互相组合</strong>。这就跟兵法一样。难道有了飞机大炮，兵法就没有用了吗？</p></blockquote><p>我觉得这个比喻很好，不同的语言就像不同的兵器，各有各的特点与使用方式，而设计模式就是那套「兵法」，无论你使用何种兵器，不过是「纵横不出方圆，万变不离其宗」。而只看书中一种「兵器」未免太少，不如我们多试几样？</p><p>本篇就来看一看第一章「兵法」 —— 策略模式（<em>Strategy Pattern</em>）。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>书中对策略模式的定义如下：</p><blockquote><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p></blockquote><p>下面以书中的「模拟鸭子应用」为例。</p><h2 id="继承的弊端"><a href="#继承的弊端" class="headerlink" title="继承的弊端"></a>继承的弊端</h2><p>你要设计一个鸭子游戏，游戏里有各种各样的鸭子，它们会游泳（<code>swim()</code>），还会呱呱叫（<code>quack()</code>），每种鸭子拥有不同的外观（<code>display()</code>）。</p><p>一开始，你可能会设计一个鸭子的超类 <code>Duck</code>，然后让所有不同种类的鸭子继承它：</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f93ce4aecf95a9?w=928&amp;h=575&amp;f=png&amp;s=44162" alt="设计一个鸭子超类（Superclass）"></p><p>如果此时我们想让鸭子飞起来，就要在超类中增加一个 <code>fly()</code> 方法：</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f93d4fe2ad11e4?w=928&amp;h=575&amp;f=png&amp;s=51352" alt="让鸭子飞"></p><p>此时，鸭子家族来了一只擅于代码调试工作的小黄鸭。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f93d78bf4775e3?w=720&amp;h=480&amp;f=jpeg&amp;s=4512" alt=""></p><p>此时，一切都乱套了，这位代码调试工作者会发出「吱吱」的叫声，但却不会飞，然而它却从鸭子超类继承了 <code>quack()</code> 和 <code>fly()</code> 方法。为了让它尊重客观事实，我们需要在小黄鸭类中覆盖超类的 <code>quack()</code> 和 <code>fly()</code> 方法，让它变得不会叫也不会飞。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f93e06edacc785?w=897&amp;h=660&amp;f=png&amp;s=69744" alt="在小黄鸭中覆盖原有的方法"></p><p>虽然我们用「覆盖方法」的手段解决了小黄鸭的问题，但未来我们可能还会制造更多奇奇怪怪的鸭子。例如周黑鸭或北京烤鸭，它们显然既不会叫，也不会游泳，还不会飞，这时我们又要为它们重写所有的行为吗？利用继承的方式来为不同种类的鸭子提供行为显然不够灵活。</p><h2 id="抽离可变行为"><a href="#抽离可变行为" class="headerlink" title="抽离可变行为"></a>抽离可变行为</h2><p>不同的鸭子具有不同的行为，<strong>鸭子的行为应当是灵活可变的</strong>。</p><blockquote><p><strong>设计原则一</strong>：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p></blockquote><p>因此，利用上述原则，我们把「鸭子的行为」从鸭子类（<em>Duck</em>）中抽离出来。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f94127e9058e99?w=727&amp;h=480&amp;f=png&amp;s=43051" alt="取出容易变化的行为"></p><h2 id="实现被抽离的行为"><a href="#实现被抽离的行为" class="headerlink" title="实现被抽离的行为"></a>实现被抽离的行为</h2><blockquote><p><strong>设计原则二</strong>：针对接口编程，而不是针对实现编程。</p></blockquote><p>我们将这些被抽离出的行为归类：</p><ul><li>所有具体的飞行行为属于飞行策略</li><li>所有具体的叫声行为属于叫声策略</li><li>所有具体的游泳行为属于游泳策略</li><li>……</li></ul><p>我们可以利用接口或抽象类代表这些<strong>策略</strong>，然后<strong>让特定的具体行为来实现这些策略中的方法</strong>。</p><p>例如，我们的飞行策略名为 <code>FlyBehavior</code>，我们将它设计为一个抽象类（当然也可以是接口）。然后，我们有两种具体的飞行方式 <code>FlyWithWings</code>（会飞）和 <code>FlyNoWay</code>（不会飞），它们需要实现飞行策略中的 <code>fly()</code> 方法：</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f943b6cc1ece6c?w=640&amp;h=407&amp;f=png&amp;s=22118" alt=""></p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>此时，我们已经将可变的行为从鸭子超类（<code>Duck</code>）中抽离，并把它们用具体的「行为类」进行表示。我们希望：<strong>如果鸭子要执行某个行为，它不需要自己处理，而是将这一行为委托给具体的「行为类」</strong>。</p><p>因此，我们可以在鸭子超类（<code>Duck</code>）中加入「行为类」的实例变量，从而通过这些实例变量来调用具体的行为方法。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f9446b3dde8d5b?w=707&amp;h=294&amp;f=png&amp;s=22524" alt=""></p><p>在 <code>Class Duck</code> 的 <code>fly()</code> 方法中，我们可以使用实例 <code>flyBehavior</code> 调用具体的行为方法，从而达成「委托」的目的：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;flyBehavior-&gt;fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>下面来看看不同语言的具体实现：</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>PHP 有抽象类也有接口，语法和 Java 比较接近。实现方法中规中矩，和书中的并无二致。只不过这里我把行为接口改成了抽象类。类图如下：</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/11/16f9495446251c43?w=1628&amp;h=758&amp;f=png&amp;s=103391" alt="UML 类图关系"></p><p>具体实现：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 飞行行为类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 「飞」的具体行为</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">extends</span> <span class="title">FlyBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"会飞\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">extends</span> <span class="title">FlyBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"不会飞\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叫声行为类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">QuackBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 「叫」的具体行为</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">extends</span> <span class="title">QuackBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"呱呱\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">extends</span> <span class="title">QuackBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"吱吱\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">extends</span> <span class="title">QuackBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"不会叫\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸭子类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $flyStrategy;</span><br><span class="line">    <span class="keyword">protected</span> $quackStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;flyStrategy-&gt;fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;quackStrategy-&gt;quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有只小黄鸭</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($flyStrategy, $quackStrategy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;flyStrategy = $flyStrategy;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;quackStrategy = $quackStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$yellowDuck = <span class="keyword">new</span> YellowDuck(<span class="keyword">new</span> FlyNoWay(), <span class="keyword">new</span> Squeak());</span><br><span class="line">$yellowDuck-&gt;fly();</span><br><span class="line">$yellowDuck-&gt;quack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">不会飞</span></span><br><span class="line"><span class="comment">吱吱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python 就没有所谓的抽象类和接口了，当然你也可以通过 <code>abc</code> 模块来实现这些功能。</p><p>比较简单的做法是：将具体行为直接定义为函数，在初始化鸭子时通过构造函数传入行为函数，赋值给对应的变量。当执行具体行为时，将直接调用被赋值的变量，这时具体的行为动作就被委托给了传入的行为函数，达到了「委托」的效果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fly_strategy, quack_strategy)</span>:</span></span><br><span class="line">        self.fly_strategy = fly_strategy</span><br><span class="line">        self.quack_strategy = quack_strategy</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fly_strategy()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.quack_strategy()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fly_with_wings</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"会飞"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fly_no_way</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"不会飞"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"呱呱"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squeak</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"吱吱"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mute_quack</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"不会叫"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一只会飞也不会叫的小黄鸭</span></span><br><span class="line">yellow_duck = Duck(fly_no_way, mute_quack)</span><br><span class="line">yellow_duck.fly()</span><br><span class="line">yellow_duck.quack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># 不会飞</span></span><br><span class="line"><span class="comment"># 不会叫</span></span><br></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><p>在 Go 语言中没有 <code>extends</code> 关键字，但可以通过<strong>在结构体中内嵌匿名类型</strong>的方式实现继承关系。此处，将 <code>FlyBehavior</code> 飞行行为和 <code>QuackBehavior</code> 行为声明为接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FlyBehavior 飞行行为接口</span></span><br><span class="line"><span class="keyword">type</span> FlyBehavior <span class="keyword">interface</span> &#123;</span><br><span class="line">fly()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuackBehavior 呱呱叫行为接口</span></span><br><span class="line"><span class="keyword">type</span> QuackBehavior <span class="keyword">interface</span> &#123;</span><br><span class="line">quack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FlyWithWings 会飞的类</span></span><br><span class="line"><span class="keyword">type</span> FlyWithWings <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(flyWithWings FlyWithWings)</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"会飞"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FlyWithWings 不会飞的类</span></span><br><span class="line"><span class="keyword">type</span> FlyNoWay <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(flyNoWay FlyNoWay)</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"不会飞"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack 呱呱叫</span></span><br><span class="line"><span class="keyword">type</span> Quack <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(quack Quack)</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"呱呱"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Squeak 吱吱叫</span></span><br><span class="line"><span class="keyword">type</span> Squeak <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(squeak Squeak)</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"吱吱"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MuteQuack 不会叫</span></span><br><span class="line"><span class="keyword">type</span> MuteQuack <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(muteQuack MuteQuack)</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"不会叫"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duck 鸭子类</span></span><br><span class="line"><span class="keyword">type</span> Duck <span class="keyword">struct</span> &#123;</span><br><span class="line">FlyBehavior   FlyBehavior</span><br><span class="line">QuackBehavior QuackBehavior</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Duck)</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.FlyBehavior.fly() <span class="comment">// 委托给飞行行为</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Duck)</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.QuackBehavior.quack() <span class="comment">// 委托给呱呱叫行为</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yellowDuck := Duck&#123;FlyNoWay&#123;&#125;, Squeak&#123;&#125;&#125;</span><br><span class="line">yellowDuck.fly()</span><br><span class="line">yellowDuck.quack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">不会飞</span></span><br><span class="line"><span class="comment">吱吱</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三种设计原则：</p><ol><li>封装变化</li><li>多用组合，少用继承</li><li>针对接口编程，不针对实现编程</li></ol><p>注意此处的「针对接口编程」，书中也有强调：</p><blockquote><p>「针对接口编程」真正的意思是「针对超类型（supertype）编程」。这里所谓的「接口」有多个含义，接口是一个「概念」，也是一种 Java 的 interface 构造。你可以在不涉及 Java interface 的情况下「针对接口编程」，关键就在<strong>多态</strong>。利用多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为。</p></blockquote><p>因此，你不用拘泥于 <code>interface</code>，你所用的语言就算没有 <code>interface</code> 也能实现设计模式。</p>]]></content>
    
    <summary type="html">
    
      在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="设计模式" scheme="http://jalan.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】SQL 将死于 No-SQL 之手？</title>
    <link href="http://jalan.space/2020/02/25/2020/is-no-sql-killing-sql/"/>
    <id>http://jalan.space/2020/02/25/2020/is-no-sql-killing-sql/</id>
    <published>2020-02-25T12:37:00.000Z</published>
    <updated>2021-01-19T11:30:38.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://towardsdatascience.com/is-no-sql-killing-sql-3b0daff69ea" target="_blank" rel="noopener">Is No-SQL killing SQL?</a></li><li>原文作者：<a href="https://medium.com/@tjwaterman99" target="_blank" rel="noopener">Tom Waterman</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/is-no-sql-killing-sql.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/TODO1/is-no-sql-killing-sql.md</a></li><li>译者：<a href="http://jalan.space">江不知</a></li><li>校对者：<a href="https://github.com/cyz980908" target="_blank" rel="noopener">Jessica</a>, <a href="https://github.com/todaycoder001" target="_blank" rel="noopener">司徒公子</a></li></ul></blockquote><h1 id="SQL-将死于-No-SQL-之手？"><a href="#SQL-将死于-No-SQL-之手？" class="headerlink" title="SQL 将死于 No-SQL 之手？"></a>SQL 将死于 No-SQL 之手？</h1><p><img src="https://user-gold-cdn.xitu.io/2020/2/25/1707c6493cef6ae0?w=1344&amp;h=520&amp;f=png&amp;s=263767" alt=""></p><h4 id="SQL-永生不灭的两个原因"><a href="#SQL-永生不灭的两个原因" class="headerlink" title="SQL 永生不灭的两个原因"></a>SQL 永生不灭的两个原因</h4><p>上周，我的一位朋友向我转发了一封来自一位成功创业者的电子邮件，邮件宣称「SQL 已死」。</p><p>这位创业者宣称，像 MongoDB、Redis 这样广受欢迎的 No-SQL 数据库会慢慢取代基于 SQL 的数据库，因此，作为数据科学家还需学习 SQL 是一个「历史遗留问题」。</p><p>我完全被他的电子邮件震惊了：他怎么得出如此离谱的结论？但是这也使我感到好奇……别人是否也有可能被类似地误导了？这位企业家已经发展了大批追随者，且直言不讳 —— 那么新晋数据科学家是否已经收到了避免学习 SQL 的建议？</p><p>因此我觉得我应当公开分享我对该创业者的回应，以防他人认为 SQL 即将走向灭绝。</p><blockquote><p>在数据科学的职业生涯中，你<strong>绝对</strong>应当学习 SQL。No-SQL 的存在绝对不会影响学习 SQL 的价值。</p></blockquote><p>基本上有两个原因可以保证 SQL 在未来几十年仍然适用。</p><p><strong>原因 #1：No-SQL 数据库无法取代数据分析型数据库，例如 Presto、Redshift 或 BigQuery</strong></p><p>无论你的应用是使用以 SQL 为后端的数据库，例如 MySQL，或是以 No-SQL 为后端的数据库，例如 MongoDB，这些后端中的数据最终都将被加载到一个专用的数据分析数据库中，例如 Redshift、Snowflake、BigQuery 或 Presto。</p><p><img src="https://user-gold-cdn.xitu.io/2020/2/25/1707c64ab94efb07?w=1552&amp;h=778&amp;f=png&amp;s=140495" alt="分析型数据库平台架构示例：SQL 与 NoSQL"></p><p>为什么公司要将他们的数据转移到像 Redshift 这样特定的列式存储中？因为和 NoSQL 与 MySQL 这样的行式存储数据库相比，列式存储能<strong>更</strong>快地运行分析查询。事实上，我敢打赌，列式存储和 NoSQL 一样会越来越受欢迎。</p><p>因此，无论是 NoSQL 还是其他的应用程序数据库都与数据科学家无关，因为数据科学家不会对应用程序数据库进行操作（尽管有一些例外，这些例外我将在之后讨论）。</p><p><strong>原因 #2：No-SQL 数据库的好处不在于他们不支持 SQL 语言</strong></p><p>事实证明，如果 No-SQL 数据存储支持基于 SQL 的查询引擎是有意义的，那么它们就可以实现该引擎。类似地，SQL 数据库也可以支持 NoSQL 查询语言，但是它们选择不支持。</p><p>为什么列式存储<strong>有意选择</strong>提供 SQL 接口呢？</p><p>他们之所以作出这样的选择是因为 SQL 是一种表达数据操作指令的强大语言。</p><p>让我们来考虑一个简单的查询示例，该查询用于计算来自 NoSQL 数据库 MongoDB 中某集合的文档数量。</p><blockquote><p>注意：MongoDB 中的文档类似于行，集合类似于表。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.sales.aggregate( [</span><br><span class="line">  &#123;</span><br><span class="line">    $group: &#123;</span><br><span class="line">       _id: <span class="literal">null</span>,</span><br><span class="line">       count: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">] )</span><br></pre></td></tr></table></figure><p>将其与等价的 SQL 语句进行比较。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sales</span><br></pre></td></tr></table></figure><p>显然，对于想要提取数据的人来说，SQL 语言是更好的选择。（NoSQL 数据库支持另一种语言，因为对于与数据库连接的应用程序库来说，正确构造 SQL 相对比较困难）。</p><hr><p>在前面我提到过，应用程序数据库技术与科学家无关的规则是有例外的。例如，在我的第一家公司，我们实际上没有任何像 Redshift 这样的分析型数据库，所以我不得不直接查询该应用程序的数据库。（更准确地说，我是在查询应用程序数据库的只读副本）。</p><p>公司的应用也使用了 Redis 这样的 No-SQL 数据库，这样至少有一次，我需要从 Redis 中提取数据，所以我必须学习一些 Redis 的 NoSQL API 的某些组件。</p><p>因此，如果在主应用程序环境中完全使用 NoSQL 数据库，那么你学到的任何 SQL 知识都与之无关了。但是这样的环境非常少见，随着公司的发展，他们几乎都会把一个基于 SQL 的列式存储数据库投入使用。</p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im" target="_blank" rel="noopener">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android" target="_blank" rel="noopener">Android</a>、<a href="https://github.com/xitu/gold-miner#ios" target="_blank" rel="noopener">iOS</a>、<a href="https://github.com/xitu/gold-miner#前端" target="_blank" rel="noopener">前端</a>、<a href="https://github.com/xitu/gold-miner#后端" target="_blank" rel="noopener">后端</a>、<a href="https://github.com/xitu/gold-miner#区块链" target="_blank" rel="noopener">区块链</a>、<a href="https://github.com/xitu/gold-miner#产品" target="_blank" rel="noopener">产品</a>、<a href="https://github.com/xitu/gold-miner#设计" target="_blank" rel="noopener">设计</a>、<a href="https://github.com/xitu/gold-miner#人工智能" target="_blank" rel="noopener">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi" target="_blank" rel="noopener">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi" target="_blank" rel="noopener">知乎专栏</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      SQL 永生不灭的两个原因
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="翻译" scheme="http://jalan.space/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="数据库" scheme="http://jalan.space/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://jalan.space/tags/SQL/"/>
    
      <category term="No-SQL" scheme="http://jalan.space/tags/No-SQL/"/>
    
  </entry>
  
  <entry>
    <title>macOS 下 MongoDB 连接报错排查过程及处理</title>
    <link href="http://jalan.space/2020/01/31/2020/macos-mongodb-start-error/"/>
    <id>http://jalan.space/2020/01/31/2020/macos-mongodb-start-error/</id>
    <published>2020-01-31T12:37:00.000Z</published>
    <updated>2020-01-31T13:14:27.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 macOS 下使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装 MongoDB。但在 Homebrew 的核心库中，我们无法找到 MongoDB，于是需要先运行 <code>brew tap</code>，帮助我们扩大可安装软件的选择范围。</p><blockquote><p>The tap command allows Homebrew to tap into another repository of formulae. Once you’ve done this you’ve expanded your options of installable software.</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew tap mongodb/brew</span><br></pre></td></tr></table></figure><p>之后，运行如下命令安装 MongoDB：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install mongodb-community@4.2</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>使用 <code>brew</code> 命令运行 MongoDB：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew services start mongodb-community@4.2</span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>启动成功后，使用如下命令与 MongoDB 建立连接：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure><p>运行命令后发现连接失败，错误如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MongoDB shell version v4.2.2</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">2020-01-31T19:24:23.752+0800 E  QUERY    [js] Error: couldn&apos;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.0.0.1:27017 :: caused by :: Connection refused :</span><br><span class="line">connect@src/mongo/shell/mongo.js:341:17</span><br><span class="line">@(connect):2:6</span><br><span class="line">2020-01-31T19:24:23.768+0800 F  -        [main] exception: connect failed</span><br><span class="line">2020-01-31T19:24:23.768+0800 E  -        [main] exiting with code 1</span><br></pre></td></tr></table></figure><h3 id="报错排查"><a href="#报错排查" class="headerlink" title="报错排查"></a>报错排查</h3><p>看报错信息总之就是连接失败了，这么一大段除了 <code>Error connecting</code> 也没啥有用的信息了。为了获取<strong>具体</strong>的错误信息，我们可以查看 MongoDB 的日志文件，日志在 <em>/usr/local/var/log/mongodb</em> 目录中，日志信息如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat /usr/local/var/log/mongodb/mongo.log</span><br><span class="line">2020-01-31T20:20:11.840+0800 I  CONTROL  [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &apos;none&apos;</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] MongoDB starting : pid=44665 port=27017 dbpath=/usr/local/var/mongodb 64-bit host=Jalan-JiangdeMacBook-Pro.local</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] db version v4.2.2</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] git version: a0bbbff6ada159e19298d37946ac8dc4b497eadf</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] allocator: system</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] modules: none</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] build environment:</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2020-01-31T20:20:11.875+0800 I  CONTROL  [initandlisten] options: &#123; config: &quot;/usr/local/etc/mongod.conf&quot;, net: &#123; bindIp: &quot;127.0.0.1&quot; &#125;, storage: &#123; dbPath: &quot;/usr/local/var/mongodb&quot; &#125;, systemLog: &#123; destination: &quot;file&quot;, logAppend: true, path: &quot;/usr/local/var/log/mongodb/mongo.log&quot; &#125; &#125;</span><br><span class="line">2020-01-31T20:20:11.876+0800 I  STORAGE  [initandlisten]</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten] ** WARNING: Support for MMAPV1 storage engine has been deprecated and will be</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten] **          removed in version 4.2. Please plan to migrate to the wiredTiger</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten] **          storage engine.</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/deprecated-mmapv1</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten]</span><br><span class="line">2020-01-31T20:20:11.877+0800 I  STORAGE  [initandlisten] Detected data files in /usr/local/var/mongodb created by the &apos;mmapv1&apos; storage engine, so setting the active storage engine to &apos;mmapv1&apos;.</span><br><span class="line">2020-01-31T20:20:11.878+0800 I  STORAGE  [initandlisten] exception in initAndListen: Location18656: Cannot start server with an unknown storage engine: mmapv1, terminating</span><br><span class="line">2020-01-31T20:20:11.878+0800 I  NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br><span class="line">2020-01-31T20:20:11.878+0800 I  NETWORK  [initandlisten] removing socket file: /tmp/mongodb-27017.sock</span><br><span class="line">2020-01-31T20:20:11.878+0800 I  -        [initandlisten] Stopping further Flow Control ticket acquisitions.</span><br><span class="line">2020-01-31T20:20:11.879+0800 I  CONTROL  [initandlisten] now exiting</span><br><span class="line">2020-01-31T20:20:11.879+0800 I  CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure><p>列出关键信息：<em>WARNING: Support for MMAPV1 storage engine has been deprecated and will be removed in version 4.2. Please plan to migrate to the wiredTiger</em></p><p>翻译一下就是：<strong>4.2 版本已不再支持 MMAPV1 引擎，请迁移至 wiredTiger 引擎</strong>。</p><p>在 <a href="https://docs.mongodb.com/manual/release-notes/4.0-compatibility/#deprecate-mmapv1" target="_blank" rel="noopener">Compatibility Changes in MongoDB 4.0</a> 中我们可以看到，MongoDB 从 4.0 版本开始就不再支持 MMAPV1 引擎了（<em>Deprecate MMAPv1</em>），因此，我们需要把引擎切换成 wiredTiger。</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>首先，启动要切换引擎的 MongoDB：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew services start mongodb-community@4.2</span><br></pre></td></tr></table></figure><p>如果这个数据库中还有你所需要的数据，需要使用 <code>mongodump</code> 对数据库进行备份。</p><p>然后，创建一个新的目录，用于 wiredTiger 引擎的数据存储。我创建的目录为：<em>/usr/local/varmongodb-w</em>。</p><p>最后，使用 wiredTiger 引擎启动 MongoDB：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongod --storageEngine wiredTiger --dbpath /usr/local/varmongodb-w</span><br></pre></td></tr></table></figure><p>其中，<code>--dbpath</code> 后填写你刚才创建的新目录。</p><p>如果你刚才备份过数据，还需要使用 <code>mongorestore</code> 将数据重新导入。</p><p>大功告成啦~</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="noopener">Install MongoDB Community Edition on macOS</a></li><li><a href="https://docs.mongodb.com/manual/release-notes/4.0-compatibility/" target="_blank" rel="noopener">Compatibility Changes in MongoDB 4.0</a></li></ul>]]></content>
    
    <summary type="html">
    
      切换引擎至 WiredTiger
    
    </summary>
    
      <category term="跨过这道坎" scheme="http://jalan.space/categories/%E8%B7%A8%E8%BF%87%E8%BF%99%E9%81%93%E5%9D%8E/"/>
    
    
      <category term="mongodb" scheme="http://jalan.space/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>2019，冒险者的孤勇</title>
    <link href="http://jalan.space/2020/01/02/2020/2019-bye/"/>
    <id>http://jalan.space/2020/01/02/2020/2019-bye/</id>
    <published>2020-01-02T12:37:00.000Z</published>
    <updated>2020-01-25T14:34:00.852Z</updated>
    
    <content type="html"><![CDATA[<p>半个月前，我参加<a href="https://juejin.im/post/5def04e06fb9a01631780bec" target="_blank" rel="noopener">掘金年度征文</a>，写了一篇<a href="https://juejin.im/post/5df70c6cf265da33bd497c22" target="_blank" rel="noopener">《2019 年「我与技术那些事儿」| 掘金年度征文》</a>。这篇文章基本是我 2019 年在技术上的总结了。</p><p>但技术永远都只是生活的一部分。我不想在公众平台上写太多私人的事，所以还是按照以往的惯例，在博客上发一篇真正的、全面的 2019 年度总结。</p><p>2019 年 12 月的前半月我忙着发烧，后半月忙着制作 <a href="https://juejin.im/post/5e0aaa11e51d4575e942f14f" target="_blank" rel="noopener">GitHub 年度报告</a>，所以这篇「真正的总结」也只好放到 2020 年来写。</p><p>技术方面我就不再赘述了，如果你对我的技术总结感兴趣，欢迎戳上面的掘金链接。</p><p><img src="/img/in-post/2020/2019-bye/work.jpeg" alt="2019 年，在深圳"></p><h2 id="冒险"><a href="#冒险" class="headerlink" title="冒险"></a>冒险</h2><p>我给这篇年度总结起名《2019，冒险者的孤勇》，因为 2019 年对我而言就是冒险、承担、执拗。</p><p>年初冒险的决定改变了我的工作和生活，但我并没有因此而过得多好，反而时常为此流泪叹息。我一直很焦虑，时常自责。直到有一次，我的心理咨询师对我说：「你年初的决定很好地保护了你自己」。从此往后，我开始用这句话不段地自我鼓励：<strong>虽然我做得还不够好，但这个决定我从来没有做错过。就算没有人帮助我，我也可以保护好自己。</strong></p><p>「往者不可谏，来者犹可追」，这段冒险一旦开始就没有办法回头了。我在这条路上「又勇又怂」：勇在开疆扩土，怂在本性难移。「怂」的部分总是很难改变，但愿 2020 勇字当头，能活得更自在、更热忱些。</p><p><img src="/img/in-post/2020/2019-bye/shenzhen.jpeg" alt="2019 年 10 月，摄于福州南站"></p><h2 id="尝鲜"><a href="#尝鲜" class="headerlink" title="尝鲜"></a>尝鲜</h2><p>2019 年是「尝鲜」的一年，我经历了很多「人生第一次」：</p><ul><li>第一次裸辞</li><li>第一次「下岗」待业</li><li>第一次在深圳生活</li><li>第一次骑车上下班</li><li>第一次会网友</li><li>第一次心理咨询</li><li>第一次围观<a href="http://www.spartanrace.cn/zh/race/race-types/race-types-overview" target="_blank" rel="noopener">斯巴达勇士竞速赛</a></li><li>第一次自己坐飞机（还坐了 4 次）</li><li>第一次参加开发者大会（见<a href="http://jalan.space/2019/09/12/2019/google-developer-days/">《2019 谷歌开发者大会之我见》</a>）</li><li>第一次参与 GitHub 上的开源项目（<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a>，<a href="https://github.com/PHPMailer/PHPMailer" target="_blank" rel="noopener">PHPMailer</a>，<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python-100-Days</a>）</li><li>第一次开发 iOS 应用</li><li>第一次维护自己的开源项目（<a href="https://github.com/JalanJiang/leetcode-notebook" target="_blank" rel="noopener">leetcode-notebook</a>）</li><li>第一次创建技术群组（<a href="https://github.com/leetcode-notebook" target="_blank" rel="noopener">刷题小组</a>），认识了很多志同道合的小伙伴</li><li>第一次运营微信公众号，因此结识了非常多的大佬</li><li>……</li></ul><p><img src="/img/in-post/2020/2019-bye/spartanrace.jpeg" alt="斯巴达勇士竞速赛观光团"></p><h2 id="行路"><a href="#行路" class="headerlink" title="行路"></a>行路</h2><p>2019 年我去了香港、潮汕、上海、广州、顺德和南浔。原本在下半年有出国的计划，但很遗憾，最终没有达成。</p><p><img src="/img/in-post/2020/2019-bye/nan-xun.jpeg" alt="2019 年 11 月，摄于南浔古镇"></p><p>2020 年依旧想去一些从未到达的城市，看看别人的生活。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>我在 2019 年悟出的一个道理是：<strong>凡事急不得</strong>。</p><p>我经常遇见想做的事就开始挖坑，却往往三分钟热度，最终都没能把坑填上，导致事后自责懊恼，自信心受挫。我总是着急着想做成一些事，却忘记了很多事是着急不得的。专心做一件事时，其实就不能专心做另一件事，要用沉浸的心态把一件事做好，才能最终尝到「延迟满足」的滋味。</p><p>很感谢 2019 年最后一天我完成了 <a href="https://github.com/JalanJiang/2019-github-annual-report" target="_blank" rel="noopener">GitHub 年度报告</a>，这不是什么大项目，但在完成的过程中我经历了热情、懈怠、疲倦、放弃、重拾、收获几个过程，可谓是跌宕起伏了。这个项目让我尝到了甜头，让我在回顾 2019 时对自己有了更多的自信，也让我学会了如何调整心态，让自己更积极地面对生活中的「困倦期」。</p><p>2019 年的最后一个月我病了很久，一次病毒性感冒让我在两周中反复发烧，三进医院，直到今天我还在咳嗽，这个病依旧没有好全。2020 年我会把身体管理放在首要位置，未来还很长，不能在年轻时就把革命的本钱提前消耗殆尽。</p><h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>2019 年来到深圳后结识了很多新朋友，其中不乏许多大佬和有趣的人。</p><p>非常感谢遇到了现在的神仙舍友，在生活上对我照顾颇多。</p><p><img src="/img/in-post/2020/2019-bye/birthday.jpeg" alt="舍友下厨为我庆生"></p><p>年初离开厦门后，我在年底顺利地和<a href="http://gagalee.ink/" target="_blank" rel="noopener">佳爷</a>、<a href="https://csming1995.github.io/" target="_blank" rel="noopener">少棉</a>又见上面。除此之外，今年也顺利地和王总、应总实现了「一年一聚」之约。</p><p>感谢所有的朋友 2019 年听我吐了一年的苦水，感恩一直有你们鼓励我、督促我、陪着我。祝所有朋友 2020 年能一切顺利，未来都过上自己想要的生活。</p><p><img src="/img/in-post/2020/2019-bye/nan-xun-01.jpeg" alt="劝君更尽一杯酒"></p><p>最后的最后，也感谢自己从未放弃过自己。</p><h2 id="拔剑吧，2020"><a href="#拔剑吧，2020" class="headerlink" title="拔剑吧，2020"></a>拔剑吧，2020</h2><p>跨年是一件颇具仪式感的事。</p><p>2019 年的最后一天，我和<a href="http://csming1995.github.io/" target="_blank" rel="noopener">少棉</a>在深圳一起度过了告别 20 世纪 10 年代的跨年夜。这是我们在深圳的第一次跨年，在深圳湾吹着海风，听着一群陌生人喊着倒计时的数字。深圳湾没有烟花表演，黑漆漆一片，在人才公园的入口亦看不见繁华的香港。但在零点到来的时刻，听着陌生人大喊着「新年快乐」，迎接 2020 的一霎那有种莫名的幸福。</p><p>少棉曾经对我说「我们终于活下来了」，我把这句话写到了跨年的朋友圈文案里，还写了一句「我们有一万个去冒险的梦想，2019 年终于实现了一个」。</p><p>2019 年真的太难了，但我们也曾在 2019 年感慨「2018 年太难」，似乎进入成年人的世界后就再没有舒坦的日子。</p><p>但那又如何？2019 死里逃生，还怕些什么呢？</p><p><strong>拔剑吧 2020，我怕你个球</strong>。</p>]]></content>
    
    <summary type="html">
    
      拔剑吧，2020
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>手摸手制作一份 2019 年 GitHub 年度报告</title>
    <link href="http://jalan.space/2019/12/31/2019/2019-github-annual-report/"/>
    <id>http://jalan.space/2019/12/31/2019/2019-github-annual-report/</id>
    <published>2019-12-31T12:28:00.000Z</published>
    <updated>2020-01-02T12:35:16.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们即将与 2019 挥手作别，踏入崭新的 2020。一到年末，各个平台都在整理数据，出具一份属于自己平台的「年度报告」。而对于技术人而言，如果你是一位开源爱好者，GitHub 的年度报告就是你 2019 年的技术总结。</p><p>阮一峰老师曾在<a href="https://www.ruanyifeng.com/blog/2019/09/weekly-issue-73.html" target="_blank" rel="noopener">科技爱好者周刊</a>中提到「数据的力量」：</p><blockquote><p>GitHub 个人页有一个日历栏目，只要当天有代码提交，那一天的小方格就会变成绿色。如果这一年，你每天编码，日历就全是绿的，否则就会有白色的小方块。所有人都可以看到这个「编码日历」。很多人为了让绿色小方格子不要中断，就会尽量每天提交代码。时间一长，真的多做了不少项目。</p></blockquote><p>因此，这次年度报告我想主要针对这份「编码日历」，把你的「编码日历」组装到一张图片上展示给别人。</p><p>因为前一段时间正好在学习 <a href="https://graphql.cn/" target="_blank" rel="noopener">GraphQL</a>，所以将通过 GitHub 的接口 <a href="https://developer.github.com/v4/" target="_blank" rel="noopener">GitHub GraphQL API v4</a> 来获取相关的用户数据。</p><p>这份年度报告涉及到的主要技术：</p><ul><li>GraphQL</li><li>Python<ul><li><a href="https://2.python-requests.org//zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">requests</a>（发起请求）</li><li><a href="https://github.com/python-pillow/Pillow" target="_blank" rel="noopener">PIL</a>: Image/ImageDraw/ImageFont（图片处理）</li><li><a href="https://github.com/offu/WeRoBot" target="_blank" rel="noopener">werobot</a>（接入微信公众号）</li></ul></li></ul><h2 id="需求确立"><a href="#需求确立" class="headerlink" title="需求确立"></a>需求确立</h2><p>在开始 Coding 之前需要先梳理一下需求。生成报告的整个流程大致如下：</p><p><img src="/img/in-post/2019-github-annual-report/flow.png" alt="项目流程图"></p><p>因此，需要做的事包括：</p><ol><li>调通 GitHub GraphQL API v4，获取到需要的数据</li><li>对数据进行统计整理</li><li>设计一份年度报告</li><li>结合整理后的数据生成报告，并将最终报告返回给用户</li><li>接入微信公众平台，走通整个流程</li></ol><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="何为-GraphQL？"><a href="#何为-GraphQL？" class="headerlink" title="何为 GraphQL？"></a>何为 GraphQL？</h3><p>因为要通过 GitHub GraphQL API v4 获取数据，所以先来聊聊 GraphQL。</p><p>官方对于 GraphQL 的定义是：</p><blockquote><p>一种用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。</p></blockquote><p>这样说很抽象，大家可能对 <a href="https://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">RESTful</a> 比较熟悉些，那么我们就拿 <a href="">GitHub REST API v3</a> 与 GitHub GraphQL API v4 获取数据的方式做一个简单的对比，GraphQL 的特点自然就一目了然。</p><p>以获取用户数据为例，相关接口文档：</p><ul><li>REST API v3: Users：<a href="https://developer.github.com/v3/users/" target="_blank" rel="noopener">https://developer.github.com/v3/users/</a></li><li>GraphQL API v4: User：<a href="https://developer.github.com/v4/object/user/" target="_blank" rel="noopener">https://developer.github.com/v4/object/user/</a></li></ul><p>对于 RESTful 风格而言，自然是要发起一个 <code>GET</code> 请求。由于我们要获取某个<strong>指定用户</strong>的数据，所以需要在 PATH 中指定 <code>:username</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /users/:username</span><br></pre></td></tr></table></figure><p>请求成功后 GitHub 将会返回以下数据：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"login"</span>: <span class="string">"octocat"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"node_id"</span>: <span class="string">"MDQ6VXNlcjE="</span>,</span><br><span class="line">  <span class="attr">"avatar_url"</span>: <span class="string">"https://github.com/images/error/octocat_happy.gif"</span>,</span><br><span class="line">  <span class="attr">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://api.github.com/users/octocat"</span>,</span><br><span class="line">  <span class="attr">"html_url"</span>: <span class="string">"https://github.com/octocat"</span>,</span><br><span class="line">  <span class="attr">"followers_url"</span>: <span class="string">"https://api.github.com/users/octocat/followers"</span>,</span><br><span class="line">  <span class="attr">"following_url"</span>: <span class="string">"https://api.github.com/users/octocat/following&#123;/other_user&#125;"</span>,</span><br><span class="line">  <span class="attr">"gists_url"</span>: <span class="string">"https://api.github.com/users/octocat/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">  <span class="attr">"starred_url"</span>: <span class="string">"https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;"</span>,</span><br><span class="line">  <span class="attr">"subscriptions_url"</span>: <span class="string">"https://api.github.com/users/octocat/subscriptions"</span>,</span><br><span class="line">  <span class="attr">"organizations_url"</span>: <span class="string">"https://api.github.com/users/octocat/orgs"</span>,</span><br><span class="line">  <span class="attr">"repos_url"</span>: <span class="string">"https://api.github.com/users/octocat/repos"</span>,</span><br><span class="line">  <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/users/octocat/events&#123;/privacy&#125;"</span>,</span><br><span class="line">  <span class="attr">"received_events_url"</span>: <span class="string">"https://api.github.com/users/octocat/received_events"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"User"</span>,</span><br><span class="line">  <span class="attr">"site_admin"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"monalisa octocat"</span>,</span><br><span class="line">  <span class="attr">"company"</span>: <span class="string">"GitHub"</span>,</span><br><span class="line">  <span class="attr">"blog"</span>: <span class="string">"https://github.com/blog"</span>,</span><br><span class="line">  <span class="attr">"location"</span>: <span class="string">"San Francisco"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"octocat@github.com"</span>,</span><br><span class="line">  <span class="attr">"hireable"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bio"</span>: <span class="string">"There once was..."</span>,</span><br><span class="line">  <span class="attr">"public_repos"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"public_gists"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"followers"</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"following"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"created_at"</span>: <span class="string">"2008-01-14T04:33:35Z"</span>,</span><br><span class="line">  <span class="attr">"updated_at"</span>: <span class="string">"2008-01-14T04:33:35Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有时我们不需要这么多的数据，我们可能只想获取用户的头像地址。在 RESTful 风格的接口下，我们无法只获取某一条数据，但对于 GraphQL 接口，我们可以发起这样一条请求：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    user(login: "username") &#123;</span><br><span class="line">        avatarUrl</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，服务端将根据我们请求数据的格式，返回给我们对应的字段，即仅返回 <code>user</code> 下的 <code>avatarUrl</code> 数据：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"user"</span>:&#123;</span><br><span class="line">            <span class="attr">"avatarUrl"</span>:<span class="string">"url"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 RESTful 中，我们被迫接收服务端已组装好的数据，但 GraphQL 给了我们更多的自由，让我们可以只取所需。</strong></p><p>除此之外，RESTful 以资源划分接口，数据之间相对离散，如果想请求不同的资源则需要发起多次请求。而 GraphQL 的数据更具整体性，资源之间以<strong>图</strong>（即 Graph 名称的由来）的形式彼此关联，一次请求即可获取多种资源。</p><h3 id="构造-GraphQL-请求"><a href="#构造-GraphQL-请求" class="headerlink" title="构造 GraphQL 请求"></a>构造 GraphQL 请求</h3><p>我想要获取的数据主要有：</p><ol><li>用户名</li><li>用户在 2019 年每日的贡献情况</li><li>用户 Followers 数量</li></ol><p>根据接口文档 <a href="https://developer.github.com/v4/object/user/" target="_blank" rel="noopener">User</a> 与  <a href="https://developer.github.com/v4/object/contributionscollection/" target="_blank" rel="noopener">ContributionsCollection</a> 可知，这些数据都在 <code>user</code> 中，对应的字段如下：</p><ul><li>用户昵称：<code>name</code></li><li>Followers 数量：<code>followers.totalCount</code></li><li>编码日历：<code>contributionsCollection.contributionCalendar</code><ul><li>总贡献数量：<code>totalContributions</code></li><li>每周贡献情况：<code>weeks</code><ul><li>每日贡献情况：<code>contributionDays</code><ul><li>当天日历颜色：<code>color</code></li><li>当天贡献数：<code>contributionCount</code></li><li>当天日期：<code>date</code></li></ul></li></ul></li></ul></li></ul><p>因此，可以构造出如下 <code>query</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    user(login: "%s") &#123;</span></span><br><span class="line"><span class="string">        followers &#123;</span></span><br><span class="line"><span class="string">            totalCount</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        name</span></span><br><span class="line"><span class="string">        contributionsCollection(</span></span><br><span class="line"><span class="string">            from: "%s",</span></span><br><span class="line"><span class="string">            to: "%s"</span></span><br><span class="line"><span class="string">        ) &#123;</span></span><br><span class="line"><span class="string">            contributionCalendar &#123;</span></span><br><span class="line"><span class="string">                totalContributions</span></span><br><span class="line"><span class="string">                weeks &#123;</span></span><br><span class="line"><span class="string">                    contributionDays &#123;</span></span><br><span class="line"><span class="string">                        color</span></span><br><span class="line"><span class="string">                        contributionCount</span></span><br><span class="line"><span class="string">                        date</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">"""</span>% (github_id, begin, end)</span><br></pre></td></tr></table></figure><p>构造好 <code>query</code> 后，我们使用 <code>requests</code> 发起请求：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">access_token = <span class="string">"xxx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求 headers 带上 access_token</span></span><br><span class="line">headers = &#123;<span class="string">"Authorization"</span>: <span class="string">"bearer %s"</span> % access_token&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起请求</span></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">"https://api.github.com/graphql"</span>,</span><br><span class="line">    headers=headers,</span><br><span class="line">    json=&#123;<span class="string">'query'</span>: query&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>若请求成功，GitHub 会返回如下格式的 JSON 数据：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"user"</span>:&#123;</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"江不知"</span>,</span><br><span class="line">            <span class="attr">"followers"</span>:&#123;</span><br><span class="line">                <span class="attr">"totalCount"</span>:<span class="number">71</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"contributionsCollection"</span>:&#123;</span><br><span class="line">                <span class="attr">"contributionCalendar"</span>:&#123;</span><br><span class="line">                    <span class="attr">"totalContributions"</span>:<span class="number">2234</span>,</span><br><span class="line">                    <span class="attr">"weeks"</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"contributionDays"</span>:[</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">"color"</span>:<span class="string">"#c6e48b"</span>,</span><br><span class="line">                                    <span class="attr">"contributionCount"</span>:<span class="number">30</span>,</span><br><span class="line">                                    <span class="attr">"date"</span>:<span class="string">"2019-01-01"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><p>我主要针对 <code>weeks</code> 做了一些简单的数据统计。主要包括：</p><ul><li>有提交代码的天数（<code>contributionCount &gt; 0</code>）</li><li>连续提交代码的最大天数</li><li>完成贡献次数最多的日期</li></ul><p>这些数据对 <code>weeks</code> 进行一次遍历即可得出，在此不多做赘述。</p><h2 id="设计报告"><a href="#设计报告" class="headerlink" title="设计报告"></a>设计报告</h2><p>作为一个后端开发，真的没有多少设计天赋，说多了都是泪……</p><p>整份报告大致分成三个区域：</p><ol><li>头部 Title</li><li>Title 下的「编码日历」</li><li>中间部分显示一些分析数据</li><li>底部宣示主权</li></ol><p>反反复复改了多版，询问了很多朋友的意见，最后的结果依旧不是很好看……</p><p><img src="/img/in-post/2019-github-annual-report/template.png" alt="年度报告设计最终版"></p><h2 id="数据拼接"><a href="#数据拼接" class="headerlink" title="数据拼接"></a>数据拼接</h2><p>报告设计完成以后就可以把最终要展示的数据拼接到报告上了。</p><h3 id="绘制「编码日历」"><a href="#绘制「编码日历」" class="headerlink" title="绘制「编码日历」"></a>绘制「编码日历」</h3><p>在遍历 <code>weeks</code> 统计数据的过程中，可以顺便完成「编码日历」的绘制。</p><p>「编码日历」中的每一天就是一个小方块，方块的颜色我们已经从接口返回数据的 <code>color</code> 字段中获取到了。我选择使用 <code>line()</code> 绘制一条颜色为 <code>color</code> 的直线代表方块，把直线的 <code>width</code> 加粗，以获得方块的效果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">f = open(self.IMAGE_FILE_PATH, <span class="string">'rb'</span>)</span><br><span class="line">image = Image.open(f)</span><br><span class="line"><span class="comment"># 创建一个 draw 实例</span></span><br><span class="line">drawImage = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每周数据</span></span><br><span class="line"><span class="keyword">for</span> week <span class="keyword">in</span> weeks:</span><br><span class="line">    <span class="comment"># 遍历每日数据</span></span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> week[<span class="string">'contributionDays'</span>]:</span><br><span class="line">        <span class="comment"># 取出当天的颜色</span></span><br><span class="line">        color = day[<span class="string">'color'</span>] </span><br><span class="line">        <span class="comment"># 绘制直线</span></span><br><span class="line">        drawImage.line([(x_point, y_point), (x_point + square_width, y_point)], fill=color, width=square_width)</span><br><span class="line">        <span class="comment"># 改变下一个方格的 y 坐标</span></span><br><span class="line">        y_point += move_width</span><br><span class="line">    <span class="comment"># 改变下一个方格的 x 坐标</span></span><br><span class="line">    x_point += move_width</span><br><span class="line">    <span class="comment"># 下一周开始，y 坐标恢复原处</span></span><br><span class="line">    y_point = y_begin</span><br></pre></td></tr></table></figure><h3 id="粘贴文字"><a href="#粘贴文字" class="headerlink" title="粘贴文字"></a>粘贴文字</h3><p>报告的其他部分就主要是文字内容了，设置好字体、颜色等，使用 <code>text()</code> 在指定位置贴上文字。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"></span><br><span class="line">font_size = <span class="number">60</span></span><br><span class="line"><span class="comment"># 设置字体与字号</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">"./font/fzlt.ttf"</span>, font_size)</span><br><span class="line">font_color = <span class="string">"#F7FFF7"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标</span></span><br><span class="line">x, y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在图片写上文字</span></span><br><span class="line">draImage.text((x, y), <span class="string">"要显示的文字"</span>, fill=font_color, font=font)</span><br></pre></td></tr></table></figure><h2 id="接入公众号"><a href="#接入公众号" class="headerlink" title="接入公众号"></a>接入公众号</h2><p>公众号方面直接使用了开发框架 <a href="https://github.com/offu/WeRoBot" target="_blank" rel="noopener">WeRoBot</a>。</p><p>设定：当用户发送信息为「2019 $github_id」时触发生成年度报告。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line"></span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">'token'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回复包含指定文本的信息</span></span><br><span class="line"><span class="meta">@robot.filter(re.compile("2019(\s)+(.*)?"))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">annual_report</span><span class="params">(message, session, match)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">        <span class="comment"># do something...</span></span><br></pre></td></tr></table></figure><p>生成年度报告后，我们使用微信的<a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/New_temporary_materials.html" target="_blank" rel="noopener">新增临时素材</a>接口上传报告图片，并获取到临时素材的编号 <code>media_id</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werobot.client <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">"APP_ID"</span>: <span class="string">"app_id"</span>,</span><br><span class="line">    <span class="string">"APP_SECRET"</span>: <span class="string">"app_secret"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client = Client(config)</span><br><span class="line"><span class="comment"># 上传临时素材</span></span><br><span class="line">response = client.upload_media(<span class="string">'image'</span>, image) <span class="comment"># image 为生成的报告图片</span></span><br><span class="line"><span class="comment"># 获取临时素材 ID</span></span><br><span class="line">media_id = response[<span class="string">'media_id'</span>]</span><br></pre></td></tr></table></figure><p>然后，我们再将这一图片信息返回给用户：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werobot.replies <span class="keyword">import</span> ImageReply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要返回的图片数据</span></span><br><span class="line">reply = ImageReply(message=message, media_id=media_id)</span><br><span class="line"><span class="keyword">return</span> reply</span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>当用户在公众号发送 <code>2019+空格+github_id</code> 时，将返回 <code>github_id</code> 所对应的报告。最终生成的报告如下：</p><p><img src="/img/in-post/2019-github-annual-report/result.png" alt="我的 2019 GitHub 年度报告"></p><p>源码见 GitHub 仓库：<a href="https://github.com/JalanJiang/2019-github-annual-report" target="_blank" rel="noopener">https://github.com/JalanJiang/2019-github-annual-report</a></p><p>接入的服务器为辣鸡配置，还请各位大佬手下留情。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程涉及到微信公众号和 GitHub 接口的调用，用户从输入到数据返回需要等待几秒的时间。为了避免超时的尴尬情况，这里只对用户提交记录做了简单的分析。</p><p>在完成这个项目的过程中几度因为设计出的报告太丑而想要放弃，感谢几位朋友一直鼓励我、给我提出修改意见才让我坚持了下来。</p><p>2019 年再见啦，希望 2020 年能尝试更多有趣的事情。:)</p>]]></content>
    
    <summary type="html">
    
      你有一份 2019 年技术总结待查收
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Python" scheme="http://jalan.space/tags/Python/"/>
    
      <category term="GitHub" scheme="http://jalan.space/tags/GitHub/"/>
    
      <category term="GraphQL" scheme="http://jalan.space/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法与正确性归纳证明</title>
    <link href="http://jalan.space/2019/12/11/2019/greedy/"/>
    <id>http://jalan.space/2019/12/11/2019/greedy/</id>
    <published>2019-12-11T15:05:00.000Z</published>
    <updated>2019-12-11T15:12:35.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>贪心算法就是让计算机模拟一个「贪心的人」来做出决策。这个贪心的人是目光短浅的，他每次总是：</p><ul><li>只做出<strong>当前看来最好的选择</strong></li><li><strong>只看眼前的利益，而不考虑做出选择后对未来造成的影响</strong></li></ul><p>并且他一旦做出了选择，就没有办法反悔（不可回溯），所以为了利益最大化，他需要保证绝不能做出错误的选择。</p><p>贪心算法不是从整体最优的角度上考虑问题，而是只在意某种意义上的局部最优解。因此，贪心算法并不能保证在所有情况下都能获得最优解。所以在使用贪心算法时，<strong>我们需要确保自己能证明最优解的正确性</strong>。</p><h2 id="贪心性质"><a href="#贪心性质" class="headerlink" title="贪心性质"></a>贪心性质</h2><p>可以用贪心算法解决的题目需要满足以下性质：</p><ul><li>最优子结构：一个问题的最优解包含其子问题的最优解</li><li>贪心选择性：所求问题的整体最优解可以通过一系列局部最优的选择来到达，即通过贪心选择来达到</li></ul><h2 id="证明方法"><a href="#证明方法" class="headerlink" title="证明方法"></a>证明方法</h2><p><strong>贪心算法最难的部分从不在于问题的求解，而在于正确性的证明</strong>，常用的证明方法有<strong>归纳法</strong>和<strong>交换论证法</strong>。</p><ul><li>归纳法：对算法进行<strong>步数归纳</strong>或<strong>问题规模归纳</strong></li><li>交换论证法：从最优解出发，在保证最优性不变的前提下，从一个最优解进行逐步替换，从而得到贪心策略的解</li></ul><p>因篇幅有限，本篇我们主要说说归纳证明。归纳证明的本质其实就是<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95" title="数学归纳法" target="_blank" rel="noopener">数学归纳法</a>，我们先来复习下数学归纳法吧。</p><h2 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h2><p>数学归纳法（<em>Mathematical Induction</em>）是一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8%E8%AD%89%E6%98%8E" title="数学证明" target="_blank" rel="noopener">数学证明</a>方法，通常被用于证明某个给定命题在整个（或者局部）自然数范围内成立。</p><h3 id="证明步骤"><a href="#证明步骤" class="headerlink" title="证明步骤"></a>证明步骤</h3><p>最简单和常见的数学归纳法是证明当 n 等于任意一个自然数时某命题成立。证明分下面两步：</p><ol><li>证明当 <code>n = 1</code> 时，命题成立</li><li>证明如果在 <code>n = m</code>（m 为任意自然数）时命题成立，那么可以推导出 <code>n = m + 1</code> 时命题也成立</li></ol><p><strong>1 为归纳基础，2 为归纳步骤</strong>。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>该方法的原理在于：一旦我们证明了在某个起点值（例如 <code>n = 1</code>）时命题成立，且证明出从一个值到下一个值的过程有效（即 <code>n = m</code> 到 <code>n = m + 1</code>），那么任意值都可以通过反复使用这个方法推导出来。即：</p><p>$$P(1) 为真，$$</p><p>$$且 \forall n, P(n) 为真 \to P(n + 1) 为真$$</p><p>那么：</p><p>$$n = 1, P(1) 为真 \to P(2) 为真$$</p><p>$$n = 2, P(2) 为真 \to P(3) 为真$$</p><p>$$……$$</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>如果我们要证明对于任意自然数，都满足：</p><p>$$1 + 2 + … + n = \frac {n \times (1 + n)}{2}$$</p><h4 id="归纳基础"><a href="#归纳基础" class="headerlink" title="归纳基础"></a>归纳基础</h4><p>找到起始点，即 <code>n = 1</code> 时，此时等式左侧等于 1，右侧等于：</p><p>$$\frac {1 \times (1 + 1)}{2} = \frac {2}{2} = 1$$</p><p>左右两侧相等，因此在 <code>n = 1</code> 时，命题成立。</p><h4 id="归纳步骤"><a href="#归纳步骤" class="headerlink" title="归纳步骤"></a>归纳步骤</h4><p>先假设：对于任意自然数 n 命题均成立。</p><p>那么，当 <code>n = n + 1</code> 时：</p><p>$$1 + 2 + … + (n + 1)$$</p><p>$$= (1 + 2 + … + n) + (n + 1)$$</p><p>$$= \frac {n \times (1 + n)}{2} + (n + 1)$$</p><p>$$= \frac {n \times (1 + n)}{2} + \frac{2 \times (n + 1)}{2}$$</p><p>$$= \frac{(n + 1) \times (n + 2)}{2}$$</p><p>因此，在 <code>n = n + 1</code> 时，命题也成立。证毕。</p><h2 id="算法正确性归纳证明"><a href="#算法正确性归纳证明" class="headerlink" title="算法正确性归纳证明"></a>算法正确性归纳证明</h2><p>归纳证明的证明步骤如下：</p><ol><li>叙述一个有关自然数 <code>n</code> 的命题，该命题断定贪心策略的执行最终将导致最优解，其中自然数 <code>n</code> 可以代表<strong>算法步数</strong>或者<strong>问题规模</strong>。</li><li>证明该问题对所有自然数为真</li></ol><p>其中，步骤二使用数学归纳法证明，即践行归纳基础与归纳步骤。</p><p>下面我们就来看下如何使用归纳法来证明 Kruskal 算法的正确性。</p><h2 id="Kruskal-最小生成树"><a href="#Kruskal-最小生成树" class="headerlink" title="Kruskal 最小生成树"></a>Kruskal 最小生成树</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E9%B2%81%E6%96%AF%E5%85%8B%E5%B0%94%E6%BC%94%E7%AE%97%E6%B3%95" title="Kruskal 算法" target="_blank" rel="noopener">Kruskal 算法</a>是一种常见并且好写的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" title="最小生成树" target="_blank" rel="noopener">最小生成树</a>算法，由 Kruskal 发明。该算法基于贪心思想，基本思想是<strong>从小到大加入边</strong>。</p><h3 id="主要思想-1"><a href="#主要思想-1" class="headerlink" title="主要思想"></a>主要思想</h3><ol><li>将图的<strong>边按权值大小</strong>从小到大依次选取</li><li>选取权值最小的边 edge，假设构成该边的两个点为 (point1, point2)，如果 point1 和 point2 已在一个连通图中，则舍弃该边；否则讲该边加入最小生成树中</li><li>重复步骤 2，直到构成最小生成树为止</li></ol><p><img src="/img/in-post/greedy.gif" alt="图源：维基百科"></p><h3 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h3><h4 id="叙述命题"><a href="#叙述命题" class="headerlink" title="叙述命题"></a>叙述命题</h4><p>首先，给出命题：对于任意 n，该算法对 n 阶图都能得到一棵最小生成树。</p><h4 id="归纳基础-1"><a href="#归纳基础-1" class="headerlink" title="归纳基础"></a>归纳基础</h4><p>当 <code>n = 2</code> 时，此时只有一条边，命题显然为真。</p><h4 id="归纳步骤-1"><a href="#归纳步骤-1" class="headerlink" title="归纳步骤"></a>归纳步骤</h4><p>假设对于 n 个顶点的图，该算法正确，考虑 n + 1 个定点的图 $G$，假设 $G$ 中最小边权为 $e = {i, j}$。</p><p>此时，在图 $G$ 中连接点 $i$ 与点 $j$，得到图 $G’$。</p><p>根据归纳假设，由算法可推出：存在 $G’$ 的最小生成树 $T’$。令 $T = T’ \bigcup {e}$，则 $T$ 是关于 $G$ 的最小生成树。</p><p><strong>反证</strong>：若 $T$ 不是 $G$ 的最小生成树，那么必然存在某包含 $e$ 边的最小生成树 $T^<em>$，使得 $W(T^</em>) &lt; W(T)$（即 $T^*$ 的边权小于 $T$）。</p><p>此时，在 $T^<em>$ 中删除 $e$ 边，可得到 G’ 的最小生成树 $T^</em> - {e}$，且有：</p><p>$$<br>W(T^* - {e}) =</p><p>W(T^*) - w(e) &lt;</p><p>W(T) - w(e) =</p><p>W(T’)<br>$$</p><p>该表达式与 $T’$ 是最优解相互矛盾，所以 $T$ 必然是 $G$ 的最小生成树，证毕。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>贪心算法不是从整体最优的角度上考虑问题，而是只考虑某种意义上的局部最优解，不可回溯，不考虑后果</li><li>可以用贪心解答的题目需要满足<strong>最优子结构</strong>与<strong>贪心选择性</strong></li><li>贪心算法并不能保证在所有情况下都能获得最优解，所以在使用贪心算法时需要证明算法的正确性，常见的证明方法有<strong>归纳法</strong>与<strong>交换论证法</strong></li><li>数学归纳法通常被用于证明某个给定命题在整个（或者局部）自然数范围内成立，证明过程为<strong>归纳基础</strong>+<strong>归纳步骤</strong></li><li>归纳证明需先给出命题，再用数学归纳法证明该命题对所有自然数为真</li></ul><p><img src="/img/qrcode/wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      贪心算法最难的部分从不在于问题的求解，而在于正确性的证明。
    
    </summary>
    
      <category term="技多不压身" scheme="http://jalan.space/categories/%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/"/>
    
    
      <category term="算法" scheme="http://jalan.space/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Go 语言中的面向对象编程</title>
    <link href="http://jalan.space/2019/12/02/2019/go-oop/"/>
    <id>http://jalan.space/2019/12/02/2019/go-oop/</id>
    <published>2019-12-02T12:40:00.000Z</published>
    <updated>2019-12-02T12:40:48.450Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在 Go 语言中没有类（Class）的概念，但这并不意味着 Go 语言不支持<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="面向对象编程" target="_blank" rel="noopener">面向对象编程</a>，毕竟面向对象只是一种编程思想。</p><p>让我们回忆一下面向对象的三大基本特征：</p><ol><li>封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式</li><li>继承：使得子类具有父类的属性和方法或者重新定义、追加属性和方法等</li><li>多态：不同对象中同种行为的不同实现方式</li></ol><p>我们一起来看看 Go 语言是如何在没有类（Class）的情况下实现这三大特征的。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="「类」"><a href="#「类」" class="headerlink" title="「类」"></a>「类」</h3><p>在 Go 语言中可以使用<a href="https://gobyexample.com/structs" title="结构体" target="_blank" rel="noopener">结构体</a>（<em>Structs</em>）对属性进行封装，结构体就像是类的一种简化形式。</p><p>例如，我们要定义一个矩形，每个矩形都有长和宽，我们可以这样进行封装：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">Length <span class="keyword">int</span></span><br><span class="line">Width <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>既然有了「类」，你可能会问了，那「类」的<strong>方法</strong>在哪呢？</p><p>Go 语言中也有<a href="https://gobyexample.com/methods" title="方法" target="_blank" rel="noopener">方法</a>（<em>Methods</em>）：<strong>Go 方法是作用在接收者（<em>receiver</em>）上的一个函数，接收者是某种类型的变量。因此方法是一种特殊类型的函数。</strong></p><p>定义方法的格式如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv receiver_type)</span> <span class="title">methodName</span><span class="params">(parameter_list)</span> <span class="params">(return_value_list)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>上文中我们已经定义了一个矩形 <code>Rectangle</code>，现在我们要定义一个方法 <code>Area()</code> 来计算它的面积：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩形结构体</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">Length <span class="keyword">int</span></span><br><span class="line">Width  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算矩形面积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Length * r.Width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := Rectangle&#123;<span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// 调用 Area() 方法，计算面积</span></span><br><span class="line">fmt.Println(r.Area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码片段输出结果为 8。</p><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>我们常会说一个类的属性是<strong>公共</strong>的还是<strong>私有</strong>的，在其他编程语言中，我们常用 <code>public</code> 与 <code>private</code> 关键字来表达这样一种访问权限。</p><p>在 Go 语言中没有 <code>public</code>、<code>private</code>、<code>protected</code> 这样的访问控制修饰符，它是<strong>通过字母大小写来控制可见性</strong>的。</p><p>如果定义的常量、变量、类型、接口、结构、函数等的名称是大写字母开头，这表示它们能被<strong>其它包</strong>访问或调用（相当于 <code>public</code>）；非大写开头就只能在<strong>包内使用</strong>（相当于 <code>private</code>）。</p><h3 id="访问未导出字段"><a href="#访问未导出字段" class="headerlink" title="访问未导出字段"></a>访问未导出字段</h3><p>当遇到<strong>只能在包内使用的未导出字段</strong>时，我们又该如何访问呢？</p><p>和其他面向对象语言一样，Go 语言也有实现 <code>getter</code> 和 <code>setter</code> 的方式：</p><ul><li>对于 <code>setter</code> 方法使用 <code>Set</code> 前缀</li><li>对于 <code>getter</code> 方法<strong>只使用成员名</strong></li></ul><p>例如我们现在有一个处于 <code>person</code> 包中的 <code>Person</code> 结构体：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> person</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">firstName <span class="keyword">string</span></span><br><span class="line">lastName  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，它的两个成员变量都是<strong>非大写字母开头</strong>，只能在包内使用，现在我们为其中的 <code>firstName</code> 来定义 <code>setter</code> 与 <code>getter</code> ：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 firstName</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">FirstName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.firstName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 firstName</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">SetFirstName</span><span class="params">(newName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">p.firstName = newName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们就可以在 <code>main</code> 包里设置和获取 <code>firstName</code> 的值了：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"./person"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := <span class="built_in">new</span>(person.Person)</span><br><span class="line">p.SetFirstName(<span class="string">"firstName"</span>)</span><br><span class="line">fmt.Println(p.FirstName())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">firstName</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在 Go 语言中没有 <code>extends</code> 关键字，它使用<strong>在结构体中内嵌匿名类型</strong>的方法来实现继承。</p><blockquote><p>匿名类型：即这些类型没有显式的名字。</p></blockquote><p>我们定义一个 <code>Engine</code> 接口类型，一个 <code>Car</code> 结构体，让 <code>Car</code> 结构体包含一个 <code>Engine</code> 类型的匿名字段：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Engine <span class="keyword">interface</span> &#123;</span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Engine <span class="comment">// 包含 Engine 类型的匿名字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，匿名字段 <code>Engine</code> 上的方法「<strong>晋升</strong>」成为了外层类型 <code>Car</code> 的方法。我们可以构建出如下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Car)</span> <span class="title">GoToWorkIn</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// get in car</span></span><br><span class="line">c.Start()</span><br><span class="line"><span class="comment">// drive to work</span></span><br><span class="line">c.Stop()</span><br><span class="line"><span class="comment">// get out of car</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>在面向对象中，多态的特征为：<strong>不同对象中同种行为的不同实现方式</strong>。在 Go 语言中可以使用<a href="https://gobyexample.com/interfaces" title="接口" target="_blank" rel="noopener">接口</a>实现这一特征。</p><p>我们先定义一个正方形 <code>Square</code> 和一个长方形 <code>Rectangle</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正方形</span></span><br><span class="line"><span class="keyword">type</span> Square <span class="keyword">struct</span> &#123;</span><br><span class="line">side <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长方形</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">length, width <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们希望可以计算出这两个几何图形的面积。但由于他们的面积计算方式不同，我们需要定义两个不同的 <code>Area()</code> 方法。</p><p>于是，我们可以定义一个包含 <code>Area()</code> 方法的接口 <code>Shaper</code>，让 <code>Square</code> 和 <code>Rectangle</code> 都实现这个接口里的 <code>Area()</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口 Shaper</span></span><br><span class="line"><span class="keyword">type</span> Shaper <span class="keyword">interface</span> &#123;</span><br><span class="line">Area() <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算正方形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sq *Square)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float32</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sq.side * sq.side</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算长方形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float32</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.length * r.width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在 <code>main()</code> 函数中这样调用 <code>Area()</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := &amp;Rectangle&#123;<span class="number">10</span>, <span class="number">2</span>&#125;</span><br><span class="line">q := &amp;Square&#123;<span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Shaper 类型的数组</span></span><br><span class="line">shapes := []Shaper&#123;r, q&#125;</span><br><span class="line"><span class="comment">// 迭代数组上的每一个元素并调用 Area() 方法</span></span><br><span class="line"><span class="keyword">for</span> n, _ := <span class="keyword">range</span> shapes &#123;</span><br><span class="line">fmt.Println(<span class="string">"图形数据: "</span>, shapes[n])</span><br><span class="line">fmt.Println(<span class="string">"它的面积是: "</span>, shapes[n].Area())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">图形数据:  &amp;&#123;10 2&#125;</span></span><br><span class="line"><span class="comment">它的面积是:  20</span></span><br><span class="line"><span class="comment">图形数据:  &amp;&#123;10&#125;</span></span><br><span class="line"><span class="comment">它的面积是:  100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>由以上代码输出结果可知：<strong>不同对象调用 <code>Area()</code> 方法产生了不同的结果</strong>，展现了多态的特征。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>面向对象的三大特征是：封装、继承和多态</li><li>Go 语言使用<strong>结构体</strong>对属性进行封装，结构体就像是类的一种简化形式</li><li>在 Go 语言中，方法是作用在接收者（<em>receiver</em>）上的一个函数，接收者是某种类型的变量</li><li>名称首字母的大小写决定了该变量/常量/类型/接口/结构/函数……能否被外部包导入</li><li>无法被导入的字段可以使用 <code>getter</code> 和 <code>setter</code> 的方式来访问</li><li>Go 语言使用<strong>在结构体中内嵌匿名类型</strong>的方法来实现继承</li><li>使用接口可以实现多态</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Go 入门指南》: _<a href="https://github.com/unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">https://github.com/unknwon/the-way-to-go_ZH_CN</a>_</li></ul><hr><p><img src="/img/qrcode/wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      面向对象三大特征以及在 Go 中的表现方式
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出：举个例子解读原码、反码与补码</title>
    <link href="http://jalan.space/2019/11/26/2019/binary-show/"/>
    <id>http://jalan.space/2019/11/26/2019/binary-show/</id>
    <published>2019-11-26T07:29:00.000Z</published>
    <updated>2019-11-26T14:15:41.470Z</updated>
    
    <content type="html"><![CDATA[<p>先来看一道 Go 语言中简单的运算题：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> a <span class="keyword">int8</span> = <span class="number">-128</span></span><br><span class="line">        <span class="keyword">var</span> b = a / <span class="number">-1</span></span><br><span class="line">        fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Go 语言中，<code>int8</code> 代表<strong>有符号</strong> 8 位整数。你觉得输出结果是什么呢？我们在文末再公布答案，在此之前，我们先来回顾一下有符号整数是什么。</p><h2 id="有符号整数"><a href="#有符号整数" class="headerlink" title="有符号整数"></a>有符号整数</h2><p>一个数在计算机中的<strong>二进制表示</strong>称为<strong>机器数</strong>，这个机器数是带符号的。它的最高位是符号位，0 代表正数，1 代表负数。</p><p>以 8 位有符号整数为例，<code>0000 0001</code> 代表十进制中的 1，<code>1000 0001</code> 则代表十进制中的 -1。</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/26/16ea804b49ccf4ba?w=768&amp;h=336&amp;f=png&amp;s=23988" alt=""></p><p>那么，你可能会问了：这样一来，8 位有符号整数的可表达范围应当是 [<code>1111 1111</code>, <code>0111 1111</code>]，即 [-127, 127]，但实际上它的可表达范围却是 [-128, 127]，那么 -128 又从何而来呢？</p><p>想要理解 -128 的来历，我们还要知道原码、反码和补码的概念。</p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p>计算机需要使用特定的编码方式存储数据，原码、反码和补码都是一种特定的编码方式。以下示例均以 8 位二进制数举例。</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码是「未经更改的码」，指一个<strong>二进制数左边加上符号位</strong>后所得到的码。</p><ul><li>当二进制数大于 0 时，符号位为 0</li><li>当二进制数小于 0 时，符号位为 1</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/11/26/16ea804b44bd180d?w=650&amp;h=372&amp;f=png&amp;s=13007" alt="-127 和 127 的原码表示"></p><p>因此，用这种编码方式表示有符号的 8 位二进制数，它的取值范围是 [<code>1111 1111</code>, <code>0111 1111</code>]，即 [-127, 127]。</p><p>如果我们使用原码计算 <code>(+1) + (-1)</code> 会得到什么结果呢？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(+1) + (-1) = </span><br><span class="line"></span><br><span class="line">0000 0001（原码） </span><br><span class="line">+</span><br><span class="line">1000 0001（原码）</span><br><span class="line">=</span><br><span class="line">1000 0010（原码） </span><br><span class="line">=</span><br><span class="line">(-2)</span><br></pre></td></tr></table></figure><p>What? 等于 -2 了？这显然是错误的答案。</p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>为了解决「正负数相加」的问题，人类又发明了<strong>反码</strong>。</p><p>反码的表示方式为：</p><ul><li>正数的反码等于它的原码</li><li>负数的反码则保留其原码符号位，然后对其他位进行取反操作</li></ul><blockquote><p>取反操作：将 0 变为 1，1 变为 0。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/11/26/16ea804b4593fb28?w=885&amp;h=586&amp;f=png&amp;s=46240" alt="原码 -&gt; 反码"></p><p>此时，用反码来计算 <code>(+1) + (-1)</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(+1) + (-1) = </span><br><span class="line"></span><br><span class="line">0000 0001（反码） </span><br><span class="line">+</span><br><span class="line">1111 1110（反码） </span><br><span class="line">= </span><br><span class="line">1111 1111（反码） </span><br><span class="line">=</span><br><span class="line">(-0)</span><br></pre></td></tr></table></figure><p>我们知道，0 的原码是 <code>0000 0000</code> 或 <code>1000 0000</code>，0 的反码就是 <code>0000 0000</code> 或 <code>1111 1111</code>。即在反码中，<code>1111 1111</code> 象征 <code>-0</code>，我们终于求出了正确的结果。</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>但反码的表示方法中存在着 <code>+0</code> 和 <code>-0</code> 两个零，我们希望只有一个 0，所以<strong>补码</strong>[^3]出现了。</p><p>补码的表示方式为：</p><ul><li>正数的补码是其本身</li><li>负数的补码是在它的反码基础上加 1</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/11/26/16ea804b4c51d596?w=899&amp;h=832&amp;f=png&amp;s=68376" alt="原码 -&gt; 反码 -&gt; 补码"></p><p>由于 <code>+1</code> 的操作，必将出现进位，<strong>如果进位超过长度限制，最高位就会丢失</strong>。</p><p>会发生最高位丢失的数就是 <code>-0</code> 的反码表示 <code>1111 1111</code>，它的补码为 <code>1 0000 0000</code>。由于长度是 8 位，最高位的 1 已经溢出，所以丢弃，<code>-0</code> 的补码就成了 <code>0000 0000</code>，和刚才我们所提到的 <code>+0</code> 完美重合了！</p><p>用补码来计算 <code>(+1) + (-1)</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(+1) + (-1) = </span><br><span class="line"></span><br><span class="line">0000 0001（补码） </span><br><span class="line">+</span><br><span class="line">1111 1111（补码） </span><br><span class="line">= </span><br><span class="line">0000 0000（补码） </span><br><span class="line">=</span><br><span class="line">(0)</span><br></pre></td></tr></table></figure><p>答案正确！</p><p><strong>因此，计算机内部使用补码方式表示负数，因为它让「正数 + 负数」也能使用同一套加法规则，使得所有的加法运算可以使用同一种电路完成。</strong></p><h2 id="128-的由来"><a href="#128-的由来" class="headerlink" title="-128 的由来"></a>-128 的由来</h2><p>上面我们说到如果用补码的方式进行表示，<code>-0</code> 就不存在了，为了让有限的位数尽可能表示更多的数，省下的 <code>1000 0000</code> 就用来表示 <code>-128</code> 了。</p><p>让我们用补码来计算一下 <code>(-1) + (-127)</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(-1) + (-127) = </span><br><span class="line"></span><br><span class="line">1000 0001（原码）+</span><br><span class="line">1111 1111（原码）</span><br><span class="line">=</span><br><span class="line">1111 1110（反码）+</span><br><span class="line">1000 0000（反码）</span><br><span class="line">=</span><br><span class="line">1111 1111（补码）+</span><br><span class="line">1000 0001（补码） </span><br><span class="line">=</span><br><span class="line">1 1000 0000（补码）</span><br><span class="line">=</span><br><span class="line">1000 0000（丢弃最高位）</span><br><span class="line">= </span><br><span class="line">(-128)</span><br></pre></td></tr></table></figure><p><code>(-1) + (-127)</code> 的结果正是 -128。但由于 <code>1000 0000</code> 是 <code>-0</code> 的补码，所以 <code>-128</code> 没有与之对应的原码和反码表示。</p><h2 id="公布答案"><a href="#公布答案" class="headerlink" title="公布答案"></a>公布答案</h2><p>好了，让我们再回头看一下开头的那段代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> a <span class="keyword">int8</span> = <span class="number">-128</span></span><br><span class="line">        <span class="keyword">var</span> b = a / <span class="number">-1</span></span><br><span class="line">        fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见了：<code>int8</code> 的可表示范围是 <code>[-128, 127]</code>，所以可以被赋值为 -128。而 <code>(-128) / (-1) = 128</code> 显然超过了该表示范围，+128 用有符号整数表示需要 9 位，表示为 <code>0 1000 0000</code>，最高位的 0 已经溢出，所以丢弃，导致结果是 <code>1000 0000</code>，即 -128。</p><p>所以这段代码的输出结果就是 -128 啦~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>int8</code> 表示有符号 8 位整数，它的可表示范围是 <code>[-128, 127]</code></li><li>计算机内部使用补码方式表示负数</li><li>补码解决了 <code>+0</code> 和 <code>-0</code> 并存的问题，并省下 <code>-0</code> 的表示方法，多表示了一个最低数 -128</li><li>补码使得所有整数集都能使用同一套加法规则</li><li>如果发生溢出，多出的高位将被截取</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E7%A0%81" target="_blank" rel="noopener">维基百科-原码</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%8F%8D%E7%A0%81" target="_blank" rel="noopener">维基百科-反码</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E7%A0%81" target="_blank" rel="noopener">维基百科-补码</a> </li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://mp.weixin.qq.com/s/5_ly1EqGShhLKsNHr8fzwA" target="_blank" rel="noopener">聊聊 Go 语言中的字符表示与字符串遍历</a></li><li><a href="https://mp.weixin.qq.com/s/wAjlIFZ3d9rnTU2QGyxniw" target="_blank" rel="noopener">认识 Go 语言中的数组</a></li></ul><hr><p><img src="/img/qrcode/wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      计算机中为什么使用补码表示负数呢？
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>认识 Go 语言中的数组</title>
    <link href="http://jalan.space/2019/11/21/2019/go-array/"/>
    <id>http://jalan.space/2019/11/21/2019/go-array/</id>
    <published>2019-11-21T12:59:00.000Z</published>
    <updated>2019-11-21T13:22:56.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数组是具有<strong>相同唯一类型</strong>的一组<strong>已编号</strong>且<strong>长度固定</strong>的数据项序列。</p></blockquote><h2 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h2><p>在 Go 语言中，数组的声明方式为 <code>var identifier [len]type</code>。</p><p>声明时没有指定数组的初始化值，因此所有的元素都会被<strong>自动初始化为默认值 0</strong>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">var</span> a1 [<span class="number">5</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>Go 语言中的数组是值类型，因此还可以用 <code>new</code> 来创建：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a2 = <span class="built_in">new</span>([<span class="number">5</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p><code>new</code> 返回类型的指针，因此 <code>a1</code> 与 <code>a2</code> 的区别在于：<code>a1</code> 的类型为 <code>[5]int</code>，<code>a2</code> 的类型为 <code>*[5]int</code>。</p><h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>我们通过在 <code>{}</code> 中填写初始化值来初始化数组。</p><h3 id="指明数组长度"><a href="#指明数组长度" class="headerlink" title="指明数组长度"></a>指明数组长度</h3><p>指明数组的长度 <code>len</code>，然后在 <code>{}</code> 中填写初始化值，这些值会按下标从小到大的顺序分配。</p><p>初始化值的个数不允许超过长度 <code>len</code>。当初始化值的个数小于 <code>len</code> 时，未被初始化的位置等于默认值 0。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组长度为 5，初始化了前两个数，未初始化的位是 0</span></span><br><span class="line">b := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; </span><br><span class="line"><span class="keyword">for</span> index, val := <span class="keyword">range</span> b &#123;</span><br><span class="line">fmt.Printf(<span class="string">"下标 = %d, 值 = %d\n"</span>, index, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">下标 = 0, 值 = 1</span></span><br><span class="line"><span class="comment">下标 = 1, 值 = 2</span></span><br><span class="line"><span class="comment">下标 = 2, 值 = 0</span></span><br><span class="line"><span class="comment">下标 = 3, 值 = 0</span></span><br><span class="line"><span class="comment">下标 = 4, 值 = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>{index1: a, index2: b}</code> 的方式初始化数组，指明数组的索引和对应的下标值，未指明的下标所在位置的值等于默认值 0：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过数组索引初始化</span></span><br><span class="line"><span class="comment">// d[0] = 1, d[2] = 3，其他位置等于 0</span></span><br><span class="line">d := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">3</span>&#125; </span><br><span class="line"><span class="keyword">for</span> index, val := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Printf(<span class="string">"下标 = %d, 值 = %d\n"</span>, index, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">下标 = 0, 值 = 1</span></span><br><span class="line"><span class="comment">下标 = 1, 值 = 0</span></span><br><span class="line"><span class="comment">下标 = 2, 值 = 3</span></span><br><span class="line"><span class="comment">下标 = 3, 值 = 0</span></span><br><span class="line"><span class="comment">下标 = 4, 值 = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="暗示数组长度"><a href="#暗示数组长度" class="headerlink" title="暗示数组长度"></a>暗示数组长度</h3><p>初始化时你也可以不直接指明数组的长度，而是使用 <code>[...]</code> 代替。和指明数组长度时相同，此时也可以使用顺序填写和指定索引两种方式来初始化数组。</p><p>当使用 <code>{a, b, c}</code> 方式传递初始化值时，Go 语言将<strong>通过初始化元素的个数来确定数组的长度</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过传递初始化值确定数组长度</span></span><br><span class="line"><span class="comment">// 传递了 5 个元素，数组长度为 5</span></span><br><span class="line">c := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;  </span><br><span class="line"><span class="keyword">for</span> index, val := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">"下标 = %d, 值 = %d\n"</span>, index, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">下标 = 0, 值 = 1</span></span><br><span class="line"><span class="comment">下标 = 1, 值 = 2</span></span><br><span class="line"><span class="comment">下标 = 2, 值 = 3</span></span><br><span class="line"><span class="comment">下标 = 3, 值 = 4</span></span><br><span class="line"><span class="comment">下标 = 4, 值 = 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>若通过指明数组的索引和对应的值来初始化数组，此时数组的长度就等于 <code>最大索引数 + 1</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 最大索引是 9，所以数组的长度为 10</span><br><span class="line">e := [...]int&#123;9: 10&#125; </span><br><span class="line">for index, val := range e &#123;</span><br><span class="line">fmt.Printf(&quot;下标 = %d, 值 = %d\n&quot;, index, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Output:</span><br><span class="line">下标 = 0, 值 = 0</span><br><span class="line">下标 = 1, 值 = 0</span><br><span class="line">下标 = 2, 值 = 0</span><br><span class="line">下标 = 3, 值 = 0</span><br><span class="line">下标 = 4, 值 = 0</span><br><span class="line">下标 = 5, 值 = 0</span><br><span class="line">下标 = 6, 值 = 0</span><br><span class="line">下标 = 7, 值 = 0</span><br><span class="line">下标 = 8, 值 = 0</span><br><span class="line">下标 = 9, 值 = 10</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>在 Go 语言中使用 <code>for ... range</code> 遍历数组：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i 是数组索引</span></span><br><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> arr1 &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h2><p>和 C/C++ 不同，Go 语言的数组是<strong>值类型</strong>的。这样一来，<strong>赋值和传参都会复制整个数组，而不是指针</strong>。</p><p>我们初始化一个数组 <code>a</code>，并把它赋值给数组 <code>b</code>，然后打印两者的值与指针：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a := [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">b := a</span><br><span class="line">fmt.Printf(&quot;数组 a - 值：%v，指针：%p\n&quot;, a, &amp;a)</span><br><span class="line">fmt.Printf(&quot;数组 b - 值：%v，指针：%p\n&quot;, b, &amp;b)</span><br><span class="line">/* Output:</span><br><span class="line">数组 a - 值：[1 2 3 4 5]，指针：0xc00001e0f0</span><br><span class="line">数组 b - 值：[1 2 3 4 5]，指针：0xc00001e120</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以看到，两者的值是相同的，但是内存地址却不同，说明<strong>在赋值的过程中复制了整个数组</strong>。</p><p>我们再来看一下传参的例子。</p><p>定义一个函数 <code>transmitA</code>，把刚才我们初始化的数组 <code>a</code> 传入：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"数组 a - 值：%v，指针：%p\n"</span>, a, &amp;a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把数组 a 传入函数</span></span><br><span class="line">transmitA(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transmitA</span><span class="params">(a [5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"传入函数的数组 a - 值：%v，指针：%p\n"</span>, a, &amp;a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">数组 a - 值：[1 2 3 4 5]，指针：0xc00001e0f0</span></span><br><span class="line"><span class="comment">传入函数的数组 a - 值：[1 2 3 4 5]，指针：0xc00001e150</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>从输出可以看出，两者的值依然相同，内存地址却是不同的。这说明<strong>在传参时数组也被复制了</strong>。</p><h2 id="数组指针与指针数组"><a href="#数组指针与指针数组" class="headerlink" title="数组指针与指针数组"></a>数组指针与指针数组</h2><p>数组指针与指针数组听起来似乎有点拗口，那么来展开说明一下：</p><ul><li>数组指针：（指向）数组（的）指针</li><li>指针数组：（装满了）指针（的）数组</li></ul><p>也就是说，<strong>数组指针是个指针，它指向一个数组；而指针数组是个数组，它里面装满了指针</strong>。</p><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>声明一个数组 <code>a</code>，然后将它的地址赋值给 <code>arrayPointer</code>。这样一来，<code>arrayPointer</code> 就是一个指向数组 <code>a</code> 的指针，即数组指针，它的类型为 <code>*[5]int</code>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 把数组 a 的地址赋值给 arrayPointer</span></span><br><span class="line"><span class="comment">// arrayPointer 是指向数组的指针，类型为 *[5]int</span></span><br><span class="line">arrayPointer := &amp;a</span><br><span class="line">fmt.Println(arrayPointer)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">&amp;[1 2 3 4 5]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>初始化数组 <code>pointerArray</code>，传入的初始化值为整型 <code>m</code> 与 <code>n</code> 的内存地址（<code>&amp;m</code> 和 <code>&amp;n</code>），那么 <code>pointerArray</code> 就是一个装着 <code>int</code> 类型指针的数组，即指针数组，它的类型为 <code>[2]*int</code>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="number">1</span></span><br><span class="line">n := <span class="number">2</span></span><br><span class="line"><span class="comment">// 初始化 pointerArray，传入 m 与 n 的地址</span></span><br><span class="line"><span class="comment">// pointerArray 包含了整型地址，是一个装着指针的数组</span></span><br><span class="line">pointerArray := [<span class="number">2</span>]*<span class="keyword">int</span>&#123;&amp;m, &amp;n&#125;</span><br><span class="line">fmt.Println(pointerArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">[0xc0000aa000 0xc0000aa008]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>数组的长度是固定的，初始化时需要「明示」或「暗示」数组的长度</li><li><strong>数组的长度是数组类型的组成部分</strong>，<code>[2]int</code> 与 <code>[100]int</code> 是不同类型的数组</li><li>使用 <code>for ... range</code> 遍历数组</li><li>在 Go 语言中，数组是<strong>值类型</strong>，赋值和传递参数都会发生数组的复制</li><li>数组指针是一个指针，它指向了一个数组</li><li>指针数组是一个数组，它里面装着指针</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">《Go 学习笔记》</a></li></ul><hr><p><img src="/img/qrcode/wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      聊聊 Go 语言中的数组类型
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Go 语言中的字符表示与字符串遍历</title>
    <link href="http://jalan.space/2019/11/16/2019/go-character-string-range/"/>
    <id>http://jalan.space/2019/11/16/2019/go-character-string-range/</id>
    <published>2019-11-16T15:57:00.000Z</published>
    <updated>2019-11-21T13:29:18.484Z</updated>
    
    <content type="html"><![CDATA[<p>和其他语言不同，在 Go 语言中没有字符类型，<strong>字符只是整数的特殊用例</strong>。</p><p>为什么说<strong>字符只是整数的特殊用例</strong>呢？因为在 Go 中，用于表示字符的 <code>byte</code> 和 <code>rune</code> 类型都是<strong>整型的别名</strong>。在 Go 的源码中我们可以看到：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span></span><br><span class="line"><span class="comment">// used, by convention, to distinguish byte values from 8-bit unsigned</span></span><br><span class="line"><span class="comment">// integer values.</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">byte</span> = <span class="keyword">uint8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span><br><span class="line"><span class="comment">// used, by convention, to distinguish character values from integer values.</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br></pre></td></tr></table></figure><ul><li><code>byte</code> 是 <code>uint8</code> 的别名，长度为 1 个字节，用于表示 ASCII 字符</li><li><code>rune</code> 是 <code>int32</code> 的别名，长度为 4 个字节，用于表示以 UTF-8 编码的 Unicode 码点</li></ul><blockquote><p>Tips：Unicode 从 0 开始，为每个符号指定一个编号，这叫做「码点」（code point）。</p></blockquote><h2 id="字符的表示"><a href="#字符的表示" class="headerlink" title="字符的表示"></a>字符的表示</h2><p>那么，如何在 Go 语言中表示字符呢？</p><p>在 Go 语言中使用<strong>单引号包围</strong>来表示字符，例如 <code>&#39;j&#39;</code>。</p><h3 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h3><p>如果要表示 <code>byte</code> 类型的字符，可以使用 <code>byte</code> 关键字来指明字符变量的类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> byteC <span class="keyword">byte</span> = <span class="string">'j'</span></span><br></pre></td></tr></table></figure><p>又因为 <code>byte</code> 实质上是整型 <code>uint8</code>，所以可以直接转成整型值。在格式化说明符中我们使用 <code>%c</code> 表示字符，<code>%d</code> 表示整型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明 byte 类型字符</span></span><br><span class="line"><span class="keyword">var</span> byteC <span class="keyword">byte</span> = <span class="string">'j'</span></span><br><span class="line">fmt.Printf(<span class="string">"字符 %c 对应的整型为 %d\n"</span>, byteC, byteC)</span><br><span class="line"><span class="comment">// Output: 字符 j 对应的整型为 106</span></span><br></pre></td></tr></table></figure><h3 id="rune"><a href="#rune" class="headerlink" title="rune"></a>rune</h3><p>与 <code>byte</code> 相同，想要声明 <code>rune</code> 类型的字符可以使用 <code>rune</code> 关键字指明：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> runeC <span class="keyword">rune</span> = <span class="string">'J'</span></span><br></pre></td></tr></table></figure><p><strong>但如果在声明一个字符变量时没有指明类型，Go 会默认它是 <code>rune</code> 类型</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">runeC := <span class="string">'J'</span></span><br><span class="line">fmt.Printf(<span class="string">"字符 %c 的类型为 %T\n"</span>, runeC, runeC)</span><br><span class="line"><span class="comment">// Output: 字符 J 的类型为 int32</span></span><br></pre></td></tr></table></figure><h2 id="为什么需要两种类型？"><a href="#为什么需要两种类型？" class="headerlink" title="为什么需要两种类型？"></a>为什么需要两种类型？</h2><p>看到这里你可能会问了，既然都用于表示字符，为什么还需要两种类型呢？</p><p>我们知道，<code>byte</code> 占用一个字节，因此它可以用于表示 ASCII 字符。<strong>而 UTF-8 是一种变长的编码方法，字符长度从 1 个字节到 4 个字节不等</strong>。<code>byte</code> 显然不擅长这样的表示，就算你想要使用多个 <code>byte</code> 进行表示，你也无从知晓你要处理的 UTF-8 字符究竟占了几个字节。</p><p>因此，如果你在中文字符串上狂妄地进行截取，一定会输出乱码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">testString := <span class="string">"你好，世界"</span></span><br><span class="line">fmt.Println(testString[:<span class="number">2</span>]) <span class="comment">// 输出乱码，因为截取了前两个字节</span></span><br><span class="line">fmt.Println(testString[:<span class="number">3</span>]) <span class="comment">// 输出「你」，一个中文字符由三个字节表示</span></span><br></pre></td></tr></table></figure><p>此时就需要 <code>rune</code> 的帮助了。利用 <code>[]rune()</code> 将字符串转为 Unicode 码点再进行截取，这样就无需考虑字符串中含有 UTF-8 字符的情况了：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">testString := <span class="string">"你好，世界"</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>([]<span class="keyword">rune</span>(testString)[:<span class="number">2</span>])) <span class="comment">// 输出：「你好」</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips：Unicode 和 ASCII 一样，是一种字符集，UTF-8 则是一种编码方式。</p></blockquote><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>字符串遍历有两种方式，一种是下标遍历，一种是使用 <code>range</code>。</p><h3 id="下标遍历"><a href="#下标遍历" class="headerlink" title="下标遍历"></a>下标遍历</h3><p>由于在 Go 语言中，字符串以 UTF-8 编码方式存储，使用 <code>len()</code> 函数获取字符串长度时，获取到的是该 UTF-8 编码字符串的字节长度，<strong>通过下标索引字符串将会产生一个字节</strong>。因此，如果字符串中含有 UTF-8 编码字符，就会出现乱码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">testString := <span class="string">"Hello，世界"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(testString); i++ &#123;</span><br><span class="line">c := testString[i]</span><br><span class="line">fmt.Printf(<span class="string">"%c 的类型是 %s\n"</span>, c, reflect.TypeOf(c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">H 的类型是 uint8（ASCII 字符返回正常）</span></span><br><span class="line"><span class="comment">e 的类型是 uint8</span></span><br><span class="line"><span class="comment">l 的类型是 uint8</span></span><br><span class="line"><span class="comment">l 的类型是 uint8</span></span><br><span class="line"><span class="comment">o 的类型是 uint8</span></span><br><span class="line"><span class="comment">ï 的类型是 uint8（从这里开始出现了奇怪的乱码）</span></span><br><span class="line"><span class="comment">¼ 的类型是 uint8</span></span><br><span class="line"><span class="comment"> 的类型是 uint8</span></span><br><span class="line"><span class="comment">ä 的类型是 uint8</span></span><br><span class="line"><span class="comment">¸ 的类型是 uint8</span></span><br><span class="line"><span class="comment"> 的类型是 uint8</span></span><br><span class="line"><span class="comment">ç 的类型是 uint8</span></span><br><span class="line"><span class="comment"> 的类型是 uint8</span></span><br><span class="line"><span class="comment"> 的类型是 uint8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p><code>range</code> 遍历则会得到 <code>rune</code> 类型的字符：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">testString := <span class="string">"Hello，世界"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> testString &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%c 的类型是 %s\n"</span>, c, reflect.TypeOf(c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">H 的类型是 int32</span></span><br><span class="line"><span class="comment">e 的类型是 int32</span></span><br><span class="line"><span class="comment">l 的类型是 int32</span></span><br><span class="line"><span class="comment">l 的类型是 int32</span></span><br><span class="line"><span class="comment">o 的类型是 int32</span></span><br><span class="line"><span class="comment">， 的类型是 int32</span></span><br><span class="line"><span class="comment">世 的类型是 int32</span></span><br><span class="line"><span class="comment">界 的类型是 int32</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Go 语言中没有字符的概念，<strong>一个字符就是一堆字节</strong>，它可能是单个字节（ASCII 字符集），也有可能是多个字节（Unicode 字符集）</li><li><code>byte</code> 是 <code>uint8</code> 的别名，长度为 1 个字节，用于表示 ASCII 字符</li><li><code>rune</code> 则是 <code>int32</code> 的别名，长度为 4 个字节，用于表示以 UTF-8 编码的 Unicode 码点</li><li>字符串的截取是以字节为单位的</li><li>使用下标索引字符串会产生字节</li><li>想要遍历 <code>rune</code> 类型的字符则使用 <code>range</code> 方法进行遍历</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noopener">阮一峰: Unicode 与 JavaScript 详解</a></li><li><a href="https://blog.golang.org/strings" target="_blank" rel="noopener">The Go Blog - Strings, bytes, runes and characters in Go</a></li></ul><p><img src="/img/qrcode/wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      实时同步其他远程仓库
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Go" scheme="http://jalan.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 生产环境中填充数据</title>
    <link href="http://jalan.space/2019/10/27/2019/php-laravel-production-seed/"/>
    <id>http://jalan.space/2019/10/27/2019/php-laravel-production-seed/</id>
    <published>2019-10-27T13:32:00.000Z</published>
    <updated>2019-11-21T13:26:26.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Seeder is mainly to be used with test data。</p></blockquote><p>在 Laravel 中，我们常用 <a href="https://laravel.com/docs/5.8/seeding" target="_blank" rel="noopener">Database: Seeding</a> 操作填充测试数据，但在正式环境中使用 Seed 并不安全。</p><p>因为在测试环境中，无论运行多少次 <code>php artisan db:seed</code> 都无任何数据丢失的风险，而在正式环境中，这个操作<strong>一旦被执行就会被遗忘</strong>。所以，在生产环境中，我们选择使用<strong>迁移文件</strong>替代 Seed。</p><p>在迁移文件中，使用 <code>DB::table($tableName)-&gt;insert()</code> 方法来写入数据：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $tableName = <span class="string">'tests'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DB::table(<span class="keyword">$this</span>-&gt;tableName)-&gt;insert([</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'test'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'test'</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            ],</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reverse the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，一旦执行迁移文件，这次数据写入就会被记录到迁移记录中，防止下次重复执行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/21580088/laravel-migrations-seeding-for-production-data" target="_blank" rel="noopener">Laravel : Migrations &amp; Seeding for production data</a></li><li><a href="https://learnku.com/laravel/t/26049" target="_blank" rel="noopener">Laravel 数据填充（Seed）6 个小技巧分享</a></li></ul>]]></content>
    
    <summary type="html">
    
      Seed Or Migrate？
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="PHP" scheme="http://jalan.space/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://jalan.space/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>二零一九碎碎念</title>
    <link href="http://jalan.space/2019/10/23/2019/bibi/"/>
    <id>http://jalan.space/2019/10/23/2019/bibi/</id>
    <published>2019-10-23T13:41:00.000Z</published>
    <updated>2019-10-23T15:33:29.931Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="薯条是？" />    <label for="pass">薯条是？</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      我与春风皆过客
    
    </summary>
    
      <category term="少年人的冲动" scheme="http://jalan.space/categories/%E5%B0%91%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%86%B2%E5%8A%A8/"/>
    
    
      <category term="生活啊" scheme="http://jalan.space/tags/%E7%94%9F%E6%B4%BB%E5%95%8A/"/>
    
  </entry>
  
  <entry>
    <title>从购买云服务器到使用 Docker 部署个人相册</title>
    <link href="http://jalan.space/2019/10/15/2019/create-gallery-by-docker/"/>
    <id>http://jalan.space/2019/10/15/2019/create-gallery-by-docker/</id>
    <published>2019-10-15T15:52:00.000Z</published>
    <updated>2019-11-16T15:55:23.853Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到朋友圈和技术群里都在刷腾讯云双十一优惠活动，服务器一年 88 RMB，午休的时候就下单买了一台。服务器配置为 1 核 2G，操作系统为 CentOS，跑一些小站足够使用。说来惭愧，这是我的第一台（购买的）私人服务器，之前都在薅羊毛中度过（假的服务端）。</p><p>正好这几天想搭建个人相册，看到了 <a href="https://github.com/litten/zing-gallery" target="_blank" rel="noopener">Zing Gallery</a> 的 Demo 十分喜欢，既然有了服务器，那就撸起袖子干吧！</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>首先要在云服务器上安装 Docker 环境。</p><p>安装并运行 Docker：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum install docker-io –y</span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><p>检查安装结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><h2 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h2><p>先把 <a href="https://github.com/litten/zing-gallery" target="_blank" rel="noopener">Zing Gallery</a> Clone 到本地，按自己的需求修改配置并更换照片。根据其 README 可知：</p><ol><li>将照片放入 resources/photos 文件夹</li><li>执行命令 <code>npm i</code> 安装依赖</li><li>执行命令 <code>npm run start</code> 启动相册</li><li>项目的配置文件为 <em>config.js</em></li></ol><h2 id="项目容器化"><a href="#项目容器化" class="headerlink" title="项目容器化"></a>项目容器化</h2><p>因为要使用 Docker 部署，所以需要将项目容器化。</p><p>创建 <em>dockerfile</em>，配置如下：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.11</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"><span class="comment"># 将文件拷贝至工作目录</span></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash"><span class="comment"># 安装依赖</span></span></span><br><span class="line"><span class="bash">RUN npm i</span></span><br><span class="line"><span class="bash"><span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="bash">EXPOSE 8080</span></span><br><span class="line"><span class="bash"><span class="comment"># 运行项目</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>再创建一个 <em>.dockerignore</em> 文件用于忽略不必要的文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>在项目根目录下使用 <code>docker build</code> 创建镜像。假设给它起名为 <code>hello-gallery</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t hello-gallery .</span><br></pre></td></tr></table></figure><p>build 成功后会在本地生成一个 <code>hello-gallery:lastest</code> 镜像。</p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p>我们已经在本地完成了镜像的创建，要怎么把它部署到服务器上呢？我们需要一个镜像仓库，把本地的镜像 push 上去，再在服务器上 pull 下来。这里我选择的是 <a href="https://hub.qiniu.com/portal/home" target="_blank" rel="noopener">七牛云镜像仓库</a>。</p><p>在 push 镜像前需要先登录镜像仓库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login -u username -p password</span><br></pre></td></tr></table></figure><p>然后使用 <code>docker tag</code> 修改镜像名称，名称需要包含对应镜像仓库的域名：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag hello-gallery reg.qiniu.com/gallery/time:v1.0.0</span><br></pre></td></tr></table></figure><p>改好名称后就可以执行 push 操作了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push reg.qiniu.com/gallery/time:v1.0.0</span><br></pre></td></tr></table></figure><p>push 成功后，我们就能在服务器上 pull：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull reg.qiniu.com/gallery/time:v1.0.0</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>我们已经在服务器上成功 pull 了镜像文件，现在让它跑起来！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 8081:8080 reg.qiniu.com/gallery/time:v1.0.0</span><br></pre></td></tr></table></figure><p>这里对外暴露了 <code>8081</code> 端口，使用 <code>ip:8081</code> 即可访问，👉<a href="http://115.159.158.236:8081/" target="_blank" rel="noopener">戳这里这里</a>。</p><hr><p>因为域名绑定的手机号已经更换了，暂时没有办法绑定域名，后面再做一下域名绑定与持续集成吧。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://help.aliyun.com/document_detail/51853.html" target="_blank" rel="noopener">ECS上搭建Docker（CentOS7）</a></li><li><a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/" target="_blank" rel="noopener">把一个 Node.js web 应用程序给 Docker 化</a></li></ul>]]></content>
    
    <summary type="html">
    
      Powered by Zing Gallery.
    
    </summary>
    
      <category term="Web屠龙刀" scheme="http://jalan.space/categories/Web%E5%B1%A0%E9%BE%99%E5%88%80/"/>
    
    
      <category term="Docker" scheme="http://jalan.space/tags/Docker/"/>
    
  </entry>
  
</feed>
